{"ast":null,"code":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=useIMGElementStateWithCache;var _defaultInitialImageDimensions=_interopRequireDefault(require(\"./defaultInitialImageDimensions\"));var _getIMGState=require(\"./getIMGState\");var _useImageConcreteDimensions=_interopRequireDefault(require(\"./useImageConcreteDimensions\"));var _useImageSpecifiedDimensions=_interopRequireDefault(require(\"./useImageSpecifiedDimensions\"));var _useIMGNormalizedSource=_interopRequireDefault(require(\"./useIMGNormalizedSource\"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function useIMGElementStateWithCache(props){var alt=props.alt,altColor=props.altColor,source=props.source,contentWidth=props.contentWidth,computeMaxWidth=props.computeMaxWidth,objectFit=props.objectFit,_props$initialDimensi=props.initialDimensions,initialDimensions=_props$initialDimensi===void 0?_defaultInitialImageDimensions.default:_props$initialDimensi,cachedNaturalDimensions=props.cachedNaturalDimensions;var _ref=(0,_useImageSpecifiedDimensions.default)(props),flatStyle=_ref.flatStyle,specifiedDimensions=_ref.specifiedDimensions;var nomalizedSource=(0,_useIMGNormalizedSource.default)({specifiedDimensions:specifiedDimensions,source:source});var concreteDimensions=(0,_useImageConcreteDimensions.default)({flatStyle:flatStyle,naturalDimensions:cachedNaturalDimensions,specifiedDimensions:specifiedDimensions,computeMaxWidth:computeMaxWidth,contentWidth:contentWidth});return(0,_getIMGState.getIMGState)({error:null,concreteDimensions:concreteDimensions,containerStyle:flatStyle,initialDimensions:initialDimensions,objectFit:objectFit,source:nomalizedSource,alt:alt,altColor:altColor});}","map":{"version":3,"mappings":"kHAAA,sGACA,0CAMA,gGACA,kGACA,2KAOe,QAASA,4BAAT,CACbC,KADa,CAEkC,CAC/C,GACEC,IADF,CASID,KATJ,CACEC,GADF,CAEEC,QAFF,CASIF,KATJ,CAEEE,QAFF,CAGEC,MAHF,CASIH,KATJ,CAGEG,MAHF,CAIEC,YAJF,CASIJ,KATJ,CAIEI,YAJF,CAKEC,eALF,CASIL,KATJ,CAKEK,eALF,CAMEC,SANF,CASIN,KATJ,CAMEM,SANF,uBASIN,KATJ,CAOEO,iBAPF,CAOEA,iBAPF,gCAOsBC,sCAPtB,uBAQEC,uBARF,CASIT,KATJ,CAQES,uBARF,CAUA,SAA2C,yCAA4BT,KAA5B,CAA3C,CAAQU,SAAR,MAAQA,SAAR,CAAmBC,mBAAnB,MAAmBA,mBAAnB,CACA,GAAMC,gBAAe,CAAG,oCAAuB,CAC7CD,mBAD6C,CAC7CA,mBAD6C,CAE7CR,aAF6C,CAAvB,CAAxB,CAIA,GAAMU,mBAAkB,CAAG,wCAA2B,CACpDH,SADoD,CACpDA,SADoD,CAEpDI,iBAAiB,CAAEL,uBAFiC,CAGpDE,mBAHoD,CAGpDA,mBAHoD,CAIpDN,eAJoD,CAIpDA,eAJoD,CAKpDD,yBALoD,CAA3B,CAA3B,CAQA,MAAO,6BAAY,CACjBW,KAAK,CAAE,IADU,CAEjBF,kBAFiB,CAEjBA,kBAFiB,CAGjBG,cAAc,CAAEN,SAHC,CAIjBH,iBAJiB,CAIjBA,iBAJiB,CAKjBD,SALiB,CAKjBA,SALiB,CAMjBH,MAAM,CAAES,eANS,CAOjBX,GAPiB,CAOjBA,GAPiB,CAQjBC,iBARiB,CAAZ,CAAP,CAUD","names":["useIMGElementStateWithCache","props","alt","altColor","source","contentWidth","computeMaxWidth","objectFit","initialDimensions","defaultImageInitialDimensions","cachedNaturalDimensions","flatStyle","specifiedDimensions","nomalizedSource","concreteDimensions","naturalDimensions","error","containerStyle"],"sources":["useIMGElementStateWithCache.ts"],"sourcesContent":["import defaultImageInitialDimensions from './defaultInitialImageDimensions';\nimport { getIMGState } from './getIMGState';\nimport type {\n  UseIMGElementStateWithCacheProps,\n  IMGElementStateError,\n  IMGElementStateSuccess\n} from './img-types';\nimport useImageConcreteDimensions from './useImageConcreteDimensions';\nimport useImageSpecifiedDimensions from './useImageSpecifiedDimensions';\nimport useIMGNormalizedSource from './useIMGNormalizedSource';\n\n/**\n * This hook is useful when one has access to image natural dimensions prior to\n * loading. The `cachedNaturalDimensions` prop must be passed to immediately\n * compute concrete dimensions.\n */\nexport default function useIMGElementStateWithCache(\n  props: UseIMGElementStateWithCacheProps\n): IMGElementStateError | IMGElementStateSuccess {\n  const {\n    alt,\n    altColor,\n    source,\n    contentWidth,\n    computeMaxWidth,\n    objectFit,\n    initialDimensions = defaultImageInitialDimensions,\n    cachedNaturalDimensions\n  } = props;\n  const { flatStyle, specifiedDimensions } = useImageSpecifiedDimensions(props);\n  const nomalizedSource = useIMGNormalizedSource({\n    specifiedDimensions,\n    source\n  });\n  const concreteDimensions = useImageConcreteDimensions({\n    flatStyle,\n    naturalDimensions: cachedNaturalDimensions,\n    specifiedDimensions,\n    computeMaxWidth,\n    contentWidth\n  });\n\n  return getIMGState({\n    error: null,\n    concreteDimensions,\n    containerStyle: flatStyle,\n    initialDimensions,\n    objectFit,\n    source: nomalizedSource,\n    alt,\n    altColor\n  });\n}\n"]},"metadata":{},"sourceType":"script"}