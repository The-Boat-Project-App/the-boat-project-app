{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _toConsumableArray from\"@babel/runtime/helpers/toConsumableArray\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}import escape from'escape-string-regexp';import*as queryString from'query-string';import findFocusedRoute from\"./findFocusedRoute\";import validatePathConfig from\"./validatePathConfig\";export default function getStateFromPath(path,options){var _ref;if(options){validatePathConfig(options);}var initialRoutes=[];if(options!==null&&options!==void 0&&options.initialRouteName){initialRoutes.push({initialRouteName:options.initialRouteName,parentScreens:[]});}var screens=options===null||options===void 0?void 0:options.screens;var remaining=path.replace(/\\/+/g,'/').replace(/^\\//,'').replace(/\\?.*$/,'');remaining=remaining.endsWith('/')?remaining:remaining+\"/\";if(screens===undefined){var _routes=remaining.split('/').filter(Boolean).map(function(segment){var name=decodeURIComponent(segment);return{name:name};});if(_routes.length){return createNestedStateObject(path,_routes,initialRoutes);}return undefined;}var configs=(_ref=[]).concat.apply(_ref,_toConsumableArray(Object.keys(screens).map(function(key){return createNormalizedConfigs(key,screens,[],initialRoutes,[]);}))).sort(function(a,b){if(a.pattern===b.pattern){return b.routeNames.join('>').localeCompare(a.routeNames.join('>'));}if(a.pattern.startsWith(b.pattern)){return-1;}if(b.pattern.startsWith(a.pattern)){return 1;}var aParts=a.pattern.split('/');var bParts=b.pattern.split('/');for(var i=0;i<Math.max(aParts.length,bParts.length);i++){if(aParts[i]==null){return 1;}if(bParts[i]==null){return-1;}var aWildCard=aParts[i]==='*'||aParts[i].startsWith(':');var bWildCard=bParts[i]==='*'||bParts[i].startsWith(':');if(aWildCard&&bWildCard){continue;}if(aWildCard){return 1;}if(bWildCard){return-1;}}return bParts.length-aParts.length;});configs.reduce(function(acc,config){if(acc[config.pattern]){var a=acc[config.pattern].routeNames;var b=config.routeNames;var intersects=a.length>b.length?b.every(function(it,i){return a[i]===it;}):a.every(function(it,i){return b[i]===it;});if(!intersects){throw new Error(\"Found conflicting screens with the same pattern. The pattern '\"+config.pattern+\"' resolves to both '\"+a.join(' > ')+\"' and '\"+b.join(' > ')+\"'. Patterns must be unique and cannot resolve to more than one screen.\");}}return Object.assign(acc,_defineProperty({},config.pattern,config));},{});if(remaining==='/'){var match=configs.find(function(config){return config.path===''&&config.routeNames.every(function(name){var _configs$find;return!((_configs$find=configs.find(function(c){return c.screen===name;}))!==null&&_configs$find!==void 0&&_configs$find.path);});});if(match){return createNestedStateObject(path,match.routeNames.map(function(name){return{name:name};}),initialRoutes,configs);}return undefined;}var result;var current;var _matchAgainstConfigs=matchAgainstConfigs(remaining,configs.map(function(c){return _objectSpread(_objectSpread({},c),{},{regex:c.regex?new RegExp(c.regex.source+'$'):undefined});})),routes=_matchAgainstConfigs.routes,remainingPath=_matchAgainstConfigs.remainingPath;if(routes!==undefined){current=createNestedStateObject(path,routes,initialRoutes,configs);remaining=remainingPath;result=current;}if(current==null||result==null){return undefined;}return result;}var joinPaths=function joinPaths(){var _ref2;for(var _len=arguments.length,paths=new Array(_len),_key=0;_key<_len;_key++){paths[_key]=arguments[_key];}return(_ref2=[]).concat.apply(_ref2,_toConsumableArray(paths.map(function(p){return p.split('/');}))).filter(Boolean).join('/');};var matchAgainstConfigs=function matchAgainstConfigs(remaining,configs){var routes;var remainingPath=remaining;var _loop=function _loop(config){if(!config.regex){return\"continue\";}var match=remainingPath.match(config.regex);if(match){var matchedParams=(_config$pattern=config.pattern)===null||_config$pattern===void 0?void 0:_config$pattern.split('/').filter(function(p){return p.startsWith(':');}).reduce(function(acc,p,i){return Object.assign(acc,_defineProperty({},p,match[(i+1)*2].replace(/\\//,'')));},{});routes=config.routeNames.map(function(name){var _config$path;var config=configs.find(function(c){return c.screen===name;});var params=config===null||config===void 0?void 0:(_config$path=config.path)===null||_config$path===void 0?void 0:_config$path.split('/').filter(function(p){return p.startsWith(':');}).reduce(function(acc,p){var value=matchedParams[p];if(value){var _config$parse;var key=p.replace(/^:/,'').replace(/\\?$/,'');acc[key]=(_config$parse=config.parse)!==null&&_config$parse!==void 0&&_config$parse[key]?config.parse[key](value):value;}return acc;},{});if(params&&Object.keys(params).length){return{name:name,params:params};}return{name:name};});remainingPath=remainingPath.replace(match[1],'');return\"break\";}};for(var config of configs){var _config$pattern;var _ret=_loop(config);if(_ret===\"continue\")continue;if(_ret===\"break\")break;}return{routes:routes,remainingPath:remainingPath};};var createNormalizedConfigs=function createNormalizedConfigs(screen,routeConfig){var routeNames=arguments.length>2&&arguments[2]!==undefined?arguments[2]:[];var initials=arguments.length>3?arguments[3]:undefined;var parentScreens=arguments.length>4?arguments[4]:undefined;var parentPattern=arguments.length>5?arguments[5]:undefined;var configs=[];routeNames.push(screen);parentScreens.push(screen);var config=routeConfig[screen];if(typeof config==='string'){var pattern=parentPattern?joinPaths(parentPattern,config):config;configs.push(createConfigItem(screen,routeNames,pattern,config));}else if(typeof config==='object'){var _pattern2;if(typeof config.path==='string'){if(config.exact&&config.path===undefined){throw new Error(\"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\");}_pattern2=config.exact!==true?joinPaths(parentPattern||'',config.path||''):config.path||'';configs.push(createConfigItem(screen,routeNames,_pattern2,config.path,config.parse));}if(config.screens){if(config.initialRouteName){initials.push({initialRouteName:config.initialRouteName,parentScreens:parentScreens});}Object.keys(config.screens).forEach(function(nestedConfig){var _pattern;var result=createNormalizedConfigs(nestedConfig,config.screens,routeNames,initials,_toConsumableArray(parentScreens),(_pattern=_pattern2)!==null&&_pattern!==void 0?_pattern:parentPattern);configs.push.apply(configs,_toConsumableArray(result));});}}routeNames.pop();return configs;};var createConfigItem=function createConfigItem(screen,routeNames,pattern,path,parse){pattern=pattern.split('/').filter(Boolean).join('/');var regex=pattern?new RegExp(\"^(\"+pattern.split('/').map(function(it){if(it.startsWith(':')){return\"(([^/]+\\\\/)\"+(it.endsWith('?')?'?':'')+\")\";}return(it==='*'?'.*':escape(it))+\"\\\\/\";}).join('')+\")\"):undefined;return{screen:screen,regex:regex,pattern:pattern,path:path,routeNames:_toConsumableArray(routeNames),parse:parse};};var findParseConfigForRoute=function findParseConfigForRoute(routeName,flatConfig){for(var config of flatConfig){if(routeName===config.routeNames[config.routeNames.length-1]){return config.parse;}}return undefined;};var findInitialRoute=function findInitialRoute(routeName,parentScreens,initialRoutes){for(var config of initialRoutes){if(parentScreens.length===config.parentScreens.length){var sameParents=true;for(var i=0;i<parentScreens.length;i++){if(parentScreens[i].localeCompare(config.parentScreens[i])!==0){sameParents=false;break;}}if(sameParents){return routeName!==config.initialRouteName?config.initialRouteName:undefined;}}}return undefined;};var createStateObject=function createStateObject(initialRoute,route,isEmpty){if(isEmpty){if(initialRoute){return{index:1,routes:[{name:initialRoute},route]};}else{return{routes:[route]};}}else{if(initialRoute){return{index:1,routes:[{name:initialRoute},_objectSpread(_objectSpread({},route),{},{state:{routes:[]}})]};}else{return{routes:[_objectSpread(_objectSpread({},route),{},{state:{routes:[]}})]};}}};var createNestedStateObject=function createNestedStateObject(path,routes,initialRoutes,flatConfig){var state;var route=routes.shift();var parentScreens=[];var initialRoute=findInitialRoute(route.name,parentScreens,initialRoutes);parentScreens.push(route.name);state=createStateObject(initialRoute,route,routes.length===0);if(routes.length>0){var nestedState=state;while(route=routes.shift()){initialRoute=findInitialRoute(route.name,parentScreens,initialRoutes);var nestedStateIndex=nestedState.index||nestedState.routes.length-1;nestedState.routes[nestedStateIndex].state=createStateObject(initialRoute,route,routes.length===0);if(routes.length>0){nestedState=nestedState.routes[nestedStateIndex].state;}parentScreens.push(route.name);}}route=findFocusedRoute(state);route.path=path;var params=parseQueryParams(path,flatConfig?findParseConfigForRoute(route.name,flatConfig):undefined);if(params){route.params=_objectSpread(_objectSpread({},route.params),params);}return state;};var parseQueryParams=function parseQueryParams(path,parseConfig){var query=path.split('?')[1];var params=queryString.parse(query);if(parseConfig){Object.keys(params).forEach(function(name){if(Object.hasOwnProperty.call(parseConfig,name)&&typeof params[name]==='string'){params[name]=parseConfig[name](params[name]);}});}return Object.keys(params).length?params:undefined;};","map":{"version":3,"mappings":"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","names":["escape","queryString","findFocusedRoute","validatePathConfig","getStateFromPath","path","options","initialRoutes","initialRouteName","push","parentScreens","screens","remaining","replace","endsWith","undefined","routes","split","filter","Boolean","map","segment","name","decodeURIComponent","length","createNestedStateObject","configs","concat","Object","keys","key","createNormalizedConfigs","sort","a","b","pattern","routeNames","join","localeCompare","startsWith","aParts","bParts","i","Math","max","aWildCard","bWildCard","reduce","acc","config","intersects","every","it","Error","assign","match","find","c","screen","_configs$find","result","current","matchAgainstConfigs","regex","RegExp","source","remainingPath","joinPaths","paths","arguments","p","matchedParams","_config$pattern","params","_config$path","value","parse","routeConfig","initials","parentPattern","createConfigItem","exact","forEach","nestedConfig","pop","findParseConfigForRoute","routeName","flatConfig","findInitialRoute","sameParents","createStateObject","initialRoute","route","isEmpty","index","state","shift","nestedState","nestedStateIndex","parseQueryParams","parseConfig","query","hasOwnProperty","call"],"sources":["getStateFromPath.tsx"],"sourcesContent":["import type {\n  InitialState,\n  NavigationState,\n  PartialState,\n} from '@react-navigation/routers';\nimport escape from 'escape-string-regexp';\nimport * as queryString from 'query-string';\n\nimport findFocusedRoute from './findFocusedRoute';\nimport type { PathConfigMap } from './types';\nimport validatePathConfig from './validatePathConfig';\n\ntype Options<ParamList extends {}> = {\n  initialRouteName?: string;\n  screens: PathConfigMap<ParamList>;\n};\n\ntype ParseConfig = Record<string, (value: string) => any>;\n\ntype RouteConfig = {\n  screen: string;\n  regex?: RegExp;\n  path: string;\n  pattern: string;\n  routeNames: string[];\n  parse?: ParseConfig;\n};\n\ntype InitialRouteConfig = {\n  initialRouteName: string;\n  parentScreens: string[];\n};\n\ntype ResultState = PartialState<NavigationState> & {\n  state?: ResultState;\n};\n\ntype ParsedRoute = {\n  name: string;\n  path?: string;\n  params?: Record<string, any> | undefined;\n};\n\n/**\n * Utility to parse a path string to initial state object accepted by the container.\n * This is useful for deep linking when we need to handle the incoming URL.\n *\n * @example\n * ```js\n * getStateFromPath(\n *   '/chat/jane/42',\n *   {\n *     screens: {\n *       Chat: {\n *         path: 'chat/:author/:id',\n *         parse: { id: Number }\n *       }\n *     }\n *   }\n * )\n * ```\n * @param path Path string to parse and convert, e.g. /foo/bar?count=42.\n * @param options Extra options to fine-tune how to parse the path.\n */\nexport default function getStateFromPath<ParamList extends {}>(\n  path: string,\n  options?: Options<ParamList>\n): ResultState | undefined {\n  if (options) {\n    validatePathConfig(options);\n  }\n\n  let initialRoutes: InitialRouteConfig[] = [];\n\n  if (options?.initialRouteName) {\n    initialRoutes.push({\n      initialRouteName: options.initialRouteName,\n      parentScreens: [],\n    });\n  }\n\n  const screens = options?.screens;\n\n  let remaining = path\n    .replace(/\\/+/g, '/') // Replace multiple slash (//) with single ones\n    .replace(/^\\//, '') // Remove extra leading slash\n    .replace(/\\?.*$/, ''); // Remove query params which we will handle later\n\n  // Make sure there is a trailing slash\n  remaining = remaining.endsWith('/') ? remaining : `${remaining}/`;\n\n  if (screens === undefined) {\n    // When no config is specified, use the path segments as route names\n    const routes = remaining\n      .split('/')\n      .filter(Boolean)\n      .map((segment) => {\n        const name = decodeURIComponent(segment);\n        return { name };\n      });\n\n    if (routes.length) {\n      return createNestedStateObject(path, routes, initialRoutes);\n    }\n\n    return undefined;\n  }\n\n  // Create a normalized configs array which will be easier to use\n  const configs = ([] as RouteConfig[])\n    .concat(\n      ...Object.keys(screens).map((key) =>\n        createNormalizedConfigs(\n          key,\n          screens as PathConfigMap<object>,\n          [],\n          initialRoutes,\n          []\n        )\n      )\n    )\n    .sort((a, b) => {\n      // Sort config so that:\n      // - the most exhaustive ones are always at the beginning\n      // - patterns with wildcard are always at the end\n\n      // If 2 patterns are same, move the one with less route names up\n      // This is an error state, so it's only useful for consistent error messages\n      if (a.pattern === b.pattern) {\n        return b.routeNames.join('>').localeCompare(a.routeNames.join('>'));\n      }\n\n      // If one of the patterns starts with the other, it's more exhaustive\n      // So move it up\n      if (a.pattern.startsWith(b.pattern)) {\n        return -1;\n      }\n\n      if (b.pattern.startsWith(a.pattern)) {\n        return 1;\n      }\n\n      const aParts = a.pattern.split('/');\n      const bParts = b.pattern.split('/');\n\n      for (let i = 0; i < Math.max(aParts.length, bParts.length); i++) {\n        // if b is longer, b get higher priority\n        if (aParts[i] == null) {\n          return 1;\n        }\n        // if a is longer, a get higher priority\n        if (bParts[i] == null) {\n          return -1;\n        }\n        const aWildCard = aParts[i] === '*' || aParts[i].startsWith(':');\n        const bWildCard = bParts[i] === '*' || bParts[i].startsWith(':');\n        // if both are wildcard we compare next component\n        if (aWildCard && bWildCard) {\n          continue;\n        }\n        // if only a is wild card, b get higher priority\n        if (aWildCard) {\n          return 1;\n        }\n        // if only b is wild card, a get higher priority\n        if (bWildCard) {\n          return -1;\n        }\n      }\n      return bParts.length - aParts.length;\n    });\n\n  // Check for duplicate patterns in the config\n  configs.reduce<Record<string, RouteConfig>>((acc, config) => {\n    if (acc[config.pattern]) {\n      const a = acc[config.pattern].routeNames;\n      const b = config.routeNames;\n\n      // It's not a problem if the path string omitted from a inner most screen\n      // For example, it's ok if a path resolves to `A > B > C` or `A > B`\n      const intersects =\n        a.length > b.length\n          ? b.every((it, i) => a[i] === it)\n          : a.every((it, i) => b[i] === it);\n\n      if (!intersects) {\n        throw new Error(\n          `Found conflicting screens with the same pattern. The pattern '${\n            config.pattern\n          }' resolves to both '${a.join(' > ')}' and '${b.join(\n            ' > '\n          )}'. Patterns must be unique and cannot resolve to more than one screen.`\n        );\n      }\n    }\n\n    return Object.assign(acc, {\n      [config.pattern]: config,\n    });\n  }, {});\n\n  if (remaining === '/') {\n    // We need to add special handling of empty path so navigation to empty path also works\n    // When handling empty path, we should only look at the root level config\n    const match = configs.find(\n      (config) =>\n        config.path === '' &&\n        config.routeNames.every(\n          // Make sure that none of the parent configs have a non-empty path defined\n          (name) => !configs.find((c) => c.screen === name)?.path\n        )\n    );\n\n    if (match) {\n      return createNestedStateObject(\n        path,\n        match.routeNames.map((name) => ({ name })),\n        initialRoutes,\n        configs\n      );\n    }\n\n    return undefined;\n  }\n\n  let result: PartialState<NavigationState> | undefined;\n  let current: PartialState<NavigationState> | undefined;\n\n  // We match the whole path against the regex instead of segments\n  // This makes sure matches such as wildcard will catch any unmatched routes, even if nested\n  const { routes, remainingPath } = matchAgainstConfigs(\n    remaining,\n    configs.map((c) => ({\n      ...c,\n      // Add `$` to the regex to make sure it matches till end of the path and not just beginning\n      regex: c.regex ? new RegExp(c.regex.source + '$') : undefined,\n    }))\n  );\n\n  if (routes !== undefined) {\n    // This will always be empty if full path matched\n    current = createNestedStateObject(path, routes, initialRoutes, configs);\n    remaining = remainingPath;\n    result = current;\n  }\n\n  if (current == null || result == null) {\n    return undefined;\n  }\n\n  return result;\n}\n\nconst joinPaths = (...paths: string[]): string =>\n  ([] as string[])\n    .concat(...paths.map((p) => p.split('/')))\n    .filter(Boolean)\n    .join('/');\n\nconst matchAgainstConfigs = (remaining: string, configs: RouteConfig[]) => {\n  let routes: ParsedRoute[] | undefined;\n  let remainingPath = remaining;\n\n  // Go through all configs, and see if the next path segment matches our regex\n  for (const config of configs) {\n    if (!config.regex) {\n      continue;\n    }\n\n    const match = remainingPath.match(config.regex);\n\n    // If our regex matches, we need to extract params from the path\n    if (match) {\n      const matchedParams = config.pattern\n        ?.split('/')\n        .filter((p) => p.startsWith(':'))\n        .reduce<Record<string, any>>(\n          (acc, p, i) =>\n            Object.assign(acc, {\n              // The param segments appear every second item starting from 2 in the regex match result\n              [p]: match![(i + 1) * 2].replace(/\\//, ''),\n            }),\n          {}\n        );\n\n      routes = config.routeNames.map((name) => {\n        const config = configs.find((c) => c.screen === name);\n        const params = config?.path\n          ?.split('/')\n          .filter((p) => p.startsWith(':'))\n          .reduce<Record<string, any>>((acc, p) => {\n            const value = matchedParams[p];\n\n            if (value) {\n              const key = p.replace(/^:/, '').replace(/\\?$/, '');\n              acc[key] = config.parse?.[key] ? config.parse[key](value) : value;\n            }\n\n            return acc;\n          }, {});\n\n        if (params && Object.keys(params).length) {\n          return { name, params };\n        }\n\n        return { name };\n      });\n\n      remainingPath = remainingPath.replace(match[1], '');\n\n      break;\n    }\n  }\n\n  return { routes, remainingPath };\n};\n\nconst createNormalizedConfigs = (\n  screen: string,\n  routeConfig: PathConfigMap<object>,\n  routeNames: string[] = [],\n  initials: InitialRouteConfig[],\n  parentScreens: string[],\n  parentPattern?: string\n): RouteConfig[] => {\n  const configs: RouteConfig[] = [];\n\n  routeNames.push(screen);\n\n  parentScreens.push(screen);\n\n  // @ts-expect-error: we can't strongly typecheck this for now\n  const config = routeConfig[screen];\n\n  if (typeof config === 'string') {\n    // If a string is specified as the value of the key(e.g. Foo: '/path'), use it as the pattern\n    const pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n\n    configs.push(createConfigItem(screen, routeNames, pattern, config));\n  } else if (typeof config === 'object') {\n    let pattern: string | undefined;\n\n    // if an object is specified as the value (e.g. Foo: { ... }),\n    // it can have `path` property and\n    // it could have `screens` prop which has nested configs\n    if (typeof config.path === 'string') {\n      if (config.exact && config.path === undefined) {\n        throw new Error(\n          \"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\"\n        );\n      }\n\n      pattern =\n        config.exact !== true\n          ? joinPaths(parentPattern || '', config.path || '')\n          : config.path || '';\n\n      configs.push(\n        createConfigItem(\n          screen,\n          routeNames,\n          pattern!,\n          config.path,\n          config.parse\n        )\n      );\n    }\n\n    if (config.screens) {\n      // property `initialRouteName` without `screens` has no purpose\n      if (config.initialRouteName) {\n        initials.push({\n          initialRouteName: config.initialRouteName,\n          parentScreens,\n        });\n      }\n\n      Object.keys(config.screens).forEach((nestedConfig) => {\n        const result = createNormalizedConfigs(\n          nestedConfig,\n          config.screens as PathConfigMap<object>,\n          routeNames,\n          initials,\n          [...parentScreens],\n          pattern ?? parentPattern\n        );\n\n        configs.push(...result);\n      });\n    }\n  }\n\n  routeNames.pop();\n\n  return configs;\n};\n\nconst createConfigItem = (\n  screen: string,\n  routeNames: string[],\n  pattern: string,\n  path: string,\n  parse?: ParseConfig\n): RouteConfig => {\n  // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n  pattern = pattern.split('/').filter(Boolean).join('/');\n\n  const regex = pattern\n    ? new RegExp(\n        `^(${pattern\n          .split('/')\n          .map((it) => {\n            if (it.startsWith(':')) {\n              return `(([^/]+\\\\/)${it.endsWith('?') ? '?' : ''})`;\n            }\n\n            return `${it === '*' ? '.*' : escape(it)}\\\\/`;\n          })\n          .join('')})`\n      )\n    : undefined;\n\n  return {\n    screen,\n    regex,\n    pattern,\n    path,\n    // The routeNames array is mutated, so copy it to keep the current state\n    routeNames: [...routeNames],\n    parse,\n  };\n};\n\nconst findParseConfigForRoute = (\n  routeName: string,\n  flatConfig: RouteConfig[]\n): ParseConfig | undefined => {\n  for (const config of flatConfig) {\n    if (routeName === config.routeNames[config.routeNames.length - 1]) {\n      return config.parse;\n    }\n  }\n\n  return undefined;\n};\n\n// Try to find an initial route connected with the one passed\nconst findInitialRoute = (\n  routeName: string,\n  parentScreens: string[],\n  initialRoutes: InitialRouteConfig[]\n): string | undefined => {\n  for (const config of initialRoutes) {\n    if (parentScreens.length === config.parentScreens.length) {\n      let sameParents = true;\n      for (let i = 0; i < parentScreens.length; i++) {\n        if (parentScreens[i].localeCompare(config.parentScreens[i]) !== 0) {\n          sameParents = false;\n          break;\n        }\n      }\n      if (sameParents) {\n        return routeName !== config.initialRouteName\n          ? config.initialRouteName\n          : undefined;\n      }\n    }\n  }\n  return undefined;\n};\n\n// returns state object with values depending on whether\n// it is the end of state and if there is initialRoute for this level\nconst createStateObject = (\n  initialRoute: string | undefined,\n  route: ParsedRoute,\n  isEmpty: boolean\n): InitialState => {\n  if (isEmpty) {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{ name: initialRoute }, route],\n      };\n    } else {\n      return {\n        routes: [route],\n      };\n    }\n  } else {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{ name: initialRoute }, { ...route, state: { routes: [] } }],\n      };\n    } else {\n      return {\n        routes: [{ ...route, state: { routes: [] } }],\n      };\n    }\n  }\n};\n\nconst createNestedStateObject = (\n  path: string,\n  routes: ParsedRoute[],\n  initialRoutes: InitialRouteConfig[],\n  flatConfig?: RouteConfig[]\n) => {\n  let state: InitialState;\n  let route = routes.shift() as ParsedRoute;\n  const parentScreens: string[] = [];\n\n  let initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n\n  parentScreens.push(route.name);\n\n  state = createStateObject(initialRoute, route, routes.length === 0);\n\n  if (routes.length > 0) {\n    let nestedState = state;\n\n    while ((route = routes.shift() as ParsedRoute)) {\n      initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n\n      const nestedStateIndex =\n        nestedState.index || nestedState.routes.length - 1;\n\n      nestedState.routes[nestedStateIndex].state = createStateObject(\n        initialRoute,\n        route,\n        routes.length === 0\n      );\n\n      if (routes.length > 0) {\n        nestedState = nestedState.routes[nestedStateIndex]\n          .state as InitialState;\n      }\n\n      parentScreens.push(route.name);\n    }\n  }\n\n  route = findFocusedRoute(state) as ParsedRoute;\n  route.path = path;\n\n  const params = parseQueryParams(\n    path,\n    flatConfig ? findParseConfigForRoute(route.name, flatConfig) : undefined\n  );\n\n  if (params) {\n    route.params = { ...route.params, ...params };\n  }\n\n  return state;\n};\n\nconst parseQueryParams = (\n  path: string,\n  parseConfig?: Record<string, (value: string) => any>\n) => {\n  const query = path.split('?')[1];\n  const params = queryString.parse(query);\n\n  if (parseConfig) {\n    Object.keys(params).forEach((name) => {\n      if (\n        Object.hasOwnProperty.call(parseConfig, name) &&\n        typeof params[name] === 'string'\n      ) {\n        params[name] = parseConfig[name](params[name] as string);\n      }\n    });\n  }\n\n  return Object.keys(params).length ? params : undefined;\n};\n"]},"metadata":{},"sourceType":"module"}