{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}import*as React from'react';import isArrayEqual from\"./isArrayEqual\";import NavigationBuilderContext from\"./NavigationBuilderContext\";import NavigationRouteContext from\"./NavigationRouteContext\";export default function useOnGetState(_ref){var getState=_ref.getState,getStateListeners=_ref.getStateListeners;var _React$useContext=React.useContext(NavigationBuilderContext),addKeyedListener=_React$useContext.addKeyedListener;var route=React.useContext(NavigationRouteContext);var key=route?route.key:'root';var getRehydratedState=React.useCallback(function(){var state=getState();var routes=state.routes.map(function(route){var _getStateListeners$ro;var childState=(_getStateListeners$ro=getStateListeners[route.key])===null||_getStateListeners$ro===void 0?void 0:_getStateListeners$ro.call(getStateListeners);if(route.state===childState){return route;}return _objectSpread(_objectSpread({},route),{},{state:childState});});if(isArrayEqual(state.routes,routes)){return state;}return _objectSpread(_objectSpread({},state),{},{routes:routes});},[getState,getStateListeners]);React.useEffect(function(){return addKeyedListener===null||addKeyedListener===void 0?void 0:addKeyedListener('getState',key,getRehydratedState);},[addKeyedListener,getRehydratedState,key]);}","map":{"version":3,"mappings":"w0BACA,MAAO,GAAKA,MAAZ,KAAuB,OAAvB,CAEA,MAAOC,aAAP,sBACA,MAAOC,yBAAP,kCAGA,MAAOC,uBAAP,gCAOA,cAAe,SAASC,cAAT,MAGH,IAFVC,SAEU,MAFVA,QAEU,CADVC,iBACU,MADVA,iBACU,CACV,sBAA6BN,KAAK,CAACO,UAANP,CAAiBE,wBAAjBF,CAA7B,CAAQQ,gBAAR,mBAAQA,gBAAR,CACA,GAAMC,MAAK,CAAGT,KAAK,CAACO,UAANP,CAAiBG,sBAAjBH,CAAd,CACA,GAAMU,IAAG,CAAGD,KAAK,CAAGA,KAAK,CAACC,GAAT,CAAe,MAAhC,CAEA,GAAMC,mBAAkB,CAAGX,KAAK,CAACY,WAANZ,CAAkB,UAAM,CACjD,GAAMa,MAAK,CAAGR,QAAQ,EAAtB,CAGA,GAAMS,OAAM,CAAGD,KAAK,CAACC,MAAND,CAAaE,GAAbF,CAAkBJ,cAAD,CAAW,2BACzC,GAAMO,WAAU,wBAAGV,iBAAiB,CAACG,KAAK,CAACC,GAAP,CAApB,gDAAGO,6CAAnB,CAEA,GAAIR,KAAK,CAACI,KAANJ,GAAgBO,UAApB,CAAgC,CAC9B,MAAOP,MAAP,CACD,CAED,sCAAYA,KAAZ,MAAmBI,KAAK,CAAEG,UAA1B,GAPa,EAAf,CAUA,GAAIf,YAAY,CAACY,KAAK,CAACC,MAAP,CAAeA,MAAf,CAAhB,CAAwC,CACtC,MAAOD,MAAP,CACD,CAED,sCAAYA,KAAZ,MAAmBC,aAAnB,GAlByB,EAmBxB,CAACT,QAAD,CAAWC,iBAAX,CAnBwBN,CAA3B,CAqBAA,KAAK,CAACkB,SAANlB,CAAgB,UAAM,CACpB,MAAOQ,iBAAP,OAAOA,kBAAP,SAAOA,CAAP,MAAOA,iBAAgB,CAAG,UAAH,CAAeE,GAAf,CAAoBC,kBAApB,CAAvB,CADF,EAEG,CAACH,gBAAD,CAAmBG,kBAAnB,CAAuCD,GAAvC,CAFHV,EAGD","names":["React","isArrayEqual","NavigationBuilderContext","NavigationRouteContext","useOnGetState","getState","getStateListeners","useContext","addKeyedListener","route","key","getRehydratedState","useCallback","state","routes","map","childState","_getStateListeners$ro","useEffect"],"sources":["useOnGetState.tsx"],"sourcesContent":["import type { NavigationState } from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport isArrayEqual from './isArrayEqual';\nimport NavigationBuilderContext, {\n  GetStateListener,\n} from './NavigationBuilderContext';\nimport NavigationRouteContext from './NavigationRouteContext';\n\ntype Options = {\n  getState: () => NavigationState;\n  getStateListeners: Record<string, GetStateListener | undefined>;\n};\n\nexport default function useOnGetState({\n  getState,\n  getStateListeners,\n}: Options) {\n  const { addKeyedListener } = React.useContext(NavigationBuilderContext);\n  const route = React.useContext(NavigationRouteContext);\n  const key = route ? route.key : 'root';\n\n  const getRehydratedState = React.useCallback(() => {\n    const state = getState();\n\n    // Avoid returning new route objects if we don't need to\n    const routes = state.routes.map((route) => {\n      const childState = getStateListeners[route.key]?.();\n\n      if (route.state === childState) {\n        return route;\n      }\n\n      return { ...route, state: childState };\n    });\n\n    if (isArrayEqual(state.routes, routes)) {\n      return state;\n    }\n\n    return { ...state, routes };\n  }, [getState, getStateListeners]);\n\n  React.useEffect(() => {\n    return addKeyedListener?.('getState', key, getRehydratedState);\n  }, [addKeyedListener, getRehydratedState, key]);\n}\n"]},"metadata":{},"sourceType":"module"}