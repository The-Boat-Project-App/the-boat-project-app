{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import{EventEmitter}from'expo-modules-core';import React,{useEffect,useState,useRef,useMemo}from'react';import Animated from\"react-native-web/dist/exports/Animated\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import Text from\"react-native-web/dist/exports/Text\";import Platform from\"react-native-web/dist/exports/Platform\";import View from\"react-native-web/dist/exports/View\";import DevLoadingViewNativeModule from\"./DevLoadingViewNativeModule\";import{getInitialSafeArea}from\"./getInitialSafeArea\";export default function DevLoadingView(){var _useState=useState('Refreshing...'),_useState2=_slicedToArray(_useState,2),message=_useState2[0],setMessage=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),isDevLoading=_useState4[0],setIsDevLoading=_useState4[1];var _useState5=useState(false),_useState6=_slicedToArray(_useState5,2),isAnimating=_useState6[0],setIsAnimating=_useState6[1];var translateY=useRef(new Animated.Value(0)).current;var emitter=useMemo(function(){try{return new EventEmitter(DevLoadingViewNativeModule);}catch(error){throw new Error('Failed to instantiate native emitter in `DevLoadingView` because the native module `DevLoadingView` is undefined: '+error.message);}},[]);useEffect(function(){if(!emitter)return;function handleShowMessage(event){setMessage(event.message);translateY.setValue(0);setIsDevLoading(true);}function handleHide(){setIsAnimating(true);setIsDevLoading(false);Animated.timing(translateY,{toValue:150,delay:1000,duration:350,useNativeDriver:Platform.OS!=='web'}).start(function(_ref){var finished=_ref.finished;if(finished){setIsAnimating(false);translateY.setValue(0);}});}var showMessageSubscription=emitter.addListener('devLoadingView:showMessage',handleShowMessage);var hideSubscription=emitter.addListener('devLoadingView:hide',handleHide);return function cleanup(){showMessageSubscription.remove();hideSubscription.remove();};},[translateY,emitter]);if(!isDevLoading&&!isAnimating){return null;}return React.createElement(Animated.View,{style:[styles.animatedContainer,{transform:[{translateY:translateY}]}],pointerEvents:\"none\"},React.createElement(View,{style:styles.banner},React.createElement(View,{style:styles.contentContainer},React.createElement(View,{style:{flexDirection:'row'}},React.createElement(Text,{style:styles.text},message)),React.createElement(View,{style:{flex:1}},React.createElement(Text,{style:styles.subtitle},isDevLoading?'Using Fast Refresh':\"Don't see your changes? Reload the app\")))));}var styles=StyleSheet.create({animatedContainer:{position:'absolute',bottom:0,left:0,right:0,zIndex:42},banner:{flex:1,overflow:'visible',backgroundColor:'rgba(0,0,0,0.75)',paddingBottom:getInitialSafeArea().bottom},contentContainer:{flex:1,paddingTop:10,paddingBottom:5,alignItems:'center',justifyContent:'center',textAlign:'center'},text:{color:'#fff',fontSize:15},subtitle:{color:'rgba(255,255,255,0.8)'}});","map":{"version":3,"mappings":"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","names":["EventEmitter","React","useEffect","useState","useRef","useMemo","DevLoadingViewNativeModule","getInitialSafeArea","DevLoadingView","message","setMessage","isDevLoading","setIsDevLoading","isAnimating","setIsAnimating","translateY","Animated","Value","current","emitter","error","Error","handleShowMessage","event","setValue","handleHide","timing","toValue","delay","duration","useNativeDriver","Platform","OS","start","finished","showMessageSubscription","addListener","hideSubscription","cleanup","remove","View","style","styles","animatedContainer","transform","pointerEvents","banner","contentContainer","flexDirection","Text","text","flex","subtitle","StyleSheet","create","position","bottom","left","right","zIndex","overflow","backgroundColor","paddingBottom","paddingTop","alignItems","justifyContent","textAlign","color","fontSize"],"sourceRoot":"","sources":["../../src/environment/DevLoadingView.tsx"],"sourcesContent":["import { EventEmitter } from 'expo-modules-core';\nimport React, { useEffect, useState, useRef, useMemo } from 'react';\nimport { Animated, StyleSheet, Text, Platform, View } from 'react-native';\n\nimport DevLoadingViewNativeModule from './DevLoadingViewNativeModule';\nimport { getInitialSafeArea } from './getInitialSafeArea';\n\nexport default function DevLoadingView() {\n  const [message, setMessage] = useState('Refreshing...');\n  const [isDevLoading, setIsDevLoading] = useState(false);\n  const [isAnimating, setIsAnimating] = useState(false);\n  const translateY = useRef(new Animated.Value(0)).current;\n  const emitter = useMemo<EventEmitter>(() => {\n    try {\n      return new EventEmitter(DevLoadingViewNativeModule);\n    } catch (error) {\n      throw new Error(\n        'Failed to instantiate native emitter in `DevLoadingView` because the native module `DevLoadingView` is undefined: ' +\n          error.message\n      );\n    }\n  }, []);\n\n  useEffect(() => {\n    if (!emitter) return;\n\n    function handleShowMessage(event: { message: string }) {\n      setMessage(event.message);\n      // TODO: if we show the refreshing banner and don't get a hide message\n      // for 3 seconds, warn the user that it's taking a while and suggest\n      // they reload\n\n      translateY.setValue(0);\n      setIsDevLoading(true);\n    }\n\n    function handleHide() {\n      // TODO: if we showed the 'refreshing' banner less than 250ms ago, delay\n      // switching to the 'finished' banner\n\n      setIsAnimating(true);\n      setIsDevLoading(false);\n      Animated.timing(translateY, {\n        toValue: 150,\n        delay: 1000,\n        duration: 350,\n        useNativeDriver: Platform.OS !== 'web',\n      }).start(({ finished }) => {\n        if (finished) {\n          setIsAnimating(false);\n          translateY.setValue(0);\n        }\n      });\n    }\n\n    const showMessageSubscription = emitter.addListener(\n      'devLoadingView:showMessage',\n      handleShowMessage\n    );\n    const hideSubscription = emitter.addListener('devLoadingView:hide', handleHide);\n\n    return function cleanup() {\n      showMessageSubscription.remove();\n      hideSubscription.remove();\n    };\n  }, [translateY, emitter]);\n\n  if (!isDevLoading && !isAnimating) {\n    return null;\n  }\n\n  return (\n    <Animated.View\n      style={[styles.animatedContainer, { transform: [{ translateY }] }]}\n      pointerEvents=\"none\">\n      <View style={styles.banner}>\n        <View style={styles.contentContainer}>\n          <View style={{ flexDirection: 'row' }}>\n            <Text style={styles.text}>{message}</Text>\n          </View>\n\n          <View style={{ flex: 1 }}>\n            <Text style={styles.subtitle}>\n              {isDevLoading ? 'Using Fast Refresh' : \"Don't see your changes? Reload the app\"}\n            </Text>\n          </View>\n        </View>\n      </View>\n    </Animated.View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  animatedContainer: {\n    position: 'absolute',\n    bottom: 0,\n    left: 0,\n    right: 0,\n    zIndex: 42, // arbitrary\n  },\n\n  banner: {\n    flex: 1,\n    overflow: 'visible',\n    backgroundColor: 'rgba(0,0,0,0.75)',\n    paddingBottom: getInitialSafeArea().bottom,\n  },\n  contentContainer: {\n    flex: 1,\n    paddingTop: 10,\n    paddingBottom: 5,\n    alignItems: 'center',\n    justifyContent: 'center',\n    textAlign: 'center',\n  },\n  text: {\n    color: '#fff',\n    fontSize: 15,\n  },\n  subtitle: {\n    color: 'rgba(255,255,255,0.8)',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}