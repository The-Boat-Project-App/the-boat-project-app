{"ast":null,"code":"import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"min\",\"max\",\"value\",\"_filledTrack\",\"children\"];function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import React,{memo,forwardRef}from'react';import{Box}from\"../../primitives\";import{usePropsResolution}from\"../../../hooks/useThemeProps\";import{useHasResponsiveProps}from\"../../../hooks/useHasResponsiveProps\";var Progress=function Progress(props,ref){var _usePropsResolution=usePropsResolution('Progress',props),min=_usePropsResolution.min,max=_usePropsResolution.max,value=_usePropsResolution.value,_filledTrack=_usePropsResolution._filledTrack,children=_usePropsResolution.children,resolvedProps=_objectWithoutProperties(_usePropsResolution,_excluded);if(useHasResponsiveProps(props)){return null;}var valueWidth=value<max&&value>min?(value-min)/(max-min)*100:value>min?100:0;return React.createElement(Box,_extends({},resolvedProps,{ref:ref,accessible:true,accessibilityRole:\"progressbar\",accessibilityValue:{min:min,max:max,now:valueWidth}}),React.createElement(Box,_extends({w:\"\".concat(valueWidth,\"%\")},_filledTrack),children));};export default memo(forwardRef(Progress));","map":{"version":3,"mappings":"0aAAA,MAAOA,MAAP,EAAgBC,IAAhB,CAAsBC,UAAtB,KAAwC,OAAxC,CACA,OAASC,GAAT,wBAEA,OAASC,kBAAT,oCACA,OAASC,qBAAT,4CA+CA,GAAMC,SAAQ,CAAG,QAAXA,SAAW,CAACC,KAAD,CAAwBC,GAAxB,CAAsC,CACrD,wBAOIJ,kBAAkB,CAAC,UAAD,CAAaG,KAAb,CAPtB,CACEE,GADF,qBACEA,GADF,CAEEC,GAFF,qBAEEA,GAFF,CAGEC,KAHF,qBAGEA,KAHF,CAIEC,YAJF,qBAIEA,YAJF,CAKEC,QALF,qBAKEA,QALF,CAMKC,aANL,yDAUA,GAAIT,qBAAqB,CAACE,KAAD,CAAzB,CAAkC,CAChC,MAAO,KAAP,CACD,CAED,GAAIQ,WAAU,CACZJ,KAAK,CAAGD,GAARC,EAAeA,KAAK,CAAGF,GAAvBE,CACK,CAACA,KAAK,CAAGF,GAAT,GAAiBC,GAAG,CAAGD,GAAvB,EAA+B,GADpCE,CAEIA,KAAK,CAAGF,GAARE,CACA,GADAA,CAEA,CALN,CAOA,MACEX,qBAACG,GAAD,aACMW,aADN,EAEEN,GAAG,CAAEA,GAFP,CAGEQ,UAAU,KAHZ,CAIEC,iBAAiB,CAAC,aAJpB,CAKEC,kBAAkB,CAAE,CAClBT,GAAG,CAAEA,GADa,CAElBC,GAAG,CAAEA,GAFa,CAGlBS,GAAG,CAAEJ,UAHa,CALtB,GAWEf,oBAACG,GAAD,WAAKiB,CAAC,WAAKL,UAAL,KAAN,EAA8BH,YAA9B,EACGC,QADH,CAXF,CADF,CAtBF,EAyCA,cAAeZ,KAAI,CAACC,UAAU,CAACI,QAAD,CAAX,CAAnB","names":["React","memo","forwardRef","Box","usePropsResolution","useHasResponsiveProps","Progress","props","ref","min","max","value","_filledTrack","children","resolvedProps","valueWidth","accessible","accessibilityRole","accessibilityValue","now","w"],"sources":["index.tsx"],"sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { Box } from '../../primitives';\nimport type { InterfaceBoxProps } from '../../primitives/Box';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport type { ColorSchemeType } from '../../../components/types';\nimport type {\n  CustomProps,\n  ThemeComponentSizeType,\n} from '../../../components/types';\n\nexport interface InterfaceProgressProps\n  extends InterfaceBoxProps<IProgressProps> {\n  /**\n   * Value of Progress.\n   * @default 0\n   */\n  value?: number;\n  /**\n   * Defines height of Progress\n   * @default sm\n   */\n  size?: ThemeComponentSizeType<'Progress'>;\n\n  /**\n   * The color scheme of the progress. This should be one of the color keys in the theme (e.g.\"green\", \"red\").\n   * @default primary\n   */\n  colorScheme?: ColorSchemeType;\n  // /**\n  //  * Whether progress is indeterminate\n  //  * @default false\n  //  */\n  // isIndeterminate?: boolean;\n  /**\n   * Pseudo prop to give Prop to filled track\n   */\n  _filledTrack?: InterfaceBoxProps<IProgressProps>;\n  /**\n   * Min progress value\n   * @default 0\n   */\n  min?: number;\n  /**\n   * Max progress value\n   * @default 100\n   */\n  max?: number;\n}\n\nexport type IProgressProps = InterfaceProgressProps & CustomProps<'Progress'>;\nconst Progress = (props: IProgressProps, ref?: any) => {\n  const {\n    min,\n    max,\n    value,\n    _filledTrack,\n    children,\n    ...resolvedProps\n  } = usePropsResolution('Progress', props);\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  let valueWidth =\n    value < max && value > min\n      ? ((value - min) / (max - min)) * 100\n      : value > min\n      ? 100\n      : 0;\n\n  return (\n    <Box\n      {...resolvedProps}\n      ref={ref}\n      accessible\n      accessibilityRole=\"progressbar\"\n      accessibilityValue={{\n        min: min,\n        max: max,\n        now: valueWidth,\n      }}\n    >\n      <Box w={`${valueWidth}%`} {..._filledTrack}>\n        {children}\n      </Box>\n    </Box>\n  );\n};\n\nexport default memo(forwardRef(Progress));\n"]},"metadata":{},"sourceType":"module"}