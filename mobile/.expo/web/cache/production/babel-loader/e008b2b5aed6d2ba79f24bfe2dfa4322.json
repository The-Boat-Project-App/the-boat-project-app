{"ast":null,"code":"import React from'react';import{SafeAreaProvider,initialWindowMetrics as defaultInitialWindowMetrics}from'react-native-safe-area-context';import{SSRProvider}from'@react-native-aria/utils';import{theme as defaultTheme}from\"./../theme\";import HybridProvider from\"./hybrid-overlay/HybridProvider\";import{OverlayProvider}from'@react-native-aria/overlays';import{ToastProvider,ToastRef}from\"../components/composites/Toast\";import{defaultConfig,NativeBaseConfigProvider}from\"./NativeBaseContext\";import{useToast}from\"../components/composites/Toast\";import Platform from\"react-native-web/dist/exports/Platform\";import useWindowDimensions from\"react-native-web/dist/exports/useWindowDimensions\";import{getClosestBreakpoint,platformSpecificSpaceUnits}from\"../theme/tools/utils\";import{ResponsiveQueryProvider}from\"../utils/useResponsiveQuery\";var defaultInitialWindowMetricsBasedOnPlatform=Platform.select({web:{frame:{x:0,y:0,width:0,height:0},insets:{top:0,left:0,right:0,bottom:0}},default:defaultInitialWindowMetrics});var NativeBaseProvider=function NativeBaseProvider(props){var _config$theme,_useWindowDimensions;var colorModeManager=props.colorModeManager,_props$config=props.config,config=_props$config===void 0?defaultConfig:_props$config,children=props.children,_props$theme=props.theme,propsTheme=_props$theme===void 0?defaultTheme:_props$theme,initialWindowMetrics=props.initialWindowMetrics,isSSR=props.isSSR,disableContrastText=props.disableContrastText;var theme=(_config$theme=config.theme)!==null&&_config$theme!==void 0?_config$theme:propsTheme;var newTheme=React.useMemo(function(){if(config.enableRem){return platformSpecificSpaceUnits(theme);}return theme;},[config.enableRem,theme]);var windowWidth=(_useWindowDimensions=useWindowDimensions())===null||_useWindowDimensions===void 0?void 0:_useWindowDimensions.width;var currentBreakpoint=React.useMemo(function(){return getClosestBreakpoint(newTheme.breakpoints,windowWidth);},[windowWidth,newTheme.breakpoints]);return React.createElement(NativeBaseConfigProvider,{theme:newTheme,config:config,currentBreakpoint:currentBreakpoint,isSSR:isSSR,disableContrastText:disableContrastText},React.createElement(SafeAreaProvider,{initialMetrics:initialWindowMetrics!==null&&initialWindowMetrics!==void 0?initialWindowMetrics:defaultInitialWindowMetricsBasedOnPlatform},React.createElement(ResponsiveQueryProvider,{disableCSSMediaQueries:!isSSR},React.createElement(HybridProvider,{colorModeManager:colorModeManager,options:theme.config},React.createElement(OverlayProvider,null,React.createElement(ToastProvider,null,React.createElement(InitializeToastRef,null),React.createElement(SSRProvider,null,children)))))));};var InitializeToastRef=function InitializeToastRef(){var toast=useToast();ToastRef.current=toast;return null;};export{NativeBaseProvider};","map":{"version":3,"mappings":"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","names":["React","SafeAreaProvider","initialWindowMetrics","defaultInitialWindowMetrics","SSRProvider","theme","defaultTheme","HybridProvider","OverlayProvider","ToastProvider","ToastRef","defaultConfig","NativeBaseConfigProvider","useToast","getClosestBreakpoint","platformSpecificSpaceUnits","ResponsiveQueryProvider","defaultInitialWindowMetricsBasedOnPlatform","Platform","select","web","frame","x","y","width","height","insets","top","left","right","bottom","default","NativeBaseProvider","props","colorModeManager","config","children","propsTheme","isSSR","disableContrastText","newTheme","useMemo","enableRem","windowWidth","useWindowDimensions","_useWindowDimensions","currentBreakpoint","breakpoints","initialMetrics","disableCSSMediaQueries","options","InitializeToastRef","toast","current"],"sources":["NativeBaseProvider.tsx"],"sourcesContent":["import React from 'react';\nimport {\n  SafeAreaProvider,\n  Metrics,\n  initialWindowMetrics as defaultInitialWindowMetrics,\n} from 'react-native-safe-area-context';\nimport { SSRProvider } from '@react-native-aria/utils';\nimport { theme as defaultTheme, ITheme } from './../theme';\nimport type { IColorModeProviderProps } from './color-mode';\nimport HybridProvider from './hybrid-overlay/HybridProvider';\nimport { OverlayProvider } from '@react-native-aria/overlays';\nimport { ToastProvider, ToastRef } from '../components/composites/Toast';\nimport {\n  defaultConfig,\n  INativebaseConfig,\n  NativeBaseConfigProvider,\n} from './NativeBaseContext';\nimport { useToast } from '../components/composites/Toast';\nimport { Platform, useWindowDimensions } from 'react-native';\nimport {\n  getClosestBreakpoint,\n  platformSpecificSpaceUnits,\n} from '../theme/tools/utils';\nimport { ResponsiveQueryProvider } from '../utils/useResponsiveQuery';\n\n// For SSR to work, we need to pass initial insets as 0 values on web.\n\n// https://github.com/th3rdwave/react-native-safe-area-context/issues/132\nconst defaultInitialWindowMetricsBasedOnPlatform: Metrics | null = Platform.select(\n  {\n    web: {\n      frame: { x: 0, y: 0, width: 0, height: 0 },\n      insets: { top: 0, left: 0, right: 0, bottom: 0 },\n    },\n    default: defaultInitialWindowMetrics,\n  }\n);\n\nexport interface NativeBaseProviderProps {\n  theme?: ITheme;\n  colorModeManager?: IColorModeProviderProps['colorModeManager'];\n  children?: React.ReactNode;\n  initialWindowMetrics?: any;\n  config?: INativebaseConfig;\n  isSSR?: boolean;\n  disableContrastText?: boolean;\n  // Refer https://github.com/th3rdwave/react-native-safe-area-context#testing\n}\n\nconst NativeBaseProvider = (props: NativeBaseProviderProps) => {\n  const {\n    colorModeManager,\n    config = defaultConfig,\n    children,\n    theme: propsTheme = defaultTheme,\n    initialWindowMetrics,\n    isSSR,\n    disableContrastText,\n  } = props;\n  const theme = config.theme ?? propsTheme;\n\n  const newTheme = React.useMemo(() => {\n    if (config.enableRem) {\n      return platformSpecificSpaceUnits(theme);\n    }\n    return theme;\n  }, [config.enableRem, theme]);\n\n  const windowWidth = useWindowDimensions()?.width;\n\n  const currentBreakpoint = React.useMemo(\n    () => getClosestBreakpoint(newTheme.breakpoints, windowWidth),\n    [windowWidth, newTheme.breakpoints]\n  );\n\n  return (\n    <NativeBaseConfigProvider\n      theme={newTheme}\n      config={config}\n      currentBreakpoint={currentBreakpoint}\n      isSSR={isSSR}\n      disableContrastText={disableContrastText}\n    >\n      <SafeAreaProvider\n        initialMetrics={\n          initialWindowMetrics ?? defaultInitialWindowMetricsBasedOnPlatform\n        }\n      >\n        <ResponsiveQueryProvider disableCSSMediaQueries={!isSSR}>\n          <HybridProvider\n            colorModeManager={colorModeManager}\n            options={theme.config}\n          >\n            <OverlayProvider>\n              <ToastProvider>\n                <InitializeToastRef />\n                <SSRProvider>{children}</SSRProvider>\n              </ToastProvider>\n            </OverlayProvider>\n          </HybridProvider>\n        </ResponsiveQueryProvider>\n      </SafeAreaProvider>\n    </NativeBaseConfigProvider>\n  );\n};\n\nconst InitializeToastRef = () => {\n  const toast = useToast();\n  ToastRef.current = toast;\n  return null;\n};\n\nexport { NativeBaseProvider };\n"]},"metadata":{},"sourceType":"module"}