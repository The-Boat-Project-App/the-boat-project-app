{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import _defineProperty from\"@babel/runtime/helpers/defineProperty\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}import React from'react';import PropTypes from'prop-types';import Marker from\"./MapMarker\";import Polyline from\"./MapPolyline\";import Polygon from\"./MapPolygon\";import{ColorPropType}from'deprecated-react-native-prop-types';import{jsx as _jsx}from\"react/jsx-runtime\";var propTypes={geojson:PropTypes.object.isRequired,strokeColor:ColorPropType,fillColor:ColorPropType,strokeWidth:PropTypes.number,lineDashPhase:PropTypes.number,tappable:PropTypes.bool,lineDashPattern:PropTypes.arrayOf(PropTypes.number),lineCap:PropTypes.oneOf(['butt','round','square']),lineJoin:PropTypes.oneOf(['miter','round','bevel']),miterLimit:PropTypes.number,zIndex:PropTypes.number,onPress:PropTypes.func,markerComponent:PropTypes.node,title:PropTypes.string};var Geojson=function Geojson(props){var title=props.title,image=props.image,zIndex=props.zIndex,_onPress=props.onPress,lineCap=props.lineCap,lineJoin=props.lineJoin,tappable=props.tappable,miterLimit=props.miterLimit,lineDashPhase=props.lineDashPhase,lineDashPattern=props.lineDashPattern,markerComponent=props.markerComponent;var overlays=makeOverlays(props.geojson.features);return _jsx(React.Fragment,{children:overlays.map(function(overlay,index){var fillColor=getColor(props,overlay,'fill','fillColor');var strokeColor=getColor(props,overlay,'stroke','strokeColor');var markerColor=getColor(props,overlay,'marker-color','color');var strokeWidth=getStrokeWidth(props,overlay);if(overlay.type==='point'){return _jsx(Marker,{coordinate:overlay.coordinates,image:image,title:title,pinColor:markerColor,zIndex:zIndex,onPress:function onPress(){return _onPress&&_onPress(overlay);},children:markerComponent},index);}if(overlay.type==='polygon'){return _jsx(Polygon,{coordinates:overlay.coordinates,holes:overlay.holes,strokeColor:strokeColor,fillColor:fillColor,strokeWidth:strokeWidth,tappable:tappable,onPress:function onPress(){return _onPress&&_onPress(overlay);},zIndex:zIndex},index);}if(overlay.type==='polyline'){return _jsx(Polyline,{coordinates:overlay.coordinates,strokeColor:strokeColor,strokeWidth:strokeWidth,lineDashPhase:lineDashPhase,lineDashPattern:lineDashPattern,lineCap:lineCap,lineJoin:lineJoin,miterLimit:miterLimit,zIndex:zIndex,tappable:tappable,onPress:function onPress(){return _onPress&&_onPress(overlay);}},index);}})});};Geojson.propTypes=propTypes;export default Geojson;export var makeOverlays=function makeOverlays(features){var points=features.filter(function(f){return f.geometry&&(f.geometry.type==='Point'||f.geometry.type==='MultiPoint');}).map(function(feature){return makeCoordinates(feature).map(function(coordinates){return makeOverlay(coordinates,feature);});}).reduce(flatten,[]).map(function(overlay){return _objectSpread(_objectSpread({},overlay),{},{type:'point'});});var lines=features.filter(function(f){return f.geometry&&(f.geometry.type==='LineString'||f.geometry.type==='MultiLineString');}).map(function(feature){return makeCoordinates(feature).map(function(coordinates){return makeOverlay(coordinates,feature);});}).reduce(flatten,[]).map(function(overlay){return _objectSpread(_objectSpread({},overlay),{},{type:'polyline'});});var multipolygons=features.filter(function(f){return f.geometry&&f.geometry.type==='MultiPolygon';}).map(function(feature){return makeCoordinates(feature).map(function(coordinates){return makeOverlay(coordinates,feature);});}).reduce(flatten,[]);var polygons=features.filter(function(f){return f.geometry&&f.geometry.type==='Polygon';}).map(function(feature){return makeOverlay(makeCoordinates(feature),feature);}).reduce(flatten,[]).concat(multipolygons).map(function(overlay){return _objectSpread(_objectSpread({},overlay),{},{type:'polygon'});});return points.concat(lines).concat(polygons);};var flatten=function flatten(prev,curr){return prev.concat(curr);};var makeOverlay=function makeOverlay(coordinates,feature){var overlay={feature:feature};if(feature.geometry.type==='Polygon'||feature.geometry.type==='MultiPolygon'){overlay.coordinates=coordinates[0];if(coordinates.length>1){overlay.holes=coordinates.slice(1);}}else{overlay.coordinates=coordinates;}return overlay;};var makePoint=function makePoint(c){return{latitude:c[1],longitude:c[0]};};var makeLine=function makeLine(l){return l.map(makePoint);};var makeCoordinates=function makeCoordinates(feature){var g=feature.geometry;if(g.type==='Point'){return[makePoint(g.coordinates)];}else if(g.type==='MultiPoint'){return g.coordinates.map(makePoint);}else if(g.type==='LineString'){return[makeLine(g.coordinates)];}else if(g.type==='MultiLineString'){return g.coordinates.map(makeLine);}else if(g.type==='Polygon'){return g.coordinates.map(makeLine);}else if(g.type==='MultiPolygon'){return g.coordinates.map(function(p){return p.map(makeLine);});}else{return[];}};var doesOverlayContainProperty=function doesOverlayContainProperty(overlay,property){return overlay.feature&&overlay.feature.properties&&overlay.feature.properties[property];};var getRgbaFromHex=function getRgbaFromHex(hex){var alpha=arguments.length>1&&arguments[1]!==undefined?arguments[1]:1;var _hex$match$map=hex.match(/\\w\\w/g).map(function(x){return parseInt(x,16);}),_hex$match$map2=_slicedToArray(_hex$match$map,3),r=_hex$match$map2[0],g=_hex$match$map2[1],b=_hex$match$map2[2];return\"rgba(\"+r+\",\"+g+\",\"+b+\",\"+alpha+\")\";};var getColor=function getColor(props,overlay,colorType,overrideColorProp){if(props.hasOwnProperty(overrideColorProp)){return props[overrideColorProp];}if(doesOverlayContainProperty(overlay,colorType)){var color=overlay.feature.properties[colorType];var opacityProperty=colorType+'-opacity';if(doesOverlayContainProperty(overlay,opacityProperty)&&color[0]==='#'){color=getRgbaFromHex(color,overlay.feature.properties[opacityProperty]);}return color;}return;};var getStrokeWidth=function getStrokeWidth(props,overlay){if(props.hasOwnProperty('strokeWidth')){return props.strokeWidth;}if(doesOverlayContainProperty(overlay,'stroke-width')){return overlay.feature.properties['stroke-width'];}return;};","map":{"version":3,"names":["React","PropTypes","Marker","Polyline","Polygon","ColorPropType","propTypes","geojson","object","isRequired","strokeColor","fillColor","strokeWidth","number","lineDashPhase","tappable","bool","lineDashPattern","arrayOf","lineCap","oneOf","lineJoin","miterLimit","zIndex","onPress","func","markerComponent","node","title","string","Geojson","props","image","overlays","makeOverlays","features","map","overlay","index","getColor","markerColor","getStrokeWidth","type","coordinates","holes","points","filter","f","geometry","feature","makeCoordinates","makeOverlay","reduce","flatten","lines","multipolygons","polygons","concat","prev","curr","length","slice","makePoint","c","latitude","longitude","makeLine","l","g","p","doesOverlayContainProperty","property","properties","getRgbaFromHex","hex","alpha","match","x","parseInt","r","b","colorType","overrideColorProp","hasOwnProperty","color","opacityProperty"],"sources":["/Users/matthieu/Documents/boatproject/node_modules/react-native-maps/src/Geojson.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport Marker from './MapMarker';\nimport Polyline from './MapPolyline';\nimport Polygon from './MapPolygon';\nimport { ColorPropType } from 'deprecated-react-native-prop-types';\n\nconst propTypes = {\n  /**\n   * [Geojson](https://geojson.org/) description of object.\n   */\n  geojson: PropTypes.object.isRequired,\n\n  /**\n   * The stroke color to use for the path.\n   */\n  strokeColor: ColorPropType,\n\n  /**\n   * The fill color to use for the path.\n   */\n  fillColor: ColorPropType,\n\n  /**\n   * The stroke width to use for the path.\n   */\n  strokeWidth: PropTypes.number,\n\n  /**\n   * The offset (in points) at which to start drawing the dash pattern.\n   *\n   * Use this property to start drawing a dashed line partway through a segment or gap. For\n   * example, a phase value of 6 for the patter 5-2-3-2 would cause drawing to begin in the\n   * middle of the first gap.\n   *\n   * The default value of this property is 0.\n   *\n   * @platform ios\n   */\n  lineDashPhase: PropTypes.number,\n\n  /**\n   * Make the `Polygon` or `Polyline` tappable\n   *\n   */\n  tappable: PropTypes.bool,\n\n  /**\n   * An array of numbers specifying the dash pattern to use for the path.\n   *\n   * The array contains one or more numbers that indicate the lengths (measured in points) of the\n   * line segments and gaps in the pattern. The values in the array alternate, starting with the\n   * first line segment length, followed by the first gap length, followed by the second line\n   * segment length, and so on.\n   *\n   * This property is set to `null` by default, which indicates no line dash pattern.\n   *\n   * @platform ios\n   */\n  lineDashPattern: PropTypes.arrayOf(PropTypes.number),\n\n  /**\n   * The line cap style to apply to the open ends of the path.\n   * The default style is `round`.\n   *\n   * @platform ios\n   */\n  lineCap: PropTypes.oneOf(['butt', 'round', 'square']),\n\n  /**\n   * The line join style to apply to corners of the path.\n   * The default style is `round`.\n   *\n   * @platform ios\n   */\n  lineJoin: PropTypes.oneOf(['miter', 'round', 'bevel']),\n\n  /**\n   * The limiting value that helps avoid spikes at junctions between connected line segments.\n   * The miter limit helps you avoid spikes in paths that use the `miter` `lineJoin` style. If\n   * the ratio of the miter length—that is, the diagonal length of the miter join—to the line\n   * thickness exceeds the miter limit, the joint is converted to a bevel join. The default\n   * miter limit is 10, which results in the conversion of miters whose angle at the joint\n   * is less than 11 degrees.\n   *\n   * @platform ios\n   */\n  miterLimit: PropTypes.number,\n\n  /**\n   * The order in which this tile overlay is drawn with respect to other overlays. An overlay\n   * with a larger z-index is drawn over overlays with smaller z-indices. The order of overlays\n   * with the same z-index is arbitrary. The default zIndex is 0.\n   *\n   * @platform android\n   */\n  zIndex: PropTypes.number,\n\n  /**\n   * Callback that is called when the user presses on the polygon\n   */\n  onPress: PropTypes.func,\n\n  /**\n   * Component to render in place of the default marker when the overlay type is a `point`\n   *\n   */\n  markerComponent: PropTypes.node,\n\n  /**\n   * The title of the marker. This is only used if the <Marker /> component has no children that\n   * are a `<Callout />`, in which case the default callout behavior will be used, which\n   * will show both the `title` and the `description`, if provided.\n   */\n  title: PropTypes.string,\n};\n\nconst Geojson = (props) => {\n  const {\n    title,\n    image,\n    zIndex,\n    onPress,\n    lineCap,\n    lineJoin,\n    tappable,\n    miterLimit,\n    lineDashPhase,\n    lineDashPattern,\n    markerComponent,\n  } = props;\n  const overlays = makeOverlays(props.geojson.features);\n  return (\n    <React.Fragment>\n      {overlays.map((overlay, index) => {\n        const fillColor = getColor(props, overlay, 'fill', 'fillColor');\n        const strokeColor = getColor(props, overlay, 'stroke', 'strokeColor');\n        const markerColor = getColor(props, overlay, 'marker-color', 'color');\n        const strokeWidth = getStrokeWidth(props, overlay);\n        if (overlay.type === 'point') {\n          return (\n            <Marker\n              key={index}\n              coordinate={overlay.coordinates}\n              image={image}\n              title={title}\n              pinColor={markerColor}\n              zIndex={zIndex}\n              onPress={() => onPress && onPress(overlay)}\n            >\n              {markerComponent}\n            </Marker>\n          );\n        }\n        if (overlay.type === 'polygon') {\n          return (\n            <Polygon\n              key={index}\n              coordinates={overlay.coordinates}\n              holes={overlay.holes}\n              strokeColor={strokeColor}\n              fillColor={fillColor}\n              strokeWidth={strokeWidth}\n              tappable={tappable}\n              onPress={() => onPress && onPress(overlay)}\n              zIndex={zIndex}\n            />\n          );\n        }\n        if (overlay.type === 'polyline') {\n          return (\n            <Polyline\n              key={index}\n              coordinates={overlay.coordinates}\n              strokeColor={strokeColor}\n              strokeWidth={strokeWidth}\n              lineDashPhase={lineDashPhase}\n              lineDashPattern={lineDashPattern}\n              lineCap={lineCap}\n              lineJoin={lineJoin}\n              miterLimit={miterLimit}\n              zIndex={zIndex}\n              tappable={tappable}\n              onPress={() => onPress && onPress(overlay)}\n            />\n          );\n        }\n      })}\n    </React.Fragment>\n  );\n};\n\nGeojson.propTypes = propTypes;\n\nexport default Geojson;\n\nexport const makeOverlays = (features) => {\n  const points = features\n    .filter(\n      (f) =>\n        f.geometry &&\n        (f.geometry.type === 'Point' || f.geometry.type === 'MultiPoint')\n    )\n    .map((feature) =>\n      makeCoordinates(feature).map((coordinates) =>\n        makeOverlay(coordinates, feature)\n      )\n    )\n    .reduce(flatten, [])\n    .map((overlay) => ({ ...overlay, type: 'point' }));\n\n  const lines = features\n    .filter(\n      (f) =>\n        f.geometry &&\n        (f.geometry.type === 'LineString' ||\n          f.geometry.type === 'MultiLineString')\n    )\n    .map((feature) =>\n      makeCoordinates(feature).map((coordinates) =>\n        makeOverlay(coordinates, feature)\n      )\n    )\n    .reduce(flatten, [])\n    .map((overlay) => ({ ...overlay, type: 'polyline' }));\n\n  const multipolygons = features\n    .filter((f) => f.geometry && f.geometry.type === 'MultiPolygon')\n    .map((feature) =>\n      makeCoordinates(feature).map((coordinates) =>\n        makeOverlay(coordinates, feature)\n      )\n    )\n    .reduce(flatten, []);\n\n  const polygons = features\n    .filter((f) => f.geometry && f.geometry.type === 'Polygon')\n    .map((feature) => makeOverlay(makeCoordinates(feature), feature))\n    .reduce(flatten, [])\n    .concat(multipolygons)\n    .map((overlay) => ({ ...overlay, type: 'polygon' }));\n\n  return points.concat(lines).concat(polygons);\n};\n\nconst flatten = (prev, curr) => prev.concat(curr);\n\nconst makeOverlay = (coordinates, feature) => {\n  let overlay = {\n    feature,\n  };\n  if (\n    feature.geometry.type === 'Polygon' ||\n    feature.geometry.type === 'MultiPolygon'\n  ) {\n    overlay.coordinates = coordinates[0];\n    if (coordinates.length > 1) {\n      overlay.holes = coordinates.slice(1);\n    }\n  } else {\n    overlay.coordinates = coordinates;\n  }\n  return overlay;\n};\n\nconst makePoint = (c) => ({ latitude: c[1], longitude: c[0] });\n\nconst makeLine = (l) => l.map(makePoint);\n\nconst makeCoordinates = (feature) => {\n  const g = feature.geometry;\n  if (g.type === 'Point') {\n    return [makePoint(g.coordinates)];\n  } else if (g.type === 'MultiPoint') {\n    return g.coordinates.map(makePoint);\n  } else if (g.type === 'LineString') {\n    return [makeLine(g.coordinates)];\n  } else if (g.type === 'MultiLineString') {\n    return g.coordinates.map(makeLine);\n  } else if (g.type === 'Polygon') {\n    return g.coordinates.map(makeLine);\n  } else if (g.type === 'MultiPolygon') {\n    return g.coordinates.map((p) => p.map(makeLine));\n  } else {\n    return [];\n  }\n};\n\nconst doesOverlayContainProperty = (overlay, property) => {\n  // Geojson may have 0 for the opacity when intention is to not specify the\n  // opacity. Therefore, we evaluate the truthiness of the propery where 0\n  // would return false.\n  return (\n    overlay.feature &&\n    overlay.feature.properties &&\n    overlay.feature.properties[property]\n  );\n};\n\nconst getRgbaFromHex = (hex, alpha = 1) => {\n  const [r, g, b] = hex.match(/\\w\\w/g).map((x) => parseInt(x, 16));\n  return `rgba(${r},${g},${b},${alpha})`;\n};\n\nconst getColor = (props, overlay, colorType, overrideColorProp) => {\n  if (props.hasOwnProperty(overrideColorProp)) {\n    return props[overrideColorProp];\n  }\n  if (doesOverlayContainProperty(overlay, colorType)) {\n    let color = overlay.feature.properties[colorType];\n    const opacityProperty = colorType + '-opacity';\n    if (\n      doesOverlayContainProperty(overlay, opacityProperty) &&\n      color[0] === '#'\n    ) {\n      color = getRgbaFromHex(\n        color,\n        overlay.feature.properties[opacityProperty]\n      );\n    }\n    return color;\n  }\n  return;\n};\n\nconst getStrokeWidth = (props, overlay) => {\n  if (props.hasOwnProperty('strokeWidth')) {\n    return props.strokeWidth;\n  }\n  if (doesOverlayContainProperty(overlay, 'stroke-width')) {\n    return overlay.feature.properties['stroke-width'];\n  }\n  return;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}