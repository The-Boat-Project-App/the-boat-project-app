{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _taggedTemplateLiteralLoose from\"@babel/runtime/helpers/taggedTemplateLiteralLoose\";var _templateObject,_templateObject2,_templateObject3,_templateObject4,_templateObject5,_templateObject6,_templateObject7,_templateObject8;function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}import{gql}from'@apollo/client';import*as ApolloReactHooks from'@apollo/client';var defaultOptions={};export var AddLikesDocument=gql(_templateObject||(_templateObject=_taggedTemplateLiteralLoose([\"\\n    mutation addLikes($id: String!) {\\n  addLikes(id: $id)\\n}\\n    \"])));export function useAddLikesMutation(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return ApolloReactHooks.useMutation(AddLikesDocument,options);}export var CreateNewPostDocument=gql(_templateObject2||(_templateObject2=_taggedTemplateLiteralLoose([\"\\n    mutation createNewPost($newPostsInput: PostsInput!) {\\n  createPosts(newPostsInput: $newPostsInput) {\\n    title\\n    intro\\n    content\\n    author\\n    mainPicture\\n    likes\\n    submitted\\n    validated\\n  }\\n}\\n    \"])));export function useCreateNewPostMutation(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return ApolloReactHooks.useMutation(CreateNewPostDocument,options);}export var GetAllNewsDocument=gql(_templateObject3||(_templateObject3=_taggedTemplateLiteralLoose([\"\\n    query getAllNews {\\n  NewsList {\\n    id\\n    title\\n    author\\n    content\\n    mainPicture\\n    createdAt\\n    isActive\\n  }\\n}\\n    \"])));export function useGetAllNewsQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return ApolloReactHooks.useQuery(GetAllNewsDocument,options);}export function useGetAllNewsLazyQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return ApolloReactHooks.useLazyQuery(GetAllNewsDocument,options);}export var GetAllPostsDocument=gql(_templateObject4||(_templateObject4=_taggedTemplateLiteralLoose([\"\\n    query getAllPosts {\\n  PostsList {\\n    id\\n    title\\n    author\\n    content\\n    mainPicture\\n    createdAt\\n    validated\\n    likes\\n    comments {\\n      author\\n      content\\n      date\\n    }\\n  }\\n}\\n    \"])));export function useGetAllPostsQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return ApolloReactHooks.useQuery(GetAllPostsDocument,options);}export function useGetAllPostsLazyQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return ApolloReactHooks.useLazyQuery(GetAllPostsDocument,options);}export var GetAllUsersDocument=gql(_templateObject5||(_templateObject5=_taggedTemplateLiteralLoose([\"\\n    query getAllUsers {\\n  usersList {\\n    id\\n    email\\n    firstName\\n    lastName\\n  }\\n}\\n    \"])));export function useGetAllUsersQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return ApolloReactHooks.useQuery(GetAllUsersDocument,options);}export function useGetAllUsersLazyQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return ApolloReactHooks.useLazyQuery(GetAllUsersDocument,options);}export var GetUserDataDocument=gql(_templateObject6||(_templateObject6=_taggedTemplateLiteralLoose([\"\\n    query getUserData {\\n  user {\\n    firstName\\n    lastName\\n  }\\n}\\n    \"])));export function useGetUserDataQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return ApolloReactHooks.useQuery(GetUserDataDocument,options);}export function useGetUserDataLazyQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return ApolloReactHooks.useLazyQuery(GetUserDataDocument,options);}export var LoginDocument=gql(_templateObject7||(_templateObject7=_taggedTemplateLiteralLoose([\"\\n    mutation Login($UsersLoginInput: UsersInput!) {\\n  loginUsers(UsersLoginInput: $UsersLoginInput) {\\n    accessToken\\n    refreshToken\\n    firstName\\n    lastName\\n    avatar\\n  }\\n}\\n    \"])));export function useLoginMutation(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return ApolloReactHooks.useMutation(LoginDocument,options);}export var RegisterDocument=gql(_templateObject8||(_templateObject8=_taggedTemplateLiteralLoose([\"\\n    mutation Register($newUsersInput: UsersInput!) {\\n  createUsers(newUsersInput: $newUsersInput) {\\n    accessToken\\n    refreshToken\\n    firstName\\n    lastName\\n    avatar\\n  }\\n}\\n    \"])));export function useRegisterMutation(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return ApolloReactHooks.useMutation(RegisterDocument,options);}","map":{"version":3,"names":["gql","ApolloReactHooks","defaultOptions","AddLikesDocument","useAddLikesMutation","baseOptions","options","useMutation","CreateNewPostDocument","useCreateNewPostMutation","GetAllNewsDocument","useGetAllNewsQuery","useQuery","useGetAllNewsLazyQuery","useLazyQuery","GetAllPostsDocument","useGetAllPostsQuery","useGetAllPostsLazyQuery","GetAllUsersDocument","useGetAllUsersQuery","useGetAllUsersLazyQuery","GetUserDataDocument","useGetUserDataQuery","useGetUserDataLazyQuery","LoginDocument","useLoginMutation","RegisterDocument","useRegisterMutation"],"sources":["/Users/matthieu/Documents/boatproject/mobile/graphql/graphql.tsx"],"sourcesContent":["import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nimport * as ApolloReactHooks from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type InputMaybe<T> = Maybe<T>;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\nconst defaultOptions = {} as const;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  DateTime: any;\n};\n\nexport type Comment = {\n  author: Scalars['String'];\n  content: Scalars['String'];\n  date: Scalars['DateTime'];\n};\n\nexport type CommentObject = {\n  __typename?: 'CommentObject';\n  author: Scalars['String'];\n  content: Scalars['String'];\n  date: Scalars['DateTime'];\n};\n\nexport type LoginResponse = {\n  __typename?: 'LoginResponse';\n  accessToken: Scalars['String'];\n  avatar: Scalars['String'];\n  firstName: Scalars['String'];\n  lastName: Scalars['String'];\n  refreshToken: Scalars['String'];\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  addLikes: Scalars['String'];\n  createNews: News;\n  createNotes: Notes;\n  createPosts: Posts;\n  createThemes: ThemeCreatedResponse;\n  createUsers: RegisterResponse;\n  deleteNews: Scalars['String'];\n  deleteNotes: Scalars['String'];\n  deletePosts: Scalars['String'];\n  deleteUsers: Scalars['String'];\n  loginUsers: LoginResponse;\n  revokeRefreshTokensForUser: Scalars['Boolean'];\n  updateNews: News;\n  updateNotes: Notes;\n  updatePosts: Posts;\n  updateUsers: Users;\n};\n\n\nexport type MutationAddLikesArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type MutationCreateNewsArgs = {\n  newNewsInput: NewsInput;\n};\n\n\nexport type MutationCreateNotesArgs = {\n  newNotesInput: NotesInput;\n};\n\n\nexport type MutationCreatePostsArgs = {\n  newPostsInput: PostsInput;\n};\n\n\nexport type MutationCreateThemesArgs = {\n  newThemesInput: ThemesInput;\n};\n\n\nexport type MutationCreateUsersArgs = {\n  newUsersInput: UsersInput;\n};\n\n\nexport type MutationDeleteNewsArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type MutationDeleteNotesArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type MutationDeletePostsArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type MutationDeleteUsersArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type MutationLoginUsersArgs = {\n  UsersLoginInput: UsersInput;\n};\n\n\nexport type MutationRevokeRefreshTokensForUserArgs = {\n  userId: Scalars['String'];\n};\n\n\nexport type MutationUpdateNewsArgs = {\n  editNewsInput: NewsInput;\n};\n\n\nexport type MutationUpdateNotesArgs = {\n  editNotesInput: NotesInput;\n};\n\n\nexport type MutationUpdatePostsArgs = {\n  editPostsInput: PostsInput;\n};\n\n\nexport type MutationUpdateUsersArgs = {\n  editUsersInput: UsersInput;\n};\n\n/** The News Model */\nexport type News = {\n  __typename?: 'News';\n  author: Scalars['String'];\n  content?: Maybe<Scalars['String']>;\n  createdAt: Scalars['DateTime'];\n  id: Scalars['ID'];\n  isActive?: Maybe<Scalars['Boolean']>;\n  mainPicture?: Maybe<Scalars['String']>;\n  title: Scalars['String'];\n};\n\nexport type NewsInput = {\n  author: Scalars['String'];\n  content?: InputMaybe<Scalars['String']>;\n  createdAt?: InputMaybe<Scalars['DateTime']>;\n  id?: InputMaybe<Scalars['ID']>;\n  isActive?: InputMaybe<Scalars['Boolean']>;\n  mainPicture?: InputMaybe<Scalars['String']>;\n  title: Scalars['String'];\n};\n\n/** The Notes Model */\nexport type Notes = {\n  __typename?: 'Notes';\n  backgroundColor?: Maybe<Scalars['String']>;\n  createdAt: Scalars['DateTime'];\n  description: Scalars['String'];\n  id: Scalars['ID'];\n  isArchived?: Maybe<Scalars['Boolean']>;\n  title: Scalars['String'];\n  updatedAt: Scalars['DateTime'];\n};\n\nexport type NotesInput = {\n  backgroundColor?: InputMaybe<Scalars['String']>;\n  description: Scalars['String'];\n  id?: InputMaybe<Scalars['ID']>;\n  isArchived?: InputMaybe<Scalars['Boolean']>;\n  title: Scalars['String'];\n};\n\n/** The Posts Model */\nexport type Posts = {\n  __typename?: 'Posts';\n  author: Scalars['String'];\n  comments: Array<CommentObject>;\n  content?: Maybe<Scalars['String']>;\n  createdAt: Scalars['DateTime'];\n  id: Scalars['ID'];\n  intro: Scalars['String'];\n  likes?: Maybe<Scalars['Float']>;\n  mainPicture?: Maybe<Scalars['String']>;\n  submitted?: Maybe<Scalars['Boolean']>;\n  title: Scalars['String'];\n  validated?: Maybe<Scalars['String']>;\n};\n\nexport type PostsInput = {\n  author: Scalars['String'];\n  comments?: InputMaybe<Array<Comment>>;\n  content?: InputMaybe<Scalars['String']>;\n  createdAt?: InputMaybe<Scalars['DateTime']>;\n  id?: InputMaybe<Scalars['ID']>;\n  intro: Scalars['String'];\n  likes?: InputMaybe<Scalars['Float']>;\n  mainPicture?: InputMaybe<Scalars['String']>;\n  submitted?: InputMaybe<Scalars['Boolean']>;\n  title: Scalars['String'];\n  validated?: InputMaybe<Scalars['String']>;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  News: News;\n  /** Get List of News */\n  NewsList: Array<News>;\n  Posts: Posts;\n  /** Get List of Posts */\n  PostsList: Array<Posts>;\n  notes: Notes;\n  /** Get List of Notes */\n  notesList: Array<Notes>;\n  user: Users;\n  users: Users;\n  /** Get List of Users */\n  usersList: Array<Users>;\n};\n\n\nexport type QueryNewsArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type QueryPostsArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type QueryNotesArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type QueryUsersArgs = {\n  id: Scalars['String'];\n};\n\nexport type RegisterResponse = {\n  __typename?: 'RegisterResponse';\n  accessToken: Scalars['String'];\n  avatar: Scalars['String'];\n  firstName: Scalars['String'];\n  lastName: Scalars['String'];\n  refreshToken: Scalars['String'];\n};\n\nexport type Subscription = {\n  __typename?: 'Subscription';\n  likeAdded: Posts;\n};\n\nexport type ThemeCreatedResponse = {\n  __typename?: 'ThemeCreatedResponse';\n  desc: Scalars['String'];\n  id: Scalars['String'];\n  intro: Scalars['String'];\n  name: Scalars['String'];\n};\n\nexport type ThemesInput = {\n  desc?: InputMaybe<Scalars['String']>;\n  id?: InputMaybe<Scalars['ID']>;\n  intro?: InputMaybe<Scalars['String']>;\n  name?: InputMaybe<Scalars['String']>;\n};\n\n/** The Users Model */\nexport type Users = {\n  __typename?: 'Users';\n  active?: Maybe<Scalars['Boolean']>;\n  app_lang?: Maybe<Scalars['String']>;\n  audio?: Maybe<Scalars['String']>;\n  avatar?: Maybe<Scalars['String']>;\n  bio?: Maybe<Scalars['String']>;\n  country?: Maybe<Scalars['String']>;\n  createdAt: Scalars['DateTime'];\n  email?: Maybe<Scalars['String']>;\n  firstName: Scalars['String'];\n  id: Scalars['ID'];\n  lang?: Maybe<Scalars['String']>;\n  lastLogin: Scalars['DateTime'];\n  lastName: Scalars['String'];\n  password?: Maybe<Scalars['String']>;\n  status?: Maybe<Scalars['String']>;\n  tokenVersion: Scalars['Float'];\n  updatedAt: Scalars['DateTime'];\n};\n\nexport type UsersInput = {\n  active?: InputMaybe<Scalars['Boolean']>;\n  appLang?: InputMaybe<Scalars['String']>;\n  audio?: InputMaybe<Scalars['String']>;\n  avatar?: InputMaybe<Scalars['String']>;\n  bio?: InputMaybe<Scalars['String']>;\n  country?: InputMaybe<Scalars['String']>;\n  createdAt?: InputMaybe<Scalars['DateTime']>;\n  email?: InputMaybe<Scalars['String']>;\n  firstName?: InputMaybe<Scalars['String']>;\n  id?: InputMaybe<Scalars['ID']>;\n  lang?: InputMaybe<Scalars['String']>;\n  lastLogin?: InputMaybe<Scalars['DateTime']>;\n  lastName?: InputMaybe<Scalars['String']>;\n  password?: InputMaybe<Scalars['String']>;\n  status?: InputMaybe<Scalars['String']>;\n  updatedAt?: InputMaybe<Scalars['DateTime']>;\n};\n\nexport type AddLikesMutationVariables = Exact<{\n  id: Scalars['String'];\n}>;\n\n\nexport type AddLikesMutation = { __typename?: 'Mutation', addLikes: string };\n\nexport type CreateNewPostMutationVariables = Exact<{\n  newPostsInput: PostsInput;\n}>;\n\n\nexport type CreateNewPostMutation = { __typename?: 'Mutation', createPosts: { __typename?: 'Posts', title: string, intro: string, content?: string | null, author: string, mainPicture?: string | null, likes?: number | null, submitted?: boolean | null, validated?: string | null } };\n\nexport type GetAllNewsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetAllNewsQuery = { __typename?: 'Query', NewsList: Array<{ __typename?: 'News', id: string, title: string, author: string, content?: string | null, mainPicture?: string | null, createdAt: any, isActive?: boolean | null }> };\n\nexport type GetAllPostsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetAllPostsQuery = { __typename?: 'Query', PostsList: Array<{ __typename?: 'Posts', id: string, title: string, author: string, content?: string | null, mainPicture?: string | null, createdAt: any, validated?: string | null, likes?: number | null, comments: Array<{ __typename?: 'CommentObject', author: string, content: string, date: any }> }> };\n\nexport type GetAllUsersQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetAllUsersQuery = { __typename?: 'Query', usersList: Array<{ __typename?: 'Users', id: string, email?: string | null, firstName: string, lastName: string }> };\n\nexport type GetUserDataQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetUserDataQuery = { __typename?: 'Query', user: { __typename?: 'Users', firstName: string, lastName: string } };\n\nexport type LoginMutationVariables = Exact<{\n  UsersLoginInput: UsersInput;\n}>;\n\n\nexport type LoginMutation = { __typename?: 'Mutation', loginUsers: { __typename?: 'LoginResponse', accessToken: string, refreshToken: string, firstName: string, lastName: string, avatar: string } };\n\nexport type RegisterMutationVariables = Exact<{\n  newUsersInput: UsersInput;\n}>;\n\n\nexport type RegisterMutation = { __typename?: 'Mutation', createUsers: { __typename?: 'RegisterResponse', accessToken: string, refreshToken: string, firstName: string, lastName: string, avatar: string } };\n\n\nexport const AddLikesDocument = gql`\n    mutation addLikes($id: String!) {\n  addLikes(id: $id)\n}\n    `;\nexport type AddLikesMutationFn = Apollo.MutationFunction<AddLikesMutation, AddLikesMutationVariables>;\n\n/**\n * __useAddLikesMutation__\n *\n * To run a mutation, you first call `useAddLikesMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddLikesMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addLikesMutation, { data, loading, error }] = useAddLikesMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useAddLikesMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<AddLikesMutation, AddLikesMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return ApolloReactHooks.useMutation<AddLikesMutation, AddLikesMutationVariables>(AddLikesDocument, options);\n      }\nexport type AddLikesMutationHookResult = ReturnType<typeof useAddLikesMutation>;\nexport type AddLikesMutationResult = Apollo.MutationResult<AddLikesMutation>;\nexport type AddLikesMutationOptions = Apollo.BaseMutationOptions<AddLikesMutation, AddLikesMutationVariables>;\nexport const CreateNewPostDocument = gql`\n    mutation createNewPost($newPostsInput: PostsInput!) {\n  createPosts(newPostsInput: $newPostsInput) {\n    title\n    intro\n    content\n    author\n    mainPicture\n    likes\n    submitted\n    validated\n  }\n}\n    `;\nexport type CreateNewPostMutationFn = Apollo.MutationFunction<CreateNewPostMutation, CreateNewPostMutationVariables>;\n\n/**\n * __useCreateNewPostMutation__\n *\n * To run a mutation, you first call `useCreateNewPostMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateNewPostMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createNewPostMutation, { data, loading, error }] = useCreateNewPostMutation({\n *   variables: {\n *      newPostsInput: // value for 'newPostsInput'\n *   },\n * });\n */\nexport function useCreateNewPostMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CreateNewPostMutation, CreateNewPostMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return ApolloReactHooks.useMutation<CreateNewPostMutation, CreateNewPostMutationVariables>(CreateNewPostDocument, options);\n      }\nexport type CreateNewPostMutationHookResult = ReturnType<typeof useCreateNewPostMutation>;\nexport type CreateNewPostMutationResult = Apollo.MutationResult<CreateNewPostMutation>;\nexport type CreateNewPostMutationOptions = Apollo.BaseMutationOptions<CreateNewPostMutation, CreateNewPostMutationVariables>;\nexport const GetAllNewsDocument = gql`\n    query getAllNews {\n  NewsList {\n    id\n    title\n    author\n    content\n    mainPicture\n    createdAt\n    isActive\n  }\n}\n    `;\n\n/**\n * __useGetAllNewsQuery__\n *\n * To run a query within a React component, call `useGetAllNewsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetAllNewsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetAllNewsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetAllNewsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetAllNewsQuery, GetAllNewsQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return ApolloReactHooks.useQuery<GetAllNewsQuery, GetAllNewsQueryVariables>(GetAllNewsDocument, options);\n      }\nexport function useGetAllNewsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetAllNewsQuery, GetAllNewsQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return ApolloReactHooks.useLazyQuery<GetAllNewsQuery, GetAllNewsQueryVariables>(GetAllNewsDocument, options);\n        }\nexport type GetAllNewsQueryHookResult = ReturnType<typeof useGetAllNewsQuery>;\nexport type GetAllNewsLazyQueryHookResult = ReturnType<typeof useGetAllNewsLazyQuery>;\nexport type GetAllNewsQueryResult = Apollo.QueryResult<GetAllNewsQuery, GetAllNewsQueryVariables>;\nexport const GetAllPostsDocument = gql`\n    query getAllPosts {\n  PostsList {\n    id\n    title\n    author\n    content\n    mainPicture\n    createdAt\n    validated\n    likes\n    comments {\n      author\n      content\n      date\n    }\n  }\n}\n    `;\n\n/**\n * __useGetAllPostsQuery__\n *\n * To run a query within a React component, call `useGetAllPostsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetAllPostsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetAllPostsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetAllPostsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetAllPostsQuery, GetAllPostsQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return ApolloReactHooks.useQuery<GetAllPostsQuery, GetAllPostsQueryVariables>(GetAllPostsDocument, options);\n      }\nexport function useGetAllPostsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetAllPostsQuery, GetAllPostsQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return ApolloReactHooks.useLazyQuery<GetAllPostsQuery, GetAllPostsQueryVariables>(GetAllPostsDocument, options);\n        }\nexport type GetAllPostsQueryHookResult = ReturnType<typeof useGetAllPostsQuery>;\nexport type GetAllPostsLazyQueryHookResult = ReturnType<typeof useGetAllPostsLazyQuery>;\nexport type GetAllPostsQueryResult = Apollo.QueryResult<GetAllPostsQuery, GetAllPostsQueryVariables>;\nexport const GetAllUsersDocument = gql`\n    query getAllUsers {\n  usersList {\n    id\n    email\n    firstName\n    lastName\n  }\n}\n    `;\n\n/**\n * __useGetAllUsersQuery__\n *\n * To run a query within a React component, call `useGetAllUsersQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetAllUsersQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetAllUsersQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetAllUsersQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetAllUsersQuery, GetAllUsersQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return ApolloReactHooks.useQuery<GetAllUsersQuery, GetAllUsersQueryVariables>(GetAllUsersDocument, options);\n      }\nexport function useGetAllUsersLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetAllUsersQuery, GetAllUsersQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return ApolloReactHooks.useLazyQuery<GetAllUsersQuery, GetAllUsersQueryVariables>(GetAllUsersDocument, options);\n        }\nexport type GetAllUsersQueryHookResult = ReturnType<typeof useGetAllUsersQuery>;\nexport type GetAllUsersLazyQueryHookResult = ReturnType<typeof useGetAllUsersLazyQuery>;\nexport type GetAllUsersQueryResult = Apollo.QueryResult<GetAllUsersQuery, GetAllUsersQueryVariables>;\nexport const GetUserDataDocument = gql`\n    query getUserData {\n  user {\n    firstName\n    lastName\n  }\n}\n    `;\n\n/**\n * __useGetUserDataQuery__\n *\n * To run a query within a React component, call `useGetUserDataQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetUserDataQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetUserDataQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetUserDataQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetUserDataQuery, GetUserDataQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return ApolloReactHooks.useQuery<GetUserDataQuery, GetUserDataQueryVariables>(GetUserDataDocument, options);\n      }\nexport function useGetUserDataLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetUserDataQuery, GetUserDataQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return ApolloReactHooks.useLazyQuery<GetUserDataQuery, GetUserDataQueryVariables>(GetUserDataDocument, options);\n        }\nexport type GetUserDataQueryHookResult = ReturnType<typeof useGetUserDataQuery>;\nexport type GetUserDataLazyQueryHookResult = ReturnType<typeof useGetUserDataLazyQuery>;\nexport type GetUserDataQueryResult = Apollo.QueryResult<GetUserDataQuery, GetUserDataQueryVariables>;\nexport const LoginDocument = gql`\n    mutation Login($UsersLoginInput: UsersInput!) {\n  loginUsers(UsersLoginInput: $UsersLoginInput) {\n    accessToken\n    refreshToken\n    firstName\n    lastName\n    avatar\n  }\n}\n    `;\nexport type LoginMutationFn = Apollo.MutationFunction<LoginMutation, LoginMutationVariables>;\n\n/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      UsersLoginInput: // value for 'UsersLoginInput'\n *   },\n * });\n */\nexport function useLoginMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<LoginMutation, LoginMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return ApolloReactHooks.useMutation<LoginMutation, LoginMutationVariables>(LoginDocument, options);\n      }\nexport type LoginMutationHookResult = ReturnType<typeof useLoginMutation>;\nexport type LoginMutationResult = Apollo.MutationResult<LoginMutation>;\nexport type LoginMutationOptions = Apollo.BaseMutationOptions<LoginMutation, LoginMutationVariables>;\nexport const RegisterDocument = gql`\n    mutation Register($newUsersInput: UsersInput!) {\n  createUsers(newUsersInput: $newUsersInput) {\n    accessToken\n    refreshToken\n    firstName\n    lastName\n    avatar\n  }\n}\n    `;\nexport type RegisterMutationFn = Apollo.MutationFunction<RegisterMutation, RegisterMutationVariables>;\n\n/**\n * __useRegisterMutation__\n *\n * To run a mutation, you first call `useRegisterMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRegisterMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [registerMutation, { data, loading, error }] = useRegisterMutation({\n *   variables: {\n *      newUsersInput: // value for 'newUsersInput'\n *   },\n * });\n */\nexport function useRegisterMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<RegisterMutation, RegisterMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return ApolloReactHooks.useMutation<RegisterMutation, RegisterMutationVariables>(RegisterDocument, options);\n      }\nexport type RegisterMutationHookResult = ReturnType<typeof useRegisterMutation>;\nexport type RegisterMutationResult = Apollo.MutationResult<RegisterMutation>;\nexport type RegisterMutationOptions = Apollo.BaseMutationOptions<RegisterMutation, RegisterMutationVariables>;"],"mappings":"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"},"metadata":{},"sourceType":"module"}