{"ast":null,"code":"import*as React from'react';import useNavigation from\"./useNavigation\";export default function useFocusEffect(effect){var navigation=useNavigation();if(arguments[1]!==undefined){var message=\"You passed a second argument to 'useFocusEffect', but it only accepts one argument. \"+\"If you want to pass a dependency array, you can use 'React.useCallback':\\n\\n\"+'useFocusEffect(\\n'+'  React.useCallback(() => {\\n'+'    // Your code here\\n'+'  }, [depA, depB])\\n'+');\\n\\n'+'See usage guide: https://reactnavigation.org/docs/use-focus-effect';console.error(message);}React.useEffect(function(){var isFocused=false;var cleanup;var callback=function callback(){var destroy=effect();if(destroy===undefined||typeof destroy==='function'){return destroy;}if(\"production\"!=='production'){var _message='An effect function must not return anything besides a function, which is used for clean-up.';if(destroy===null){_message+=\" You returned 'null'. If your effect does not require clean-up, return 'undefined' (or nothing).\";}else if(typeof destroy.then==='function'){_message+=\"\\n\\nIt looks like you wrote 'useFocusEffect(async () => ...)' or returned a Promise. \"+'Instead, write the async function inside your effect '+'and call it immediately:\\n\\n'+'useFocusEffect(\\n'+'  React.useCallback(() => {\\n'+'    async function fetchData() {\\n'+'      // You can await here\\n'+'      const response = await MyAPI.getData(someId);\\n'+'      // ...\\n'+'    }\\n\\n'+'    fetchData();\\n'+'  }, [someId])\\n'+');\\n\\n'+'See usage guide: https://reactnavigation.org/docs/use-focus-effect';}else{_message+=\" You returned '\"+JSON.stringify(destroy)+\"'.\";}console.error(_message);}};if(navigation.isFocused()){cleanup=callback();isFocused=true;}var unsubscribeFocus=navigation.addListener('focus',function(){if(isFocused){return;}if(cleanup!==undefined){cleanup();}cleanup=callback();isFocused=true;});var unsubscribeBlur=navigation.addListener('blur',function(){if(cleanup!==undefined){cleanup();}cleanup=undefined;isFocused=false;});return function(){if(cleanup!==undefined){cleanup();}unsubscribeFocus();unsubscribeBlur();};},[effect,navigation]);}","map":{"version":3,"mappings":"AAAA,MAAO,GAAKA,MAAZ,KAAuB,OAAvB,CAEA,MAAOC,cAAP,uBAWA,cAAe,SAASC,eAAT,CAAwBC,MAAxB,CAAgD,CAC7D,GAAMC,WAAU,CAAGH,aAAa,EAAhC,CAEA,GAAII,SAAS,CAAC,CAAD,CAATA,GAAiBC,SAArB,CAAgC,CAC9B,GAAMC,QAAO,CACX,uFACA,8EADA,CAEA,mBAFA,CAGA,+BAHA,CAIA,yBAJA,CAKA,sBALA,CAMA,QANA,CAOA,oEARF,CAUAC,OAAO,CAACC,KAARD,CAAcD,OAAdC,EACD,CAEDR,KAAK,CAACU,SAANV,CAAgB,UAAM,CACpB,GAAIW,UAAS,CAAG,KAAhB,CACA,GAAIC,QAAJ,CAEA,GAAMC,SAAQ,CAAG,QAAXA,SAAW,EAAM,CACrB,GAAMC,QAAO,CAAGX,MAAM,EAAtB,CAEA,GAAIW,OAAO,GAAKR,SAAZQ,EAAyB,MAAOA,QAAP,GAAmB,UAAhD,CAA4D,CAC1D,MAAOA,QAAP,CACD,CAED,GAAIC,eAAyB,YAA7B,CAA2C,CACzC,GAAIR,SAAO,CACT,6FADF,CAGA,GAAIO,OAAO,GAAK,IAAhB,CAAsB,CACpBP,QAAO,EACL,kGADFA,CADF,KAGO,IAAI,MAAQO,QAAD,CAAiBE,IAAxB,GAAiC,UAArC,CAAiD,CACtDT,QAAO,EACL,wFACA,uDADA,CAEA,8BAFA,CAGA,mBAHA,CAIA,+BAJA,CAKA,oCALA,CAMA,+BANA,CAOA,uDAPA,CAQA,gBARA,CASA,WATA,CAUA,oBAVA,CAWA,kBAXA,CAYA,QAZA,CAaA,oEAdFA,CADK,KAgBA,CACLA,QAAO,oBAAsBU,IAAI,CAACC,SAALD,CAAeH,OAAfG,CAAtB,KAAPV,CACD,CAEDC,OAAO,CAACC,KAARD,CAAcD,QAAdC,EACD,CAnCH,EAuCA,GAAIJ,UAAU,CAACO,SAAXP,EAAJ,CAA4B,CAC1BQ,OAAO,CAAGC,QAAQ,EAAlBD,CACAD,SAAS,CAAG,IAAZA,CACD,CAED,GAAMQ,iBAAgB,CAAGf,UAAU,CAACgB,WAAXhB,CAAuB,OAAvBA,CAAgC,UAAM,CAG7D,GAAIO,SAAJ,CAAe,CACb,OACD,CAED,GAAIC,OAAO,GAAKN,SAAhB,CAA2B,CACzBM,OAAO,GACR,CAEDA,OAAO,CAAGC,QAAQ,EAAlBD,CACAD,SAAS,CAAG,IAAZA,CAZuB,EAAzB,CAeA,GAAMU,gBAAe,CAAGjB,UAAU,CAACgB,WAAXhB,CAAuB,MAAvBA,CAA+B,UAAM,CAC3D,GAAIQ,OAAO,GAAKN,SAAhB,CAA2B,CACzBM,OAAO,GACR,CAEDA,OAAO,CAAGN,SAAVM,CACAD,SAAS,CAAG,KAAZA,CANsB,EAAxB,CASA,MAAO,WAAM,CACX,GAAIC,OAAO,GAAKN,SAAhB,CAA2B,CACzBM,OAAO,GACR,CAEDO,gBAAgB,GAChBE,eAAe,GANjB,EAxEF,EAgFG,CAAClB,MAAD,CAASC,UAAT,CAhFHJ,EAiFD","names":["React","useNavigation","useFocusEffect","effect","navigation","arguments","undefined","message","console","error","useEffect","isFocused","cleanup","callback","destroy","process","then","JSON","stringify","unsubscribeFocus","addListener","unsubscribeBlur"],"sources":["useFocusEffect.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport useNavigation from './useNavigation';\n\ntype EffectCallback = () => undefined | void | (() => void);\n\n/**\n * Hook to run an effect in a focused screen, similar to `React.useEffect`.\n * This can be used to perform side-effects such as fetching data or subscribing to events.\n * The passed callback should be wrapped in `React.useCallback` to avoid running the effect too often.\n *\n * @param callback Memoized callback containing the effect, should optionally return a cleanup function.\n */\nexport default function useFocusEffect(effect: EffectCallback) {\n  const navigation = useNavigation();\n\n  if (arguments[1] !== undefined) {\n    const message =\n      \"You passed a second argument to 'useFocusEffect', but it only accepts one argument. \" +\n      \"If you want to pass a dependency array, you can use 'React.useCallback':\\n\\n\" +\n      'useFocusEffect(\\n' +\n      '  React.useCallback(() => {\\n' +\n      '    // Your code here\\n' +\n      '  }, [depA, depB])\\n' +\n      ');\\n\\n' +\n      'See usage guide: https://reactnavigation.org/docs/use-focus-effect';\n\n    console.error(message);\n  }\n\n  React.useEffect(() => {\n    let isFocused = false;\n    let cleanup: undefined | void | (() => void);\n\n    const callback = () => {\n      const destroy = effect();\n\n      if (destroy === undefined || typeof destroy === 'function') {\n        return destroy;\n      }\n\n      if (process.env.NODE_ENV !== 'production') {\n        let message =\n          'An effect function must not return anything besides a function, which is used for clean-up.';\n\n        if (destroy === null) {\n          message +=\n            \" You returned 'null'. If your effect does not require clean-up, return 'undefined' (or nothing).\";\n        } else if (typeof (destroy as any).then === 'function') {\n          message +=\n            \"\\n\\nIt looks like you wrote 'useFocusEffect(async () => ...)' or returned a Promise. \" +\n            'Instead, write the async function inside your effect ' +\n            'and call it immediately:\\n\\n' +\n            'useFocusEffect(\\n' +\n            '  React.useCallback(() => {\\n' +\n            '    async function fetchData() {\\n' +\n            '      // You can await here\\n' +\n            '      const response = await MyAPI.getData(someId);\\n' +\n            '      // ...\\n' +\n            '    }\\n\\n' +\n            '    fetchData();\\n' +\n            '  }, [someId])\\n' +\n            ');\\n\\n' +\n            'See usage guide: https://reactnavigation.org/docs/use-focus-effect';\n        } else {\n          message += ` You returned '${JSON.stringify(destroy)}'.`;\n        }\n\n        console.error(message);\n      }\n    };\n\n    // We need to run the effect on intial render/dep changes if the screen is focused\n    if (navigation.isFocused()) {\n      cleanup = callback();\n      isFocused = true;\n    }\n\n    const unsubscribeFocus = navigation.addListener('focus', () => {\n      // If callback was already called for focus, avoid calling it again\n      // The focus event may also fire on intial render, so we guard against runing the effect twice\n      if (isFocused) {\n        return;\n      }\n\n      if (cleanup !== undefined) {\n        cleanup();\n      }\n\n      cleanup = callback();\n      isFocused = true;\n    });\n\n    const unsubscribeBlur = navigation.addListener('blur', () => {\n      if (cleanup !== undefined) {\n        cleanup();\n      }\n\n      cleanup = undefined;\n      isFocused = false;\n    });\n\n    return () => {\n      if (cleanup !== undefined) {\n        cleanup();\n      }\n\n      unsubscribeFocus();\n      unsubscribeBlur();\n    };\n  }, [effect, navigation]);\n}\n"]},"metadata":{},"sourceType":"module"}