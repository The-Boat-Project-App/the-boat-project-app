{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"isDisabled\",\"onPress\",\"onPressStart\",\"onPressEnd\",\"onPressUp\",\"onPressChange\",\"isPressed\"];import React from'react';import{mergeProps}from'@react-aria/utils';export function usePress(_ref){var isDisabled=_ref.isDisabled,_onPress=_ref.onPress,onPressStart=_ref.onPressStart,onPressEnd=_ref.onPressEnd,onPressUp=_ref.onPressUp,onPressChange=_ref.onPressChange,isPressedProp=_ref.isPressed,restProps=_objectWithoutProperties(_ref,_excluded);var _React$useState=React.useState(false),_React$useState2=_slicedToArray(_React$useState,2),isPressed=_React$useState2[0],setPressed=_React$useState2[1];var pressProps={onPress:function onPress(e){if(isDisabled)return;_onPress&&_onPress(e);},onPressIn:function onPressIn(e){if(isDisabled)return;onPressStart&&onPressStart(e);setPressed(true);onPressChange&&onPressChange(true);},onPressOut:function onPressOut(e){if(isDisabled)return;onPressEnd&&onPressEnd(e);setPressed(false);onPressChange&&onPressChange(false);onPressUp&&onPressUp(e);}};pressProps=mergeProps(pressProps,restProps);return{isPressed:isPressedProp||isPressed,pressProps:pressProps};}","map":{"version":3,"mappings":"iQAAA,MAAOA,MAAP,KAAiC,OAAjC,CACA,OAASC,UAAT,KAA2B,mBAA3B,CA0CA,MAAO,SAASC,SAAT,MASyB,IAR9BC,WAQ8B,MAR9BA,UAQ8B,CAP9BC,QAO8B,MAP9BA,OAO8B,CAN9BC,YAM8B,MAN9BA,YAM8B,CAL9BC,UAK8B,MAL9BA,UAK8B,CAJ9BC,SAI8B,MAJ9BA,SAI8B,CAH9BC,aAG8B,MAH9BA,aAG8B,CAFnBC,aAEmB,MAF9BC,SAE8B,CAD3BC,SAC2B,0CAC9B,oBAA8BX,KAAK,CAACY,QAANZ,CAAe,KAAfA,CAA9B,oDAAKU,SAAL,qBAAgBG,UAAhB,qBAEA,GAAIC,WAAU,CAAG,CACfV,OAAO,CAAGW,kBAAD,CAAY,CACnB,GAAIZ,UAAJ,CAAgB,OAChBC,QAAO,EAAIA,QAAO,CAACW,CAAD,CAAlBX,CAHa,EAKfY,SAAS,CAAGD,oBAAD,CAAY,CACrB,GAAIZ,UAAJ,CAAgB,OAChBE,YAAY,EAAIA,YAAY,CAACU,CAAD,CAA5BV,CACAQ,UAAU,CAAC,IAAD,CAAVA,CACAL,aAAa,EAAIA,aAAa,CAAC,IAAD,CAA9BA,CATa,EAWfS,UAAU,CAAGF,qBAAD,CAAY,CACtB,GAAIZ,UAAJ,CAAgB,OAChBG,UAAU,EAAIA,UAAU,CAACS,CAAD,CAAxBT,CACAO,UAAU,CAAC,KAAD,CAAVA,CACAL,aAAa,EAAIA,aAAa,CAAC,KAAD,CAA9BA,CACAD,SAAS,EAAIA,SAAS,CAACQ,CAAD,CAAtBR,CACD,CAjBc,CAAjB,CAoBAO,UAAU,CAAGb,UAAU,CAACa,UAAD,CAAaH,SAAb,CAAvBG,CAEA,MAAO,CACLJ,SAAS,CAAED,aAAa,EAAIC,SADvB,CAELI,qBAFK,CAAP,CAID","names":["React","mergeProps","usePress","isDisabled","onPress","onPressStart","onPressEnd","onPressUp","onPressChange","isPressedProp","isPressed","restProps","useState","setPressed","pressProps","e","onPressIn","onPressOut"],"sources":["usePress.ts"],"sourcesContent":["import React, { RefObject } from 'react';\nimport { mergeProps } from '@react-aria/utils';\n\nexport interface PressEvents {\n  /** Handler that is called when the press is released over the target. */\n  onPress?: (e: any) => void;\n  /** Handler that is called when a press interaction starts. */\n  onPressStart?: (e: any) => void;\n  /**\n   * Handler that is called when a press interaction ends, either\n   * over the target or when the pointer leaves the target.\n   */\n  onPressEnd?: (e: any) => void;\n  /** Handler that is called when the press state changes. */\n  onPressChange?: (isPressed: boolean) => void;\n  /**\n   * Handler that is called when a press is released over the target, regardless of\n   * whether it started on the target or not.\n   */\n  onPressUp?: (e: any) => void;\n}\n\nexport interface PressProps extends PressEvents {\n  /** Whether the target is in a controlled press state (e.g. an overlay it triggers is open). */\n  isPressed?: boolean;\n  /** Whether the press events should be disabled. */\n  isDisabled?: boolean;\n  /** Whether the target should not receive focus on press. */\n  preventFocusOnPress?: boolean;\n}\n\nexport interface PressHookProps extends PressProps {\n  /** A ref to the target element. */\n  ref?: RefObject<any>;\n}\n\nexport type PressResult = {\n  /** Whether the target is currently pressed. */\n  isPressed: boolean;\n  /** Props to spread on the target element. */\n  pressProps: any;\n};\n\nexport function usePress({\n  isDisabled,\n  onPress,\n  onPressStart,\n  onPressEnd,\n  onPressUp, // No onPressUp on RN.\n  onPressChange,\n  isPressed: isPressedProp,\n  ...restProps\n}: PressHookProps): PressResult {\n  let [isPressed, setPressed] = React.useState(false);\n\n  let pressProps = {\n    onPress: (e: any) => {\n      if (isDisabled) return;\n      onPress && onPress(e);\n    },\n    onPressIn: (e: any) => {\n      if (isDisabled) return;\n      onPressStart && onPressStart(e);\n      setPressed(true);\n      onPressChange && onPressChange(true);\n    },\n    onPressOut: (e: any) => {\n      if (isDisabled) return;\n      onPressEnd && onPressEnd(e);\n      setPressed(false);\n      onPressChange && onPressChange(false);\n      onPressUp && onPressUp(e);\n    },\n  };\n\n  pressProps = mergeProps(pressProps, restProps);\n\n  return {\n    isPressed: isPressedProp || isPressed,\n    pressProps,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}