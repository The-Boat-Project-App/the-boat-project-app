{"ast":null,"code":"import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"_icon\",\"onPressIn\",\"onPressOut\",\"onHoverIn\",\"onHoverOut\",\"onFocus\",\"onBlur\"];function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import React,{memo,forwardRef}from'react';import{ModalContext}from\"./Context\";import{usePropsResolution}from\"../../../hooks\";import{Pressable}from\"../../primitives/Pressable\";import{CloseIcon}from\"../../primitives/Icon/Icons\";import{useHasResponsiveProps}from\"../../../hooks/useHasResponsiveProps\";import{useHover,useFocus,useIsPressed}from\"../../primitives/Pressable/Pressable\";import{composeEventHandlers}from\"../../../utils\";import{useFocusRing}from'@react-native-aria/focus';var ModalCloseButton=function ModalCloseButton(props,ref){var _useHover=useHover(),hoverProps=_useHover.hoverProps,isHovered=_useHover.isHovered;var _useIsPressed=useIsPressed(),pressableProps=_useIsPressed.pressableProps,isPressed=_useIsPressed.isPressed;var _useFocus=useFocus(),focusProps=_useFocus.focusProps,isFocused=_useFocus.isFocused;var _useFocusRing=useFocusRing(),isFocusVisible=_useFocusRing.isFocusVisible,focusRingProps=_useFocusRing.focusProps;var _usePropsResolution=usePropsResolution('ModalCloseButton',props,{isHovered:isHovered,isPressed:isPressed,isFocused:isFocused,isFocusVisible:isFocusVisible}),_icon=_usePropsResolution._icon,onPressIn=_usePropsResolution.onPressIn,onPressOut=_usePropsResolution.onPressOut,onHoverIn=_usePropsResolution.onHoverIn,onHoverOut=_usePropsResolution.onHoverOut,onFocus=_usePropsResolution.onFocus,onBlur=_usePropsResolution.onBlur,resolvedProps=_objectWithoutProperties(_usePropsResolution,_excluded);var _React$useContext=React.useContext(ModalContext),handleClose=_React$useContext.handleClose;if(useHasResponsiveProps(props)){return null;}return React.createElement(Pressable,_extends({accessibilityRole:\"button\",ref:ref,onPressIn:composeEventHandlers(onPressIn,pressableProps.onPressIn),onPressOut:composeEventHandlers(onPressOut,pressableProps.onPressOut),onHoverIn:composeEventHandlers(onHoverIn,hoverProps.onHoverIn),onHoverOut:composeEventHandlers(onHoverOut,hoverProps.onHoverOut),onFocus:composeEventHandlers(composeEventHandlers(onFocus,focusProps.onFocus),focusRingProps.onFocus),onBlur:composeEventHandlers(composeEventHandlers(onBlur,focusProps.onBlur),focusRingProps.onBlur),onPress:handleClose},resolvedProps),React.createElement(CloseIcon,_icon));};export default memo(forwardRef(ModalCloseButton));","map":{"version":3,"mappings":"ycAAA,MAAOA,MAAP,EAAgBC,IAAhB,CAAsBC,UAAtB,KAAwC,OAAxC,CACA,OAASC,YAAT,iBACA,OAASC,kBAAT,sBACA,OAASC,SAAT,kCACA,OAASC,SAAT,mCAEA,OAASC,qBAAT,4CACA,OACEC,QADF,CAEEC,QAFF,CAGEC,YAHF,4CAKA,OAASC,oBAAT,sBACA,OAASC,YAAT,KAA6B,0BAA7B,CAEA,GAAMC,iBAAgB,CAAG,QAAnBA,iBAAmB,CAACC,KAAD,CAAsBC,GAAtB,CAAoC,CAC3D,cAAkCP,QAAQ,EAA1C,CAAQQ,UAAR,WAAQA,UAAR,CAAoBC,SAApB,WAAoBA,SAApB,CACA,kBAAsCP,YAAY,EAAlD,CAAQQ,cAAR,eAAQA,cAAR,CAAwBC,SAAxB,eAAwBA,SAAxB,CACA,cAAkCV,QAAQ,EAA1C,CAAQW,UAAR,WAAQA,UAAR,CAAoBC,SAApB,WAAoBA,SAApB,CACA,kBAA4DT,YAAY,EAAxE,CAAQU,cAAR,eAAQA,cAAR,CAAoCC,cAApC,eAAwBH,UAAxB,CAEA,wBASIhB,kBAAkB,CAAC,kBAAD,CAAqBU,KAArB,CAA4B,CAChDG,SADgD,CAChDA,SADgD,CAEhDE,SAFgD,CAEhDA,SAFgD,CAGhDE,SAHgD,CAGhDA,SAHgD,CAIhDC,6BAJgD,CAA5B,CATtB,CACEE,KADF,qBACEA,KADF,CAEEC,SAFF,qBAEEA,SAFF,CAGEC,UAHF,qBAGEA,UAHF,CAIEC,SAJF,qBAIEA,SAJF,CAKEC,UALF,qBAKEA,UALF,CAMEC,OANF,qBAMEA,OANF,CAOEC,MAPF,qBAOEA,MAPF,CAQKC,aARL,yDAeA,sBAAwB/B,KAAK,CAACgC,UAANhC,CAAiBG,YAAjBH,CAAxB,CAAQiC,WAAR,mBAAQA,WAAR,CAEA,GAAI1B,qBAAqB,CAACO,KAAD,CAAzB,CAAkC,CAChC,MAAO,KAAP,CACD,CACD,MACEd,qBAACK,SAAD,WACE6B,iBAAiB,CAAC,QADpB,CAEEnB,GAAG,CAAEA,GAFP,CAGEU,SAAS,CAAEd,oBAAoB,CAACc,SAAD,CAAYP,cAAc,CAACO,SAA3B,CAHjC,CAIEC,UAAU,CAAEf,oBAAoB,CAACe,UAAD,CAAaR,cAAc,CAACQ,UAA5B,CAJlC,CAMEC,SAAS,CAAEhB,oBAAoB,CAACgB,SAAD,CAAYX,UAAU,CAACW,SAAvB,CANjC,CAQEC,UAAU,CAAEjB,oBAAoB,CAACiB,UAAD,CAAaZ,UAAU,CAACY,UAAxB,CARlC,CAUEC,OAAO,CAAElB,oBAAoB,CAC3BA,oBAAoB,CAACkB,OAAD,CAAUT,UAAU,CAACS,OAArB,CADO,CAE3BN,cAAc,CAACM,OAFY,CAV/B,CAeEC,MAAM,CAAEnB,oBAAoB,CAC1BA,oBAAoB,CAACmB,MAAD,CAASV,UAAU,CAACU,MAApB,CADM,CAE1BP,cAAc,CAACO,MAFW,CAf9B,CAmBEK,OAAO,CAAEF,WAnBX,EAoBMF,aApBN,EAsBE/B,oBAACM,SAAD,CAAekB,KAAf,CAtBF,CADF,CA1BF,EAsDA,cAAevB,KAAI,CAACC,UAAU,CAACW,gBAAD,CAAX,CAAnB","names":["React","memo","forwardRef","ModalContext","usePropsResolution","Pressable","CloseIcon","useHasResponsiveProps","useHover","useFocus","useIsPressed","composeEventHandlers","useFocusRing","ModalCloseButton","props","ref","hoverProps","isHovered","pressableProps","isPressed","focusProps","isFocused","isFocusVisible","focusRingProps","_icon","onPressIn","onPressOut","onHoverIn","onHoverOut","onFocus","onBlur","resolvedProps","useContext","handleClose","accessibilityRole","onPress"],"sources":["ModalCloseButton.tsx"],"sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { ModalContext } from './Context';\nimport { usePropsResolution } from '../../../hooks';\nimport { Pressable } from '../../primitives/Pressable';\nimport { CloseIcon } from '../../primitives/Icon/Icons';\nimport type { IButtonProps } from '../../primitives/Button';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport {\n  useHover,\n  useFocus,\n  useIsPressed,\n} from '../../primitives/Pressable/Pressable';\nimport { composeEventHandlers } from '../../../utils';\nimport { useFocusRing } from '@react-native-aria/focus';\n\nconst ModalCloseButton = (props: IButtonProps, ref?: any) => {\n  const { hoverProps, isHovered } = useHover();\n  const { pressableProps, isPressed } = useIsPressed();\n  const { focusProps, isFocused } = useFocus();\n  const { isFocusVisible, focusProps: focusRingProps }: any = useFocusRing();\n\n  const {\n    _icon,\n    onPressIn,\n    onPressOut,\n    onHoverIn,\n    onHoverOut,\n    onFocus,\n    onBlur,\n    ...resolvedProps\n  } = usePropsResolution('ModalCloseButton', props, {\n    isHovered,\n    isPressed,\n    isFocused,\n    isFocusVisible,\n  });\n  const { handleClose } = React.useContext(ModalContext);\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <Pressable\n      accessibilityRole=\"button\"\n      ref={ref}\n      onPressIn={composeEventHandlers(onPressIn, pressableProps.onPressIn)}\n      onPressOut={composeEventHandlers(onPressOut, pressableProps.onPressOut)}\n      // @ts-ignore - web only\n      onHoverIn={composeEventHandlers(onHoverIn, hoverProps.onHoverIn)}\n      // @ts-ignore - web only\n      onHoverOut={composeEventHandlers(onHoverOut, hoverProps.onHoverOut)}\n      // @ts-ignore - web only\n      onFocus={composeEventHandlers(\n        composeEventHandlers(onFocus, focusProps.onFocus),\n        focusRingProps.onFocus\n      )}\n      // @ts-ignore - web only\n      onBlur={composeEventHandlers(\n        composeEventHandlers(onBlur, focusProps.onBlur),\n        focusRingProps.onBlur\n      )}\n      onPress={handleClose}\n      {...resolvedProps}\n    >\n      <CloseIcon {..._icon} />\n    </Pressable>\n  );\n};\n\nexport default memo(forwardRef(ModalCloseButton));\n"]},"metadata":{},"sourceType":"module"}