{"ast":null,"code":"import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"id\",\"initialRouteName\",\"backBehavior\",\"children\",\"screenListeners\",\"screenOptions\",\"sceneContainerStyle\"],_excluded2=[\"lazy\",\"tabBarOptions\"];function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import{createNavigatorFactory,TabRouter,useNavigationBuilder}from'@react-navigation/native';import*as React from'react';import warnOnce from'warn-once';import BottomTabView from\"../views/BottomTabView\";function BottomTabNavigator(_ref){var id=_ref.id,initialRouteName=_ref.initialRouteName,backBehavior=_ref.backBehavior,children=_ref.children,screenListeners=_ref.screenListeners,screenOptions=_ref.screenOptions,sceneContainerStyle=_ref.sceneContainerStyle,restWithDeprecated=_objectWithoutProperties(_ref,_excluded);var lazy=restWithDeprecated.lazy,tabBarOptions=restWithDeprecated.tabBarOptions,rest=_objectWithoutProperties(restWithDeprecated,_excluded2);var defaultScreenOptions={};if(tabBarOptions){var _tabBarOptions$labelP;Object.assign(defaultScreenOptions,{tabBarHideOnKeyboard:tabBarOptions.keyboardHidesTabBar,tabBarActiveTintColor:tabBarOptions.activeTintColor,tabBarInactiveTintColor:tabBarOptions.inactiveTintColor,tabBarActiveBackgroundColor:tabBarOptions.activeBackgroundColor,tabBarInactiveBackgroundColor:tabBarOptions.inactiveBackgroundColor,tabBarAllowFontScaling:tabBarOptions.allowFontScaling,tabBarShowLabel:tabBarOptions.showLabel,tabBarLabelStyle:tabBarOptions.labelStyle,tabBarIconStyle:tabBarOptions.iconStyle,tabBarItemStyle:tabBarOptions.tabStyle,tabBarLabelPosition:(_tabBarOptions$labelP=tabBarOptions.labelPosition)!==null&&_tabBarOptions$labelP!==void 0?_tabBarOptions$labelP:tabBarOptions.adaptive===false?'below-icon':undefined,tabBarStyle:[{display:tabBarOptions.tabBarVisible?'none':'flex'},defaultScreenOptions.tabBarStyle]});Object.keys(defaultScreenOptions).forEach(function(key){if(defaultScreenOptions[key]===undefined){delete defaultScreenOptions[key];}});warnOnce(tabBarOptions,\"Bottom Tab Navigator: 'tabBarOptions' is deprecated. Migrate the options to 'screenOptions' instead.\\n\\nPlace the following in 'screenOptions' in your code to keep current behavior:\\n\\n\"+JSON.stringify(defaultScreenOptions,null,2)+\"\\n\\nSee https://reactnavigation.org/docs/bottom-tab-navigator#options for more details.\");}if(typeof lazy==='boolean'){defaultScreenOptions.lazy=lazy;warnOnce(true,\"Bottom Tab Navigator: 'lazy' in props is deprecated. Move it to 'screenOptions' instead.\\n\\nSee https://reactnavigation.org/docs/bottom-tab-navigator/#lazy for more details.\");}var _useNavigationBuilder=useNavigationBuilder(TabRouter,{id:id,initialRouteName:initialRouteName,backBehavior:backBehavior,children:children,screenListeners:screenListeners,screenOptions:screenOptions,defaultScreenOptions:defaultScreenOptions}),state=_useNavigationBuilder.state,descriptors=_useNavigationBuilder.descriptors,navigation=_useNavigationBuilder.navigation,NavigationContent=_useNavigationBuilder.NavigationContent;return React.createElement(NavigationContent,null,React.createElement(BottomTabView,_extends({},rest,{state:state,navigation:navigation,descriptors:descriptors,sceneContainerStyle:sceneContainerStyle})));}export default createNavigatorFactory(BottomTabNavigator);","map":{"version":3,"mappings":"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","names":["createNavigatorFactory","TabRouter","useNavigationBuilder","React","warnOnce","BottomTabView","BottomTabNavigator","id","initialRouteName","backBehavior","children","screenListeners","screenOptions","sceneContainerStyle","restWithDeprecated","lazy","tabBarOptions","rest","defaultScreenOptions","Object","assign","tabBarHideOnKeyboard","keyboardHidesTabBar","tabBarActiveTintColor","activeTintColor","tabBarInactiveTintColor","inactiveTintColor","tabBarActiveBackgroundColor","activeBackgroundColor","tabBarInactiveBackgroundColor","inactiveBackgroundColor","tabBarAllowFontScaling","allowFontScaling","tabBarShowLabel","showLabel","tabBarLabelStyle","labelStyle","tabBarIconStyle","iconStyle","tabBarItemStyle","tabStyle","tabBarLabelPosition","labelPosition","adaptive","undefined","tabBarStyle","display","tabBarVisible","keys","forEach","key","JSON","stringify","state","descriptors","navigation","NavigationContent"],"sources":["createBottomTabNavigator.tsx"],"sourcesContent":["import {\n  createNavigatorFactory,\n  DefaultNavigatorOptions,\n  ParamListBase,\n  TabActionHelpers,\n  TabNavigationState,\n  TabRouter,\n  TabRouterOptions,\n  useNavigationBuilder,\n} from '@react-navigation/native';\nimport * as React from 'react';\nimport warnOnce from 'warn-once';\n\nimport type {\n  BottomTabNavigationConfig,\n  BottomTabNavigationEventMap,\n  BottomTabNavigationOptions,\n} from '../types';\nimport BottomTabView from '../views/BottomTabView';\n\ntype Props = DefaultNavigatorOptions<\n  ParamListBase,\n  TabNavigationState<ParamListBase>,\n  BottomTabNavigationOptions,\n  BottomTabNavigationEventMap\n> &\n  TabRouterOptions &\n  BottomTabNavigationConfig;\n\nfunction BottomTabNavigator({\n  id,\n  initialRouteName,\n  backBehavior,\n  children,\n  screenListeners,\n  screenOptions,\n  sceneContainerStyle,\n  ...restWithDeprecated\n}: Props) {\n  const {\n    // @ts-expect-error: lazy is deprecated\n    lazy,\n    // @ts-expect-error: tabBarOptions is deprecated\n    tabBarOptions,\n    ...rest\n  } = restWithDeprecated;\n\n  let defaultScreenOptions: BottomTabNavigationOptions = {};\n\n  if (tabBarOptions) {\n    Object.assign(defaultScreenOptions, {\n      tabBarHideOnKeyboard: tabBarOptions.keyboardHidesTabBar,\n      tabBarActiveTintColor: tabBarOptions.activeTintColor,\n      tabBarInactiveTintColor: tabBarOptions.inactiveTintColor,\n      tabBarActiveBackgroundColor: tabBarOptions.activeBackgroundColor,\n      tabBarInactiveBackgroundColor: tabBarOptions.inactiveBackgroundColor,\n      tabBarAllowFontScaling: tabBarOptions.allowFontScaling,\n      tabBarShowLabel: tabBarOptions.showLabel,\n      tabBarLabelStyle: tabBarOptions.labelStyle,\n      tabBarIconStyle: tabBarOptions.iconStyle,\n      tabBarItemStyle: tabBarOptions.tabStyle,\n      tabBarLabelPosition:\n        tabBarOptions.labelPosition ??\n        (tabBarOptions.adaptive === false ? 'below-icon' : undefined),\n      tabBarStyle: [\n        { display: tabBarOptions.tabBarVisible ? 'none' : 'flex' },\n        defaultScreenOptions.tabBarStyle,\n      ],\n    });\n\n    (\n      Object.keys(defaultScreenOptions) as (keyof BottomTabNavigationOptions)[]\n    ).forEach((key) => {\n      if (defaultScreenOptions[key] === undefined) {\n        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n        delete defaultScreenOptions[key];\n      }\n    });\n\n    warnOnce(\n      tabBarOptions,\n      `Bottom Tab Navigator: 'tabBarOptions' is deprecated. Migrate the options to 'screenOptions' instead.\\n\\nPlace the following in 'screenOptions' in your code to keep current behavior:\\n\\n${JSON.stringify(\n        defaultScreenOptions,\n        null,\n        2\n      )}\\n\\nSee https://reactnavigation.org/docs/bottom-tab-navigator#options for more details.`\n    );\n  }\n\n  if (typeof lazy === 'boolean') {\n    defaultScreenOptions.lazy = lazy;\n\n    warnOnce(\n      true,\n      `Bottom Tab Navigator: 'lazy' in props is deprecated. Move it to 'screenOptions' instead.\\n\\nSee https://reactnavigation.org/docs/bottom-tab-navigator/#lazy for more details.`\n    );\n  }\n\n  const { state, descriptors, navigation, NavigationContent } =\n    useNavigationBuilder<\n      TabNavigationState<ParamListBase>,\n      TabRouterOptions,\n      TabActionHelpers<ParamListBase>,\n      BottomTabNavigationOptions,\n      BottomTabNavigationEventMap\n    >(TabRouter, {\n      id,\n      initialRouteName,\n      backBehavior,\n      children,\n      screenListeners,\n      screenOptions,\n      defaultScreenOptions,\n    });\n\n  return (\n    <NavigationContent>\n      <BottomTabView\n        {...rest}\n        state={state}\n        navigation={navigation}\n        descriptors={descriptors}\n        sceneContainerStyle={sceneContainerStyle}\n      />\n    </NavigationContent>\n  );\n}\n\nexport default createNavigatorFactory<\n  TabNavigationState<ParamListBase>,\n  BottomTabNavigationOptions,\n  BottomTabNavigationEventMap,\n  typeof BottomTabNavigator\n>(BottomTabNavigator);\n"]},"metadata":{},"sourceType":"module"}