{"ast":null,"code":"import{getActionFromState,getStateFromPath,NavigationContainerRefContext}from'@react-navigation/core';import*as React from'react';import LinkingContext from\"./LinkingContext\";export default function useLinkTo(){var navigation=React.useContext(NavigationContainerRefContext);var linking=React.useContext(LinkingContext);var linkTo=React.useCallback(function(to){if(navigation===undefined){throw new Error(\"Couldn't find a navigation object. Is your component inside NavigationContainer?\");}if(typeof to!=='string'){navigation.navigate(to.screen,to.params);return;}if(!to.startsWith('/')){throw new Error(\"The path must start with '/' (\"+to+\").\");}var options=linking.options;var state=options!==null&&options!==void 0&&options.getStateFromPath?options.getStateFromPath(to,options.config):getStateFromPath(to,options===null||options===void 0?void 0:options.config);if(state){var action=getActionFromState(state,options===null||options===void 0?void 0:options.config);if(action!==undefined){navigation.dispatch(action);}else{navigation.reset(state);}}else{throw new Error('Failed to parse the path to a navigation state.');}},[linking,navigation]);return linkTo;}","map":{"version":3,"mappings":"AAAA,OACEA,kBADF,CAEEC,gBAFF,CAGEC,6BAHF,KAIO,wBAJP,CAKA,MAAO,GAAKC,MAAZ,KAAuB,OAAvB,CAEA,MAAOC,eAAP,wBAiBA,cAAe,SAASC,UAAT,EAEX,CACF,GAAMC,WAAU,CAAGH,KAAK,CAACI,UAANJ,CAAiBD,6BAAjBC,CAAnB,CACA,GAAMK,QAAO,CAAGL,KAAK,CAACI,UAANJ,CAAiBC,cAAjBD,CAAhB,CAEA,GAAMM,OAAM,CAAGN,KAAK,CAACO,WAANP,CACZQ,WAAD,CAAuB,CACrB,GAAIL,UAAU,GAAKM,SAAnB,CAA8B,CAC5B,KAAM,IAAIC,MAAJ,CACJ,kFADI,CAAN,CAGD,CAED,GAAI,MAAOF,GAAP,GAAc,QAAlB,CAA4B,CAE1BL,UAAU,CAACQ,QAAXR,CAAoBK,EAAE,CAACI,MAAvBT,CAA+BK,EAAE,CAACK,MAAlCV,EACA,OACD,CAED,GAAI,CAACK,EAAE,CAACM,UAAHN,CAAc,GAAdA,CAAL,CAAyB,CACvB,KAAM,IAAIE,MAAJ,kCAA2CF,EAA3C,MAAN,CACD,CAED,GAAQO,QAAR,CAAoBV,OAApB,CAAQU,OAAR,CAEA,GAAMC,MAAK,CAAGD,OAAO,OAAPA,SAAO,SAAPA,SAAO,CAAEjB,gBAATiB,CACVA,OAAO,CAACjB,gBAARiB,CAAyBP,EAAzBO,CAA6BA,OAAO,CAACE,MAArCF,CADUA,CAEVjB,gBAAgB,CAACU,EAAD,CAAKO,OAAL,OAAKA,SAAL,SAAKA,CAAL,MAAKA,QAAO,CAAEE,MAAd,CAFpB,CAIA,GAAID,KAAJ,CAAW,CACT,GAAME,OAAM,CAAGrB,kBAAkB,CAACmB,KAAD,CAAQD,OAAR,OAAQA,SAAR,SAAQA,CAAR,MAAQA,QAAO,CAAEE,MAAjB,CAAjC,CAEA,GAAIC,MAAM,GAAKT,SAAf,CAA0B,CACxBN,UAAU,CAACgB,QAAXhB,CAAoBe,MAApBf,EADF,KAEO,CACLA,UAAU,CAACiB,KAAXjB,CAAiBa,KAAjBb,EACD,CAPH,KAQO,CACL,KAAM,IAAIO,MAAJ,CAAU,iDAAV,CAAN,CACD,CAlCU,EAoCb,CAACL,OAAD,CAAUF,UAAV,CApCaH,CAAf,CAuCA,MAAOM,OAAP,CACD","names":["getActionFromState","getStateFromPath","NavigationContainerRefContext","React","LinkingContext","useLinkTo","navigation","useContext","linking","linkTo","useCallback","to","undefined","Error","navigate","screen","params","startsWith","options","state","config","action","dispatch","reset"],"sources":["useLinkTo.tsx"],"sourcesContent":["import {\n  getActionFromState,\n  getStateFromPath,\n  NavigationContainerRefContext,\n} from '@react-navigation/core';\nimport * as React from 'react';\n\nimport LinkingContext from './LinkingContext';\n\nexport type To<\n  ParamList extends ReactNavigation.RootParamList = ReactNavigation.RootParamList,\n  RouteName extends keyof ParamList = keyof ParamList\n> =\n  | string\n  | (undefined extends ParamList[RouteName]\n      ? {\n          screen: Extract<RouteName, string>;\n          params?: ParamList[RouteName];\n        }\n      : {\n          screen: Extract<RouteName, string>;\n          params: ParamList[RouteName];\n        });\n\nexport default function useLinkTo<\n  ParamList extends ReactNavigation.RootParamList\n>() {\n  const navigation = React.useContext(NavigationContainerRefContext);\n  const linking = React.useContext(LinkingContext);\n\n  const linkTo = React.useCallback(\n    (to: To<ParamList>) => {\n      if (navigation === undefined) {\n        throw new Error(\n          \"Couldn't find a navigation object. Is your component inside NavigationContainer?\"\n        );\n      }\n\n      if (typeof to !== 'string') {\n        // @ts-expect-error: This is fine\n        navigation.navigate(to.screen, to.params);\n        return;\n      }\n\n      if (!to.startsWith('/')) {\n        throw new Error(`The path must start with '/' (${to}).`);\n      }\n\n      const { options } = linking;\n\n      const state = options?.getStateFromPath\n        ? options.getStateFromPath(to, options.config)\n        : getStateFromPath(to, options?.config);\n\n      if (state) {\n        const action = getActionFromState(state, options?.config);\n\n        if (action !== undefined) {\n          navigation.dispatch(action);\n        } else {\n          navigation.reset(state);\n        }\n      } else {\n        throw new Error('Failed to parse the path to a navigation state.');\n      }\n    },\n    [linking, navigation]\n  );\n\n  return linkTo;\n}\n"]},"metadata":{},"sourceType":"module"}