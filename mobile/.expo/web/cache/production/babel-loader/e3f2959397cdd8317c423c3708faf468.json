{"ast":null,"code":"import*as React from'react';import NavigationBuilderContext from\"./NavigationBuilderContext\";export default function useOnRouteFocus(_ref){var router=_ref.router,getState=_ref.getState,sourceRouteKey=_ref.key,setState=_ref.setState;var _React$useContext=React.useContext(NavigationBuilderContext),onRouteFocusParent=_React$useContext.onRouteFocus;return React.useCallback(function(key){var state=getState();var result=router.getStateForRouteFocus(state,key);if(result!==state){setState(result);}if(onRouteFocusParent!==undefined&&sourceRouteKey!==undefined){onRouteFocusParent(sourceRouteKey);}},[getState,onRouteFocusParent,router,setState,sourceRouteKey]);}","map":{"version":3,"mappings":"AAKA,MAAO,GAAKA,MAAZ,KAAuB,OAAvB,CAEA,MAAOC,yBAAP,kCAcA,cAAe,SAASC,gBAAT,MAKK,IAJlBC,OAIkB,MAJlBA,MAIkB,CAHlBC,QAGkB,MAHlBA,QAGkB,CAFbC,cAEa,MAFlBC,GAEkB,CADlBC,QACkB,MADlBA,QACkB,CAClB,sBAA6CP,KAAK,CAACQ,UAANR,CAC3CC,wBAD2CD,CAA7C,CAAsBS,kBAAtB,mBAAQC,YAAR,CAIA,MAAOV,MAAK,CAACW,WAANX,CACJM,YAAD,CAAiB,CACf,GAAMM,MAAK,CAAGR,QAAQ,EAAtB,CACA,GAAMS,OAAM,CAAGV,MAAM,CAACW,qBAAPX,CAA6BS,KAA7BT,CAAoCG,GAApCH,CAAf,CAEA,GAAIU,MAAM,GAAKD,KAAf,CAAsB,CACpBL,QAAQ,CAACM,MAAD,CAARN,CACD,CAED,GAAIE,kBAAkB,GAAKM,SAAvBN,EAAoCJ,cAAc,GAAKU,SAA3D,CAAsE,CACpEN,kBAAkB,CAACJ,cAAD,CAAlBI,CACD,CAXE,EAaL,CAACL,QAAD,CAAWK,kBAAX,CAA+BN,MAA/B,CAAuCI,QAAvC,CAAiDF,cAAjD,CAbKL,CAAP,CAeD","names":["React","NavigationBuilderContext","useOnRouteFocus","router","getState","sourceRouteKey","key","setState","useContext","onRouteFocusParent","onRouteFocus","useCallback","state","result","getStateForRouteFocus","undefined"],"sources":["useOnRouteFocus.tsx"],"sourcesContent":["import type {\n  NavigationAction,\n  NavigationState,\n  Router,\n} from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport NavigationBuilderContext from './NavigationBuilderContext';\n\ntype Options<Action extends NavigationAction> = {\n  router: Router<NavigationState, Action>;\n  getState: () => NavigationState;\n  setState: (state: NavigationState) => void;\n  key?: string;\n};\n\n/**\n * Hook to handle focus actions for a route.\n * Focus action needs to be treated specially, coz when a nested route is focused,\n * the parent navigators also needs to be focused.\n */\nexport default function useOnRouteFocus<Action extends NavigationAction>({\n  router,\n  getState,\n  key: sourceRouteKey,\n  setState,\n}: Options<Action>) {\n  const { onRouteFocus: onRouteFocusParent } = React.useContext(\n    NavigationBuilderContext\n  );\n\n  return React.useCallback(\n    (key: string) => {\n      const state = getState();\n      const result = router.getStateForRouteFocus(state, key);\n\n      if (result !== state) {\n        setState(result);\n      }\n\n      if (onRouteFocusParent !== undefined && sourceRouteKey !== undefined) {\n        onRouteFocusParent(sourceRouteKey);\n      }\n    },\n    [getState, onRouteFocusParent, router, setState, sourceRouteKey]\n  );\n}\n"]},"metadata":{},"sourceType":"module"}