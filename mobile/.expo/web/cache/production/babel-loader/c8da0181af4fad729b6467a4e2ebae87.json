{"ast":null,"code":"import I18nManager from\"react-native-web/dist/exports/I18nManager\";export var attachEventHandlersOnRef=function attachEventHandlersOnRef(props,ref){if(ref&&ref.current){for(var key in props){if(key.startsWith('on')){ref.current[key.toLowerCase()]=props[key];}}}};export var getLabel=function getLabel(props){var _props$accessibilityL;var label=(_props$accessibilityL=props.accessibilityLabel)!==null&&_props$accessibilityL!==void 0?_props$accessibilityL:props['aria-label'];if(!label){label=typeof props.label==='string'?props.label:undefined;}return label;};export*from\"./ariaToAccessibilityMap\";export{useId,useLayoutEffect,mergeIds,mergeProps}from'@react-aria/utils';export{SSRProvider,useIsSSR}from'@react-aria/ssr';export var isRTL=function isRTL(){if(I18nManager.isRTL!==undefined){return I18nManager.isRTL;}if(I18nManager.getConstants){return I18nManager.getConstants().isRTL;}};","map":{"version":3,"mappings":"mEAEA,MAAO,IAAMA,yBAAwB,CAAG,QAA3BA,yBAA2B,CAACC,KAAD,CAAaC,GAAb,CAA0B,CAChE,GAAIA,GAAG,EAAIA,GAAG,CAACC,OAAf,CAAwB,CACtB,IAAK,GAAIC,IAAT,GAAgBH,MAAhB,CAAuB,CACrB,GAAIG,GAAG,CAACC,UAAJD,CAAe,IAAfA,CAAJ,CAA0B,CACxBF,GAAG,CAACC,OAAJD,CAAYE,GAAG,CAACE,WAAJF,EAAZF,EAAiCD,KAAK,CAACG,GAAD,CAAtCF,CACD,CACF,CACF,CAPI,EAUP,MAAO,IAAMK,SAAQ,CAAIN,QAAZM,SAAYN,MAAD,CAAgB,2BACtC,GAAIO,MAAK,wBAAGP,KAAK,CAACQ,kBAAT,+DAA+BR,KAAK,CAAC,YAAD,CAA7C,CAEA,GAAI,CAACO,KAAL,CAAY,CACVA,KAAK,CAAG,MAAOP,MAAK,CAACO,KAAb,GAAuB,QAAvB,CAAkCP,KAAK,CAACO,KAAxC,CAAgDE,SAAxDF,CACD,CAED,MAAOA,MAAP,CAPK,EAUP,sCACA,OACEG,KADF,CAEEC,eAFF,CAGEC,QAHF,CAIEC,UAJF,KAKO,mBALP,CAMA,OAASC,WAAT,CAAsBC,QAAtB,KAAsC,iBAAtC,CAEA,MAAO,IAAMC,MAAK,CAAG,QAARA,MAAQ,EAAM,CAEzB,GAAIC,WAAW,CAACD,KAAZC,GAAsBR,SAA1B,CAAqC,CACnC,MAAOQ,YAAW,CAACD,KAAnB,CAHuB,CAOzB,GAAIC,WAAW,CAACC,YAAhB,CAA8B,CAE5B,MAAOD,YAAW,CAACC,YAAZD,GAA2BD,KAAlC,CACD,CAVI","names":["attachEventHandlersOnRef","props","ref","current","key","startsWith","toLowerCase","getLabel","label","accessibilityLabel","undefined","useId","useLayoutEffect","mergeIds","mergeProps","SSRProvider","useIsSSR","isRTL","I18nManager","getConstants"],"sources":["index.ts"],"sourcesContent":["import { I18nManager } from 'react-native';\n\nexport const attachEventHandlersOnRef = (props: any, ref: any) => {\n  if (ref && ref.current) {\n    for (let key in props) {\n      if (key.startsWith('on')) {\n        ref.current[key.toLowerCase()] = props[key];\n      }\n    }\n  }\n};\n\nexport const getLabel = (props: any) => {\n  let label = props.accessibilityLabel ?? props['aria-label'];\n\n  if (!label) {\n    label = typeof props.label === 'string' ? props.label : undefined;\n  }\n\n  return label;\n};\n\nexport * from './ariaToAccessibilityMap';\nexport {\n  useId,\n  useLayoutEffect,\n  mergeIds,\n  mergeProps,\n} from '@react-aria/utils';\nexport { SSRProvider, useIsSSR } from '@react-aria/ssr';\n\nexport const isRTL = () => {\n  // To support previous RN versions. Newer versions use below getConstants()\n  if (I18nManager.isRTL !== undefined) {\n    return I18nManager.isRTL;\n  }\n\n  // @ts-ignore - RN web only\n  if (I18nManager.getConstants) {\n    // @ts-ignore - RN web only\n    return I18nManager.getConstants().isRTL;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}