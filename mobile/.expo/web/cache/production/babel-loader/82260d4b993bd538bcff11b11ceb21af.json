{"ast":null,"code":"import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"children\",\"startColor\",\"endColor\"];function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import React,{memo,forwardRef}from'react';import Animated from\"react-native-web/dist/exports/Animated\";import Platform from\"react-native-web/dist/exports/Platform\";import{usePropsResolution}from\"../../../hooks\";import{canUseDom}from\"../../../utils\";import Box from\"../../primitives/Box\";import{useHasResponsiveProps}from\"../../../hooks/useHasResponsiveProps\";import{useToken}from\"../../../hooks/useToken\";var Skeleton=function Skeleton(props,ref){var isDomUsable=canUseDom();var _usePropsResolution=usePropsResolution('Skeleton',props),children=_usePropsResolution.children,startColor=_usePropsResolution.startColor,endColor=_usePropsResolution.endColor,resolvedProps=_objectWithoutProperties(_usePropsResolution,_excluded);var blinkAnim=React.useRef(new Animated.Value(0)).current;var tokenisedStartColor=useToken('colors',startColor);React.useEffect(function(){if(isDomUsable){var blink=Animated.sequence([Animated.timing(blinkAnim,{toValue:1,duration:resolvedProps.fadeDuration*10000*(1/resolvedProps.speed),useNativeDriver:Platform.OS!=='web'}),Animated.timing(blinkAnim,{toValue:0,duration:resolvedProps.fadeDuration*10000*(1/resolvedProps.speed),useNativeDriver:Platform.OS!=='web'})]);Animated.loop(blink).start();}},[blinkAnim,isDomUsable,resolvedProps]);var skeletonStyle={skeleton:{height:'100%',width:'100%',backgroundColor:tokenisedStartColor,opacity:blinkAnim}};if(useHasResponsiveProps(props)){return null;}return resolvedProps.isLoaded?children:React.createElement(Box,_extends({bg:endColor},resolvedProps,{ref:ref}),React.createElement(Animated.View,{style:skeletonStyle.skeleton}));};export default memo(forwardRef(Skeleton));","map":{"version":3,"mappings":"+ZAAA,MAAOA,MAAP,EAAgBC,IAAhB,CAAsBC,UAAtB,KAAwC,OAAxC,C,0HAEA,OAASC,kBAAT,sBACA,OAASC,SAAT,sBACA,MAAOC,IAAP,4BAEA,OAASC,qBAAT,4CACA,OAASC,QAAT,+BAEA,GAAMC,SAAQ,CAAG,QAAXA,SAAW,CAACC,KAAD,CAAwBC,GAAxB,CAAqC,CACpD,GAAMC,YAAW,CAAGP,SAAS,EAA7B,CACA,wBAKID,kBAAkB,CAAC,UAAD,CAAaM,KAAb,CALtB,CACEG,QADF,qBACEA,QADF,CAEEC,UAFF,qBAEEA,UAFF,CAGEC,QAHF,qBAGEA,QAHF,CAIKC,aAJL,yDAOA,GAAMC,UAAS,CAAGhB,KAAK,CAACiB,MAANjB,CAAa,GAAIkB,SAAQ,CAACC,KAAb,CAAmB,CAAnB,CAAbnB,EAAoCoB,OAAtD,CACA,GAAMC,oBAAmB,CAAGd,QAAQ,CAAC,QAAD,CAAWM,UAAX,CAApC,CAGAb,KAAK,CAACsB,SAANtB,CAAgB,UAAM,CAEpB,GAAIW,WAAJ,CAAiB,CACf,GAAMY,MAAK,CAAGL,QAAQ,CAACM,QAATN,CAAkB,CAC9BA,QAAQ,CAACO,MAATP,CAAgBF,SAAhBE,CAA2B,CACzBQ,OAAO,CAAE,CADgB,CAEzBC,QAAQ,CACNZ,aAAa,CAACa,YAAdb,CAA6B,KAA7BA,EAAsC,EAAIA,aAAa,CAACc,KAAxDd,CAHuB,CAIzBe,eAAe,CAAEC,QAAQ,CAACC,EAATD,GAAgB,KAJR,CAA3Bb,CAD8B,CAO9BA,QAAQ,CAACO,MAATP,CAAgBF,SAAhBE,CAA2B,CACzBQ,OAAO,CAAE,CADgB,CAEzBC,QAAQ,CACNZ,aAAa,CAACa,YAAdb,CAA6B,KAA7BA,EAAsC,EAAIA,aAAa,CAACc,KAAxDd,CAHuB,CAIzBe,eAAe,CAAEC,QAAQ,CAACC,EAATD,GAAgB,KAJR,CAA3Bb,CAP8B,CAAlBA,CAAd,CAcAA,QAAQ,CAACe,IAATf,CAAcK,KAAdL,EAAqBgB,KAArBhB,GACD,CAlBH,EAmBG,CAACF,SAAD,CAAYL,WAAZ,CAAyBI,aAAzB,CAnBHf,EAqBA,GAAMmC,cAAkB,CAAG,CACzBC,QAAQ,CAAE,CACRC,MAAM,CAAE,MADA,CAERC,KAAK,CAAE,MAFC,CAGRC,eAAe,CAAElB,mBAHT,CAIRmB,OAAO,CAAExB,SAJD,CADe,CAA3B,CAUA,GAAIV,qBAAqB,CAACG,KAAD,CAAzB,CAAkC,CAChC,MAAO,KAAP,CACD,CAED,MAAOM,cAAa,CAAC0B,QAAd1B,CACLH,QADKG,CAGLf,oBAACK,GAAD,WAAKqC,EAAE,CAAE5B,QAAT,EAAuBC,aAAvB,EAAsCL,GAAG,CAAEA,GAA3C,GACEV,oBAACkB,QAAD,CAAUyB,IAAV,EAAeC,KAAK,CAAET,aAAa,CAACC,QAApC,EADF,CAHF,CAhDF,EAyDA,cAAenC,KAAI,CAACC,UAAU,CAACM,QAAD,CAAX,CAAnB","names":["React","memo","forwardRef","usePropsResolution","canUseDom","Box","useHasResponsiveProps","useToken","Skeleton","props","ref","isDomUsable","children","startColor","endColor","resolvedProps","blinkAnim","useRef","Animated","Value","current","tokenisedStartColor","useEffect","blink","sequence","timing","toValue","duration","fadeDuration","speed","useNativeDriver","Platform","OS","loop","start","skeletonStyle","skeleton","height","width","backgroundColor","opacity","isLoaded","bg","View","style"],"sources":["Skeleton.tsx"],"sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { Animated, Platform } from 'react-native';\nimport { usePropsResolution } from '../../../hooks';\nimport { canUseDom } from '../../../utils';\nimport Box from '../../primitives/Box';\nimport type { ISkeletonProps } from './types';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { useToken } from '../../../hooks/useToken';\n\nconst Skeleton = (props: ISkeletonProps, ref: any) => {\n  const isDomUsable = canUseDom();\n  const {\n    children,\n    startColor,\n    endColor,\n    ...resolvedProps\n  } = usePropsResolution('Skeleton', props);\n  // Setting blink Animation\n  const blinkAnim = React.useRef(new Animated.Value(0)).current;\n  const tokenisedStartColor = useToken('colors', startColor);\n\n  // Generating blink animation in a sequence\n  React.useEffect(() => {\n    //Check if window is loaded\n    if (isDomUsable) {\n      const blink = Animated.sequence([\n        Animated.timing(blinkAnim, {\n          toValue: 1,\n          duration:\n            resolvedProps.fadeDuration * 10000 * (1 / resolvedProps.speed),\n          useNativeDriver: Platform.OS !== 'web',\n        }),\n        Animated.timing(blinkAnim, {\n          toValue: 0,\n          duration:\n            resolvedProps.fadeDuration * 10000 * (1 / resolvedProps.speed),\n          useNativeDriver: Platform.OS !== 'web',\n        }),\n      ]);\n      Animated.loop(blink).start();\n    }\n  }, [blinkAnim, isDomUsable, resolvedProps]);\n\n  const skeletonStyle: any = {\n    skeleton: {\n      height: '100%',\n      width: '100%',\n      backgroundColor: tokenisedStartColor,\n      opacity: blinkAnim, // Bind opacity to animated value\n    },\n  };\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return resolvedProps.isLoaded ? (\n    children\n  ) : (\n    <Box bg={endColor} {...resolvedProps} ref={ref}>\n      <Animated.View style={skeletonStyle.skeleton} />\n    </Box>\n  );\n};\n\nexport default memo(forwardRef(Skeleton));\n"]},"metadata":{},"sourceType":"module"}