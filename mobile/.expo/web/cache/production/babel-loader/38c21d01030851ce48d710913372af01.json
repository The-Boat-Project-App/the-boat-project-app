{"ast":null,"code":"import useWindowDimensions from\"react-native-web/dist/exports/useWindowDimensions\";import isNil from'lodash.isnil';export function useMediaQuery(query){var dims=useWindowDimensions();var height=dims===null||dims===void 0?void 0:dims.height;var width=dims===null||dims===void 0?void 0:dims.width;return iterateQuery(query,height,width);}function queryResolver(query,width,height){for(var queryKey in query){if(!calculateQuery(queryKey,query[queryKey],height,width)){return false;}}return true;}function iterateQuery(query,height,width){var queryResults=[];if(Array.isArray(query)){query.forEach(function(subQuery){queryResults.push(queryResolver(subQuery,width,height));});}else{queryResults.push(queryResolver(query,width,height));}return queryResults;}function calculateQuery(key,val,height,width){var retval;if(isNil(width)||isNil(height)||isNil(val)){return;}switch(key){case'maxWidth':retval=!isNil(val)?width<=val:undefined;break;case'minWidth':retval=!isNil(val)?width>=val:undefined;break;case'maxHeight':retval=!isNil(val)?height<=val:undefined;break;case'minHeight':retval=!isNil(val)?height>=val:undefined;break;case'orientation':if(!isNil(val)){if(width>height){retval=val==='landscape';}else{retval=val==='portrait';}}break;default:break;}return retval;}","map":{"version":3,"mappings":"mFACA,MAAOA,MAAP,KAAkB,cAAlB,CAcA,MAAO,SAASC,cAAT,CAAuBC,KAAvB,CAAgD,CACrD,GAAMC,KAAI,CAAGC,mBAAmB,EAAhC,CACA,GAAMC,OAAM,CAAGF,IAAH,OAAGA,MAAH,SAAGA,CAAH,MAAGA,KAAI,CAAEE,MAArB,CACA,GAAMC,MAAK,CAAGH,IAAH,OAAGA,MAAH,SAAGA,CAAH,MAAGA,KAAI,CAAEG,KAApB,CAEA,MAAOC,aAAY,CAACL,KAAD,CAAQG,MAAR,CAAgBC,KAAhB,CAAnB,CACD,CAED,QAASE,cAAT,CAAuBN,KAAvB,CAAmCI,KAAnC,CAAmDD,MAAnD,CAAoE,CAClE,IAAK,GAAMI,SAAX,GAAuBP,MAAvB,CAA8B,CAC5B,GAAI,CAACQ,cAAc,CAACD,QAAD,CAAWP,KAAK,CAACO,QAAD,CAAhB,CAA4BJ,MAA5B,CAAoCC,KAApC,CAAnB,CAA+D,CAC7D,MAAO,MAAP,CACD,CACF,CACD,MAAO,KAAP,CACD,CAED,QAASC,aAAT,CACEL,KADF,CAEEG,MAFF,CAGEC,KAHF,CAIE,CACA,GAAMK,aAAY,CAAG,EAArB,CACA,GAAIC,KAAK,CAACC,OAAND,CAAcV,KAAdU,CAAJ,CAA0B,CACxBV,KAAK,CAACY,OAANZ,CAAea,iBAAD,CAAwB,CACpCJ,YAAY,CAACK,IAAbL,CAAkBH,aAAa,CAACO,QAAD,CAAWT,KAAX,CAAkBD,MAAlB,CAA/BM,EADF,GADF,KAIO,CACLA,YAAY,CAACK,IAAbL,CAAkBH,aAAa,CAACN,KAAD,CAAQI,KAAR,CAAeD,MAAf,CAA/BM,EACD,CACD,MAAOA,aAAP,CACD,CAED,QAASD,eAAT,CACEO,GADF,CAEEC,GAFF,CAGEb,MAHF,CAIEC,KAJF,CAKE,CACA,GAAIa,OAAJ,CACA,GAAInB,KAAK,CAACM,KAAD,CAALN,EAAgBA,KAAK,CAACK,MAAD,CAArBL,EAAiCA,KAAK,CAACkB,GAAD,CAA1C,CAAiD,CAC/C,OACD,CACD,OAAQD,GAAR,EACE,IAAK,UAAL,CACEE,MAAM,CAAG,CAACnB,KAAK,CAACkB,GAAD,CAAN,CAAcZ,KAAK,EAAIY,GAAvB,CAA6BE,SAAtCD,CACA,MACF,IAAK,UAAL,CACEA,MAAM,CAAG,CAACnB,KAAK,CAACkB,GAAD,CAAN,CAAcZ,KAAK,EAAIY,GAAvB,CAA6BE,SAAtCD,CACA,MACF,IAAK,WAAL,CACEA,MAAM,CAAG,CAACnB,KAAK,CAACkB,GAAD,CAAN,CAAcb,MAAM,EAAIa,GAAxB,CAA8BE,SAAvCD,CACA,MACF,IAAK,WAAL,CACEA,MAAM,CAAG,CAACnB,KAAK,CAACkB,GAAD,CAAN,CAAcb,MAAM,EAAIa,GAAxB,CAA8BE,SAAvCD,CACA,MACF,IAAK,aAAL,CACE,GAAI,CAACnB,KAAK,CAACkB,GAAD,CAAV,CAAiB,CACf,GAAIZ,KAAK,CAAGD,MAAZ,CAAoB,CAClBc,MAAM,CAAGD,GAAG,GAAK,WAAjBC,CADF,KAEO,CACLA,MAAM,CAAGD,GAAG,GAAK,UAAjBC,CACD,CACF,CACD,MACF,QACE,MAvBJ,CAyBA,MAAOA,OAAP,CACD","names":["isNil","useMediaQuery","query","dims","useWindowDimensions","height","width","iterateQuery","queryResolver","queryKey","calculateQuery","queryResults","Array","isArray","forEach","subQuery","push","key","val","retval","undefined"],"sources":["useMediaQuery.ts"],"sourcesContent":["import { useWindowDimensions } from 'react-native';\nimport isNil from 'lodash.isnil';\n\ntype QueryKeys =\n  | 'maxWidth'\n  | 'minWidth'\n  | 'maxHeight'\n  | 'minHeight'\n  | 'orientation';\n\ntype SubQuery = {\n  [queryKey in QueryKeys]?: number | string;\n};\ntype Query = Array<SubQuery>;\n\nexport function useMediaQuery(query: SubQuery | Query) {\n  const dims = useWindowDimensions();\n  const height = dims?.height;\n  const width = dims?.width;\n\n  return iterateQuery(query, height, width);\n}\n\nfunction queryResolver(query: any, width?: number, height?: number) {\n  for (const queryKey in query) {\n    if (!calculateQuery(queryKey, query[queryKey], height, width)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction iterateQuery(\n  query: SubQuery | Query,\n  height?: number,\n  width?: number\n) {\n  const queryResults = [];\n  if (Array.isArray(query)) {\n    query.forEach((subQuery: SubQuery) => {\n      queryResults.push(queryResolver(subQuery, width, height));\n    });\n  } else {\n    queryResults.push(queryResolver(query, width, height));\n  }\n  return queryResults;\n}\n\nfunction calculateQuery(\n  key: string,\n  val?: number | string,\n  height?: number,\n  width?: number\n) {\n  let retval;\n  if (isNil(width) || isNil(height) || isNil(val)) {\n    return;\n  }\n  switch (key) {\n    case 'maxWidth':\n      retval = !isNil(val) ? width <= val : undefined;\n      break;\n    case 'minWidth':\n      retval = !isNil(val) ? width >= val : undefined;\n      break;\n    case 'maxHeight':\n      retval = !isNil(val) ? height <= val : undefined;\n      break;\n    case 'minHeight':\n      retval = !isNil(val) ? height >= val : undefined;\n      break;\n    case 'orientation':\n      if (!isNil(val)) {\n        if (width > height) {\n          retval = val === 'landscape';\n        } else {\n          retval = val === 'portrait';\n        }\n      }\n      break;\n    default:\n      break;\n  }\n  return retval;\n}\n"]},"metadata":{},"sourceType":"module"}