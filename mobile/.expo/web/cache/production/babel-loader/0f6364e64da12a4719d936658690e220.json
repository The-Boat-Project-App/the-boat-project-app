{"ast":null,"code":"\"use strict\";var _objectWithoutProperties=require(\"@babel/runtime/helpers/objectWithoutProperties\");var _excluded=[\"style\",\"children\",\"borderless\"];Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=GenericPressable;var _react=_interopRequireDefault(require(\"react\"));var _reactNative=require(\"react-native-web/dist/index\");var _SharedPropsProvider=require(\"./context/SharedPropsProvider\");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}function GenericPressable(_ref){var style=_ref.style,children=_ref.children,_ref$borderless=_ref.borderless,borderless=_ref$borderless===void 0?false:_ref$borderless,otherProps=_objectWithoutProperties(_ref,_excluded);var _ref2=(0,_SharedPropsProvider.useSharedProps)(),pressableHightlightColor=_ref2.pressableHightlightColor,UserProvidedPressable=_ref2.GenericPressable;if(UserProvidedPressable){return _react.default.createElement(UserProvidedPressable,_extends({style:style,borderless:borderless},otherProps),children);}if(_reactNative.Platform.OS==='android'){return _react.default.createElement(_reactNative.View,{style:style},_react.default.createElement(_reactNative.TouchableNativeFeedback,_extends({useForeground:true,background:_reactNative.TouchableNativeFeedback.Ripple(pressableHightlightColor,borderless)},otherProps),_react.default.createElement(_reactNative.View,{testID:\"generic-pressable\"},children)));}return _react.default.createElement(_reactNative.TouchableHighlight,_extends({underlayColor:pressableHightlightColor,style:style},otherProps),_react.default.createElement(_reactNative.View,{testID:\"generic-pressable\"},children));}","map":{"version":3,"mappings":"8OAAA,oD,wDAOA,4aAGe,QAASA,iBAAT,MAK8B,IAJ3CC,MAI2C,MAJ3CA,KAI2C,CAH3CC,QAG2C,MAH3CA,QAG2C,sBAF3CC,UAE2C,CAF3CA,UAE2C,0BAF9B,KAE8B,iBADxCC,UACwC,0CAC3C,UACE,yCADF,CAAQC,wBAAR,OAAQA,wBAAR,CAAoDC,qBAApD,OAAkCN,gBAAlC,CAEA,GAAIM,qBAAJ,CAA2B,CACzB,MACEC,8BAACD,qBAAD,WACEL,KAAK,CAAEA,KADT,CAEEE,UAAU,CAAEA,UAFd,EAGOC,UAHP,EAIGF,QAJH,CADF,CAQD,CACD,GAAIM,sBAASC,EAATD,GAAgB,SAApB,CAA+B,CAG7B,MACED,8BAACG,iBAAD,EAAMT,KAAK,CAAEA,KAAb,EACEM,6BAACG,oCAAD,WACEC,aAAa,KADf,CAEEC,UAAU,CAAEC,qCAAwBC,MAAxBD,CACVR,wBADUQ,CAEVV,UAFUU,CAFd,EAMOT,UANP,EAOEG,6BAACG,iBAAD,EAAMK,MAAM,CAAC,mBAAb,EAAkCb,QAAlC,CAPF,CADF,CADF,CAaD,CACD,MACEK,8BAACG,+BAAD,WACEM,aAAa,CAAEX,wBADjB,CAEEJ,KAAK,CAAEA,KAFT,EAGOG,UAHP,EAIEG,6BAACG,iBAAD,EAAMK,MAAM,CAAC,mBAAb,EAAkCb,QAAlC,CAJF,CADF,CAQD","names":["GenericPressable","style","children","borderless","otherProps","pressableHightlightColor","UserProvidedPressable","_react","Platform","OS","_reactNative","useForeground","background","TouchableNativeFeedback","Ripple","testID","underlayColor"],"sources":["GenericPressable.tsx"],"sourcesContent":["import React, { PropsWithChildren } from 'react';\nimport {\n  Platform,\n  TouchableHighlight,\n  TouchableNativeFeedback,\n  View\n} from 'react-native';\nimport { useSharedProps } from './context/SharedPropsProvider';\nimport { GenericPressableProps } from './shared-types';\n\nexport default function GenericPressable({\n  style,\n  children,\n  borderless = false,\n  ...otherProps\n}: PropsWithChildren<GenericPressableProps>) {\n  const { pressableHightlightColor, GenericPressable: UserProvidedPressable } =\n    useSharedProps();\n  if (UserProvidedPressable) {\n    return (\n      <UserProvidedPressable\n        style={style}\n        borderless={borderless}\n        {...(otherProps as any)}>\n        {children}\n      </UserProvidedPressable>\n    );\n  }\n  if (Platform.OS === 'android') {\n    // TouchableNativeFeedback does not support a\n    // style prop. So we must wrap it inside a View.\n    return (\n      <View style={style}>\n        <TouchableNativeFeedback\n          useForeground\n          background={TouchableNativeFeedback.Ripple(\n            pressableHightlightColor,\n            borderless\n          )}\n          {...(otherProps as any)}>\n          <View testID=\"generic-pressable\">{children}</View>\n        </TouchableNativeFeedback>\n      </View>\n    );\n  }\n  return (\n    <TouchableHighlight\n      underlayColor={pressableHightlightColor}\n      style={style}\n      {...(otherProps as any)}>\n      <View testID=\"generic-pressable\">{children}</View>\n    </TouchableHighlight>\n  );\n}\n"]},"metadata":{},"sourceType":"script"}