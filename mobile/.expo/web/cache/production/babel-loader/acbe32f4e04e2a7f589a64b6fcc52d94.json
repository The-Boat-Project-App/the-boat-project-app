{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}import React from'react';import Text from\"../components/primitives/Text\";export var addTextAndPropsToStrings=function addTextAndPropsToStrings(children,props){var childArray=React.Children.map(children,function(child){if(typeof child==='string'||typeof child==='number'){return React.createElement(Text,props,child);}else{if(!child){return null;}return React.cloneElement(child,_objectSpread(_objectSpread({},props),child.props));}});return childArray;};","map":{"version":3,"mappings":"w0BAAA,MAAOA,MAAP,KAAkB,OAAlB,CACA,MAAOC,KAAP,qCAEA,MAAO,IAAMC,yBAAwB,CAAG,QAA3BA,yBAA2B,CAACC,QAAD,CAAgBC,KAAhB,CAA+B,CACrE,GAAMC,WAAU,CAAGL,KAAK,CAACM,QAANN,CAAeO,GAAfP,CAAmBG,QAAnBH,CAA8BQ,cAAD,CAAW,CACzD,GAAI,MAAOA,MAAP,GAAiB,QAAjB,EAA6B,MAAOA,MAAP,GAAiB,QAAlD,CAA4D,CAC1D,MAAOR,qBAACC,IAAD,CAAUG,KAAV,CAAkBI,KAAlB,CAAP,CADF,KAEO,CACL,GAAI,CAACA,KAAL,CAAY,CACV,MAAO,KAAP,CACD,CACD,MAAOR,MAAK,CAACS,YAANT,CAAmBQ,KAAnBR,gCACFI,KADEJ,EAEFQ,KAAK,CAACJ,KAFJJ,EAAP,CAID,CAXgB,EAAnB,CAaA,MAAOK,WAAP,CAdK","names":["React","Text","addTextAndPropsToStrings","children","props","childArray","Children","map","child","cloneElement"],"sources":["addTextAndPropsToStrings.tsx"],"sourcesContent":["import React from 'react';\nimport Text from '../components/primitives/Text';\n\nexport const addTextAndPropsToStrings = (children: any, props: any) => {\n  const childArray = React.Children.map(children, (child) => {\n    if (typeof child === 'string' || typeof child === 'number') {\n      return <Text {...props}>{child}</Text>;\n    } else {\n      if (!child) {\n        return null;\n      }\n      return React.cloneElement(child, {\n        ...props,\n        ...child.props,\n      });\n    }\n  });\n  return childArray;\n};\n"]},"metadata":{},"sourceType":"module"}