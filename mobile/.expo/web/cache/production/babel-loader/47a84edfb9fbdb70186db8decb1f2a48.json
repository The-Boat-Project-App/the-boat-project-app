{"ast":null,"code":"'use strict';import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import invariant from'fbjs/lib/invariant';var EventSubscriptionVendor=function(){function EventSubscriptionVendor(){_classCallCheck(this,EventSubscriptionVendor);this._subscriptionsForType={};}_createClass(EventSubscriptionVendor,[{key:\"addSubscription\",value:function addSubscription(eventType,subscription){invariant(subscription.subscriber===this,'The subscriber of the subscription is incorrectly set.');if(!this._subscriptionsForType[eventType]){this._subscriptionsForType[eventType]=[];}var key=this._subscriptionsForType[eventType].length;this._subscriptionsForType[eventType].push(subscription);subscription.eventType=eventType;subscription.key=key;return subscription;}},{key:\"removeAllSubscriptions\",value:function removeAllSubscriptions(eventType){if(eventType==null){this._subscriptionsForType={};}else{delete this._subscriptionsForType[eventType];}}},{key:\"removeSubscription\",value:function removeSubscription(subscription){var eventType=subscription.eventType;var key=subscription.key;var subscriptionsForType=this._subscriptionsForType[eventType];if(subscriptionsForType){delete subscriptionsForType[key];}}},{key:\"getSubscriptionsForType\",value:function getSubscriptionsForType(eventType){return this._subscriptionsForType[eventType];}}]);return EventSubscriptionVendor;}();export default EventSubscriptionVendor;","map":{"version":3,"names":["invariant","EventSubscriptionVendor","_subscriptionsForType","eventType","subscription","subscriber","key","length","push","subscriptionsForType"],"sources":["/Users/matthieu/Documents/boatproject/node_modules/react-native-web/dist/vendor/react-native/emitter/_EventSubscriptionVendor.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n */\n'use strict';\n\nimport invariant from 'fbjs/lib/invariant';\n\n/**\n * EventSubscriptionVendor stores a set of EventSubscriptions that are\n * subscribed to a particular event type.\n */\nclass EventSubscriptionVendor {\n  constructor() {\n    this._subscriptionsForType = {};\n  }\n  /**\n   * Adds a subscription keyed by an event type.\n   *\n   * @param {string} eventType\n   * @param {EventSubscription} subscription\n   */\n\n\n  addSubscription(eventType, subscription) {\n    invariant(subscription.subscriber === this, 'The subscriber of the subscription is incorrectly set.');\n\n    if (!this._subscriptionsForType[eventType]) {\n      this._subscriptionsForType[eventType] = [];\n    }\n\n    var key = this._subscriptionsForType[eventType].length;\n\n    this._subscriptionsForType[eventType].push(subscription);\n\n    subscription.eventType = eventType;\n    subscription.key = key;\n    return subscription;\n  }\n  /**\n   * Removes a bulk set of the subscriptions.\n   *\n   * @param {?string} eventType - Optional name of the event type whose\n   *   registered supscriptions to remove, if null remove all subscriptions.\n   */\n\n\n  removeAllSubscriptions(eventType) {\n    if (eventType == null) {\n      this._subscriptionsForType = {};\n    } else {\n      delete this._subscriptionsForType[eventType];\n    }\n  }\n  /**\n   * Removes a specific subscription. Instead of calling this function, call\n   * `subscription.remove()` directly.\n   *\n   * @param {object} subscription\n   */\n\n\n  removeSubscription(subscription) {\n    var eventType = subscription.eventType;\n    var key = subscription.key;\n    var subscriptionsForType = this._subscriptionsForType[eventType];\n\n    if (subscriptionsForType) {\n      delete subscriptionsForType[key];\n    }\n  }\n  /**\n   * Returns the array of subscriptions that are currently registered for the\n   * given event type.\n   *\n   * Note: This array can be potentially sparse as subscriptions are deleted\n   * from it when they are removed.\n   *\n   * TODO: This returns a nullable array. wat?\n   *\n   * @param {string} eventType\n   * @returns {?array}\n   */\n\n\n  getSubscriptionsForType(eventType) {\n    return this._subscriptionsForType[eventType];\n  }\n\n}\n\nexport default EventSubscriptionVendor;"],"mappings":"AASA,a,gIAEA,MAAOA,UAAP,KAAsB,oBAAtB,C,GAMMC,wB,YACJ,kCAAc,+CACZ,KAAKC,qBAAL,CAA6B,EAA7B,CACD,C,mEASD,yBAAgBC,SAAhB,CAA2BC,YAA3B,CAAyC,CACvCJ,SAAS,CAACI,YAAY,CAACC,UAAb,GAA4B,IAA7B,CAAmC,wDAAnC,CAAT,CAEA,GAAI,CAAC,KAAKH,qBAAL,CAA2BC,SAA3B,CAAL,CAA4C,CAC1C,KAAKD,qBAAL,CAA2BC,SAA3B,EAAwC,EAAxC,CACD,CAED,GAAIG,IAAG,CAAG,KAAKJ,qBAAL,CAA2BC,SAA3B,EAAsCI,MAAhD,CAEA,KAAKL,qBAAL,CAA2BC,SAA3B,EAAsCK,IAAtC,CAA2CJ,YAA3C,EAEAA,YAAY,CAACD,SAAb,CAAyBA,SAAzB,CACAC,YAAY,CAACE,GAAb,CAAmBA,GAAnB,CACA,MAAOF,aAAP,CACD,C,sCASD,gCAAuBD,SAAvB,CAAkC,CAChC,GAAIA,SAAS,EAAI,IAAjB,CAAuB,CACrB,KAAKD,qBAAL,CAA6B,EAA7B,CACD,CAFD,IAEO,CACL,MAAO,MAAKA,qBAAL,CAA2BC,SAA3B,CAAP,CACD,CACF,C,kCASD,4BAAmBC,YAAnB,CAAiC,CAC/B,GAAID,UAAS,CAAGC,YAAY,CAACD,SAA7B,CACA,GAAIG,IAAG,CAAGF,YAAY,CAACE,GAAvB,CACA,GAAIG,qBAAoB,CAAG,KAAKP,qBAAL,CAA2BC,SAA3B,CAA3B,CAEA,GAAIM,oBAAJ,CAA0B,CACxB,MAAOA,qBAAoB,CAACH,GAAD,CAA3B,CACD,CACF,C,uCAeD,iCAAwBH,SAAxB,CAAmC,CACjC,MAAO,MAAKD,qBAAL,CAA2BC,SAA3B,CAAP,CACD,C,uCAIH,cAAeF,wBAAf"},"metadata":{},"sourceType":"module"}