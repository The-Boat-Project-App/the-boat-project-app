{"ast":null,"code":"import useWindowDimensions from\"react-native-web/dist/exports/useWindowDimensions\";import{getClosestBreakpoint,hasValidBreakpointFormat,findLastValidBreakpoint}from\"../theme/tools\";import{useTheme}from\"./../hooks/useTheme\";export function useBreakpointValue(values){var _useWindowDimensions;var windowWidth=(_useWindowDimensions=useWindowDimensions())===null||_useWindowDimensions===void 0?void 0:_useWindowDimensions.width;var theme=useTheme();if(hasValidBreakpointFormat(values,theme.breakpoints)){var currentBreakpoint=getClosestBreakpoint(theme.breakpoints,windowWidth);return findLastValidBreakpoint(values,theme.breakpoints,currentBreakpoint);}else{return values;}}","map":{"version":3,"mappings":"mFACA,OACEA,oBADF,CAEEC,wBAFF,CAGEC,uBAHF,sBAKA,OAASC,QAAT,2BAOA,MAAO,SAASC,mBAAT,CAA4BC,MAA5B,CAA6D,0BAClE,GAAIC,YAAW,uBAAGC,mBAAmB,EAAtB,+CAAGC,qBAAuBC,KAAzC,CACA,GAAMC,MAAK,CAAGP,QAAQ,EAAtB,CAEA,GAAIF,wBAAwB,CAACI,MAAD,CAASK,KAAK,CAACC,WAAf,CAA5B,CAAyD,CACvD,GAAIC,kBAAiB,CAAGZ,oBAAoB,CAC1CU,KAAK,CAACC,WADoC,CAE1CL,WAF0C,CAA5C,CAIA,MAAOJ,wBAAuB,CAC5BG,MAD4B,CAE5BK,KAAK,CAACC,WAFsB,CAG5BC,iBAH4B,CAA9B,CALF,KAUO,CACL,MAAOP,OAAP,CACD,CACF","names":["getClosestBreakpoint","hasValidBreakpointFormat","findLastValidBreakpoint","useTheme","useBreakpointValue","values","windowWidth","useWindowDimensions","_useWindowDimensions","width","theme","breakpoints","currentBreakpoint"],"sources":["useBreakpointValue.ts"],"sourcesContent":["import { useWindowDimensions } from 'react-native';\nimport {\n  getClosestBreakpoint,\n  hasValidBreakpointFormat,\n  findLastValidBreakpoint,\n} from '../theme/tools';\nimport { useTheme } from './../hooks/useTheme';\nimport type { ITheme } from '../theme/index';\n\ntype UseBreakpointValueParam =\n  | { [key in keyof ITheme['breakpoints']]?: any }\n  | Array<any>;\n\nexport function useBreakpointValue(values: UseBreakpointValueParam) {\n  let windowWidth = useWindowDimensions()?.width;\n  const theme = useTheme();\n\n  if (hasValidBreakpointFormat(values, theme.breakpoints)) {\n    let currentBreakpoint = getClosestBreakpoint(\n      theme.breakpoints,\n      windowWidth\n    );\n    return findLastValidBreakpoint(\n      values,\n      theme.breakpoints,\n      currentBreakpoint\n    );\n  } else {\n    return values;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}