{"ast":null,"code":"import{nanoid}from'nanoid/non-secure';export default function createMemoryHistory(){var index=0;var items=[];var pending=[];var interrupt=function interrupt(){pending.forEach(function(it){var cb=it.cb;it.cb=function(){return cb(true);};});};var history={get index(){var _window$history$state;var id=(_window$history$state=window.history.state)===null||_window$history$state===void 0?void 0:_window$history$state.id;if(id){var _index=items.findIndex(function(item){return item.id===id;});return _index>-1?_index:0;}return 0;},get:function get(index){return items[index];},backIndex:function backIndex(_ref){var path=_ref.path;for(var i=index-1;i>=0;i--){var item=items[i];if(item.path===path){return i;}}return-1;},push:function push(_ref2){var path=_ref2.path,state=_ref2.state;interrupt();var id=nanoid();items=items.slice(0,index+1);items.push({path:path,state:state,id:id});index=items.length-1;window.history.pushState({id:id},'',path);},replace:function replace(_ref3){var _window$history$state2,_window$history$state3;var path=_ref3.path,state=_ref3.state;interrupt();var id=(_window$history$state2=(_window$history$state3=window.history.state)===null||_window$history$state3===void 0?void 0:_window$history$state3.id)!==null&&_window$history$state2!==void 0?_window$history$state2:nanoid();if(!items.length||items.findIndex(function(item){return item.id===id;})<0){items=[{path:path,state:state,id:id}];index=0;}else{items[index]={path:path,state:state,id:id};}window.history.replaceState({id:id},'',path);},go:function go(n){interrupt();var nextIndex=index+n;var lastItemIndex=items.length-1;if(n<0&&!items[nextIndex]){n=-index;index=0;}else if(n>0&&nextIndex>lastItemIndex){n=lastItemIndex-index;index=lastItemIndex;}else{index=nextIndex;}if(n===0){return;}return new Promise(function(resolve,reject){var done=function done(interrupted){clearTimeout(timer);if(interrupted){reject(new Error('History was changed during navigation.'));return;}var title=window.document.title;window.document.title='';window.document.title=title;resolve();};pending.push({ref:done,cb:done});var timer=setTimeout(function(){var index=pending.findIndex(function(it){return it.ref===done;});if(index>-1){pending[index].cb();pending.splice(index,1);}},100);var onPopState=function onPopState(){var _window$history$state4;var id=(_window$history$state4=window.history.state)===null||_window$history$state4===void 0?void 0:_window$history$state4.id;var currentIndex=items.findIndex(function(item){return item.id===id;});index=Math.max(currentIndex,0);var last=pending.pop();window.removeEventListener('popstate',onPopState);last===null||last===void 0?void 0:last.cb();};window.addEventListener('popstate',onPopState);window.history.go(n);});},listen:function listen(listener){var onPopState=function onPopState(){if(pending.length){return;}listener();};window.addEventListener('popstate',onPopState);return function(){return window.removeEventListener('popstate',onPopState);};}};return history;}","map":{"version":3,"mappings":"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","names":["nanoid","createMemoryHistory","index","items","pending","interrupt","forEach","it","cb","history","id","window","state","_window$history$state","findIndex","item","get","backIndex","_ref","path","i","push","_ref2","slice","length","pushState","replace","_ref3","_window$history$state3","replaceState","go","n","nextIndex","lastItemIndex","Promise","resolve","reject","done","interrupted","clearTimeout","timer","Error","title","document","ref","setTimeout","splice","onPopState","_window$history$state4","currentIndex","Math","max","last","pop","removeEventListener","addEventListener","listen","listener"],"sources":["createMemoryHistory.tsx"],"sourcesContent":["import type { NavigationState } from '@react-navigation/core';\nimport { nanoid } from 'nanoid/non-secure';\n\ntype HistoryRecord = {\n  // Unique identifier for this record to match it with window.history.state\n  id: string;\n  // Navigation state object for the history entry\n  state: NavigationState;\n  // Path of the history entry\n  path: string;\n};\n\nexport default function createMemoryHistory() {\n  let index = 0;\n  let items: HistoryRecord[] = [];\n\n  // Pending callbacks for `history.go(n)`\n  // We might modify the callback stored if it was interrupted, so we have a ref to identify it\n  const pending: { ref: unknown; cb: (interrupted?: boolean) => void }[] = [];\n\n  const interrupt = () => {\n    // If another history operation was performed we need to interrupt existing ones\n    // This makes sure that calls such as `history.replace` after `history.go` don't happen\n    // Since otherwise it won't be correct if something else has changed\n    pending.forEach((it) => {\n      const cb = it.cb;\n      it.cb = () => cb(true);\n    });\n  };\n\n  const history = {\n    get index(): number {\n      // We store an id in the state instead of an index\n      // Index could get out of sync with in-memory values if page reloads\n      const id = window.history.state?.id;\n\n      if (id) {\n        const index = items.findIndex((item) => item.id === id);\n\n        return index > -1 ? index : 0;\n      }\n\n      return 0;\n    },\n\n    get(index: number) {\n      return items[index];\n    },\n\n    backIndex({ path }: { path: string }) {\n      // We need to find the index from the element before current to get closest path to go back to\n      for (let i = index - 1; i >= 0; i--) {\n        const item = items[i];\n\n        if (item.path === path) {\n          return i;\n        }\n      }\n\n      return -1;\n    },\n\n    push({ path, state }: { path: string; state: NavigationState }) {\n      interrupt();\n\n      const id = nanoid();\n\n      // When a new entry is pushed, all the existing entries after index will be inaccessible\n      // So we remove any existing entries after the current index to clean them up\n      items = items.slice(0, index + 1);\n\n      items.push({ path, state, id });\n      index = items.length - 1;\n\n      // We pass empty string for title because it's ignored in all browsers except safari\n      // We don't store state object in history.state because:\n      // - browsers have limits on how big it can be, and we don't control the size\n      // - while not recommended, there could be non-serializable data in state\n      window.history.pushState({ id }, '', path);\n    },\n\n    replace({ path, state }: { path: string; state: NavigationState }) {\n      interrupt();\n\n      const id = window.history.state?.id ?? nanoid();\n\n      if (!items.length || items.findIndex((item) => item.id === id) < 0) {\n        // There are two scenarios for creating an array with only one history record:\n        // - When loaded id not found in the items array, this function by default will replace\n        //   the first item. We need to keep only the new updated object, otherwise it will break\n        //   the page when navigating forward in history.\n        // - This is the first time any state modifications are done\n        //   So we need to push the entry as there's nothing to replace\n        items = [{ path, state, id }];\n        index = 0;\n      } else {\n        items[index] = { path, state, id };\n      }\n\n      window.history.replaceState({ id }, '', path);\n    },\n\n    // `history.go(n)` is asynchronous, there are couple of things to keep in mind:\n    // - it won't do anything if we can't go `n` steps, the `popstate` event won't fire.\n    // - each `history.go(n)` call will trigger a separate `popstate` event with correct location.\n    // - the `popstate` event fires before the next frame after calling `history.go(n)`.\n    // This method differs from `history.go(n)` in the sense that it'll go back as many steps it can.\n    go(n: number) {\n      interrupt();\n\n      // To guard against unexpected navigation out of the app we will assume that browser history is only as deep as the length of our memory\n      // history. If we don't have an item to navigate to then update our index and navigate as far as we can without taking the user out of the app.\n      const nextIndex = index + n;\n      const lastItemIndex = items.length - 1;\n      if (n < 0 && !items[nextIndex]) {\n        // Attempted to navigate beyond the first index. Negating the current index will align the browser history with the first item.\n        n = -index;\n        index = 0;\n      } else if (n > 0 && nextIndex > lastItemIndex) {\n        // Attempted to navigate past the last index. Calculate how many indices away from the last index and go there.\n        n = lastItemIndex - index;\n        index = lastItemIndex;\n      } else {\n        index = nextIndex;\n      }\n\n      if (n === 0) {\n        return;\n      }\n\n      // When we call `history.go`, `popstate` will fire when there's history to go back to\n      // So we need to somehow handle following cases:\n      // - There's history to go back, `history.go` is called, and `popstate` fires\n      // - `history.go` is called multiple times, we need to resolve on respective `popstate`\n      // - No history to go back, but `history.go` was called, browser has no API to detect it\n      return new Promise<void>((resolve, reject) => {\n        const done = (interrupted?: boolean) => {\n          clearTimeout(timer);\n\n          if (interrupted) {\n            reject(new Error('History was changed during navigation.'));\n            return;\n          }\n\n          // There seems to be a bug in Chrome regarding updating the title\n          // If we set a title just before calling `history.go`, the title gets lost\n          // However the value of `document.title` is still what we set it to\n          // It's just not displayed in the tab bar\n          // To update the tab bar, we need to reset the title to something else first (e.g. '')\n          // And set the title to what it was before so it gets applied\n          // It won't work without setting it to empty string coz otherwise title isn't changing\n          // Which means that the browser won't do anything after setting the title\n          const { title } = window.document;\n\n          window.document.title = '';\n          window.document.title = title;\n\n          resolve();\n        };\n\n        pending.push({ ref: done, cb: done });\n\n        // If navigation didn't happen within 100ms, assume that it won't happen\n        // This may not be accurate, but hopefully it won't take so much time\n        // In Chrome, navigation seems to happen instantly in next microtask\n        // But on Firefox, it seems to take much longer, around 50ms from our testing\n        // We're using a hacky timeout since there doesn't seem to be way to know for sure\n        const timer = setTimeout(() => {\n          const index = pending.findIndex((it) => it.ref === done);\n\n          if (index > -1) {\n            pending[index].cb();\n            pending.splice(index, 1);\n          }\n        }, 100);\n\n        const onPopState = () => {\n          const id = window.history.state?.id;\n          const currentIndex = items.findIndex((item) => item.id === id);\n\n          // Fix createMemoryHistory.index variable's value\n          // as it may go out of sync when navigating in the browser.\n          index = Math.max(currentIndex, 0);\n\n          const last = pending.pop();\n\n          window.removeEventListener('popstate', onPopState);\n          last?.cb();\n        };\n\n        window.addEventListener('popstate', onPopState);\n        window.history.go(n);\n      });\n    },\n\n    // The `popstate` event is triggered when history changes, except `pushState` and `replaceState`\n    // If we call `history.go(n)` ourselves, we don't want it to trigger the listener\n    // Here we normalize it so that only external changes (e.g. user pressing back/forward) trigger the listener\n    listen(listener: () => void) {\n      const onPopState = () => {\n        if (pending.length) {\n          // This was triggered by `history.go(n)`, we shouldn't call the listener\n          return;\n        }\n\n        listener();\n      };\n\n      window.addEventListener('popstate', onPopState);\n\n      return () => window.removeEventListener('popstate', onPopState);\n    },\n  };\n\n  return history;\n}\n"]},"metadata":{},"sourceType":"module"}