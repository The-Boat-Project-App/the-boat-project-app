{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}import{useEffect}from'react';import{useFocusWithin}from'@react-aria/interactions';var visibleOverlays=[];export function useOverlay(props,ref){var onClose=props.onClose,shouldCloseOnBlur=props.shouldCloseOnBlur,isOpen=props.isOpen,_props$isKeyboardDism=props.isKeyboardDismissDisabled,isKeyboardDismissDisabled=_props$isKeyboardDism===void 0?false:_props$isKeyboardDism;useEffect(function(){if(isOpen){visibleOverlays.push(ref);}return function(){var index=visibleOverlays.indexOf(ref);if(index>=0){visibleOverlays.splice(index,1);}};},[isOpen,ref]);var onHide=function onHide(){if(visibleOverlays[visibleOverlays.length-1]===ref&&onClose){onClose();}};var onKeyDown=function onKeyDown(e){if(e.key==='Escape'&&!isKeyboardDismissDisabled){e.preventDefault();onHide();}};var _useFocusWithin=useFocusWithin({isDisabled:!shouldCloseOnBlur,onBlurWithin:function onBlurWithin(){onClose&&onClose();}}),focusWithinProps=_useFocusWithin.focusWithinProps;return{overlayProps:_objectSpread({onKeyDown:onKeyDown},focusWithinProps)};}","map":{"version":3,"mappings":"w0BAAA,OAAoCA,SAApC,KAAqD,OAArD,CACA,OAASC,cAAT,KAA+B,0BAA/B,CAsCA,GAAMC,gBAAyC,CAAG,EAAlD,CAOA,MAAO,SAASC,WAAT,CACLC,KADK,CAELC,GAFK,CAGQ,CACb,GACEC,QADF,CAKIF,KALJ,CACEE,OADF,CAEEC,iBAFF,CAKIH,KALJ,CAEEG,iBAFF,CAGEC,MAHF,CAKIJ,KALJ,CAGEI,MAHF,uBAKIJ,KALJ,CAIEK,yBAJF,CAIEA,yBAJF,gCAI8B,KAJ9B,uBAQAT,SAAS,CAAC,UAAM,CACd,GAAIQ,MAAJ,CAAY,CACVN,eAAe,CAACQ,IAAhBR,CAAqBG,GAArBH,EACD,CAED,MAAO,WAAM,CACX,GAAIS,MAAK,CAAGT,eAAe,CAACU,OAAhBV,CAAwBG,GAAxBH,CAAZ,CACA,GAAIS,KAAK,EAAI,CAAb,CAAgB,CACdT,eAAe,CAACW,MAAhBX,CAAuBS,KAAvBT,CAA8B,CAA9BA,EACD,CAJH,EALO,EAWN,CAACM,MAAD,CAASH,GAAT,CAXM,CAATL,CAcA,GAAIc,OAAM,CAAG,QAATA,OAAS,EAAM,CACjB,GAAIZ,eAAe,CAACA,eAAe,CAACa,MAAhBb,CAAyB,CAA1B,CAAfA,GAAgDG,GAAhDH,EAAuDI,OAA3D,CAAoE,CAClEA,OAAO,GACR,CAHH,EAOA,GAAIU,UAAS,CAAIC,QAAbD,UAAaC,EAAD,CAAY,CAC1B,GAAIA,CAAC,CAACC,GAAFD,GAAU,QAAVA,EAAsB,CAACR,yBAA3B,CAAsD,CACpDQ,CAAC,CAACE,cAAFF,GACAH,MAAM,GACP,CAJH,EASA,oBAA2Bb,cAAc,CAAC,CACxCmB,UAAU,CAAE,CAACb,iBAD2B,CAExCc,YAAY,CAAE,uBAAM,CAClBf,OAAO,EAAIA,OAAO,EAAlBA,CACD,CAJuC,CAAD,CAAzC,CAAMgB,gBAAN,iBAAMA,gBAAN,CAOA,MAAO,CACLC,YAAY,gBACVP,SADY,CACZA,SADU,EAEPM,gBAFO,CADP,CAAP,CAMD","names":["useEffect","useFocusWithin","visibleOverlays","useOverlay","props","ref","onClose","shouldCloseOnBlur","isOpen","isKeyboardDismissDisabled","push","index","indexOf","splice","onHide","length","onKeyDown","e","key","preventDefault","isDisabled","onBlurWithin","focusWithinProps","overlayProps"],"sources":["useOverlay.web.ts"],"sourcesContent":["import { HTMLAttributes, RefObject, useEffect } from 'react';\nimport { useFocusWithin } from '@react-aria/interactions';\n\ninterface OverlayProps {\n  /** Whether the overlay is currently open. */\n  isOpen?: boolean;\n\n  /** Handler that is called when the overlay should close. */\n  onClose?: () => void;\n\n  /**\n   * Whether to close the overlay when the user interacts outside it.\n   * @default false\n   */\n  isDismissable?: boolean;\n\n  /** Whether the overlay should close when focus is lost or moves outside it. */\n  shouldCloseOnBlur?: boolean;\n\n  /**\n   * Whether pressing the escape key to close the overlay should be disabled.\n   * @default false\n   */\n  isKeyboardDismissDisabled?: boolean;\n\n  /**\n   * When user interacts with the argument element outside of the overlay ref,\n   * return true if onClose should be called.  This gives you a chance to filter\n   * out interaction with elements that should not dismiss the overlay.\n   * By default, onClose will always be called on interaction outside the overlay ref.\n   */\n  shouldCloseOnInteractOutside?: (element: HTMLElement) => boolean;\n}\n\ninterface OverlayAria {\n  /** Props to apply to the overlay container element. */\n  overlayProps: HTMLAttributes<HTMLElement>;\n}\n\nconst visibleOverlays: RefObject<HTMLElement>[] = [];\n\n/**\n * Provides the behavior for overlays such as dialogs, popovers, and menus.\n * Hides the overlay when the user interacts outside it, when the Escape key is pressed,\n * or optionally, on blur. Only the top-most overlay will close at once.\n */\nexport function useOverlay(\n  props: OverlayProps,\n  ref: RefObject<HTMLElement>\n): OverlayAria {\n  let {\n    onClose,\n    shouldCloseOnBlur,\n    isOpen,\n    isKeyboardDismissDisabled = false,\n  } = props;\n\n  // Add the overlay ref to the stack of visible overlays on mount, and remove on unmount.\n  useEffect(() => {\n    if (isOpen) {\n      visibleOverlays.push(ref);\n    }\n\n    return () => {\n      let index = visibleOverlays.indexOf(ref);\n      if (index >= 0) {\n        visibleOverlays.splice(index, 1);\n      }\n    };\n  }, [isOpen, ref]);\n\n  // Only hide the overlay when it is the topmost visible overlay in the stack.\n  let onHide = () => {\n    if (visibleOverlays[visibleOverlays.length - 1] === ref && onClose) {\n      onClose();\n    }\n  };\n\n  // Handle the escape key\n  let onKeyDown = (e: any) => {\n    if (e.key === 'Escape' && !isKeyboardDismissDisabled) {\n      e.preventDefault();\n      onHide();\n    }\n  };\n\n  // Handle clicking outside the overlay to close it\n\n  let { focusWithinProps } = useFocusWithin({\n    isDisabled: !shouldCloseOnBlur,\n    onBlurWithin: () => {\n      onClose && onClose();\n    },\n  });\n\n  return {\n    overlayProps: {\n      onKeyDown,\n      ...focusWithinProps,\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"module"}