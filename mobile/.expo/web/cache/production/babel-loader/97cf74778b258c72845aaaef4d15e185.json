{"ast":null,"code":"function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import React,{memo,forwardRef}from'react';import Box from\"../../primitives/Box\";import{usePropsResolution}from\"../../../hooks\";import{ModalContext}from\"./Context\";import Platform from\"react-native-web/dist/exports/Platform\";import{useHasResponsiveProps}from\"../../../hooks/useHasResponsiveProps\";var ModalContent=function ModalContent(props,ref){var resolvedProps=usePropsResolution('ModalContent',props);var _React$useContext=React.useContext(ModalContext),contentSize=_React$useContext.contentSize,initialFocusRef=_React$useContext.initialFocusRef,finalFocusRef=_React$useContext.finalFocusRef,handleClose=_React$useContext.handleClose,visible=_React$useContext.visible;React.useEffect(function(){var finalRefVal=finalFocusRef?finalFocusRef.current:null;if(visible){if(initialFocusRef&&initialFocusRef.current){initialFocusRef.current.focus();}}else{if(finalRefVal){finalRefVal.focus();}}},[initialFocusRef,finalFocusRef,visible]);if(useHasResponsiveProps(props)){return null;}return React.createElement(Box,_extends({},contentSize,resolvedProps,{ref:ref,onAccessibilityEscape:handleClose,\"aria-modal\":\"true\",accessibilityRole:Platform.OS==='web'?'dialog':undefined,accessibilityViewIsModal:true,_web:{focusable:false}}));};export default memo(forwardRef(ModalContent));","map":{"version":3,"mappings":"uRAAA,MAAOA,MAAP,EAAgBC,IAAhB,CAAsBC,UAAtB,KAAwC,OAAxC,CACA,MAAOC,IAAP,4BACA,OAASC,kBAAT,sBACA,OAASC,YAAT,iB,6DAEA,OAASC,qBAAT,4CAEA,GAAMC,aAAY,CAAG,QAAfA,aAAe,CAACC,KAAD,CAAmBC,GAAnB,CAAiC,CACpD,GAAMC,cAAa,CAAGN,kBAAkB,CAAC,cAAD,CAAiBI,KAAjB,CAAxC,CACA,sBAMIR,KAAK,CAACW,UAANX,CAAiBK,YAAjBL,CANJ,CACEY,WADF,mBACEA,WADF,CAEEC,eAFF,mBAEEA,eAFF,CAGEC,aAHF,mBAGEA,aAHF,CAIEC,WAJF,mBAIEA,WAJF,CAKEC,OALF,mBAKEA,OALF,CAOAhB,KAAK,CAACiB,SAANjB,CAAgB,UAAM,CACpB,GAAMkB,YAAW,CAAGJ,aAAa,CAAGA,aAAa,CAACK,OAAjB,CAA2B,IAA5D,CACA,GAAIH,OAAJ,CAAa,CACX,GAAIH,eAAe,EAAIA,eAAe,CAACM,OAAvC,CAAgD,CAE9CN,eAAe,CAACM,OAAhBN,CAAwBO,KAAxBP,GACD,CAJH,KAKO,CACL,GAAIK,WAAJ,CAAiB,CAEfA,WAAW,CAACE,KAAZF,GACD,CACF,CAZH,EAaG,CAACL,eAAD,CAAkBC,aAAlB,CAAiCE,OAAjC,CAbHhB,EAgBA,GAAIM,qBAAqB,CAACE,KAAD,CAAzB,CAAkC,CAChC,MAAO,KAAP,CACD,CACD,MACER,qBAACG,GAAD,aACMS,WADN,CAEMF,aAFN,EAGED,GAAG,CAAEA,GAHP,CAIEY,qBAAqB,CAAEN,WAJzB,CAME,aAAW,MANb,CAQEO,iBAAiB,CAAEC,QAAQ,CAACC,EAATD,GAAgB,KAAhBA,CAAwB,QAAxBA,CAAmCE,SARxD,CASEC,wBAAwB,KAT1B,CAUEC,IAAI,CAAE,CAAEC,SAAS,CAAE,KAAb,CAVR,GADF,CA5BF,EA4CA,cAAe3B,KAAI,CAACC,UAAU,CAACK,YAAD,CAAX,CAAnB","names":["React","memo","forwardRef","Box","usePropsResolution","ModalContext","useHasResponsiveProps","ModalContent","props","ref","resolvedProps","useContext","contentSize","initialFocusRef","finalFocusRef","handleClose","visible","useEffect","finalRefVal","current","focus","onAccessibilityEscape","accessibilityRole","Platform","OS","undefined","accessibilityViewIsModal","_web","focusable"],"sources":["ModalContent.tsx"],"sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport Box, { IBoxProps } from '../../primitives/Box';\nimport { usePropsResolution } from '../../../hooks';\nimport { ModalContext } from './Context';\nimport { Platform } from 'react-native';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst ModalContent = (props: IBoxProps, ref?: any) => {\n  const resolvedProps = usePropsResolution('ModalContent', props);\n  const {\n    contentSize,\n    initialFocusRef,\n    finalFocusRef,\n    handleClose,\n    visible,\n  } = React.useContext(ModalContext);\n  React.useEffect(() => {\n    const finalRefVal = finalFocusRef ? finalFocusRef.current : null;\n    if (visible) {\n      if (initialFocusRef && initialFocusRef.current) {\n        //@ts-ignore\n        initialFocusRef.current.focus();\n      }\n    } else {\n      if (finalRefVal) {\n        //@ts-ignore\n        finalRefVal.focus();\n      }\n    }\n  }, [initialFocusRef, finalFocusRef, visible]);\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <Box\n      {...contentSize}\n      {...resolvedProps}\n      ref={ref}\n      onAccessibilityEscape={handleClose}\n      //@ts-ignore - web only\n      aria-modal=\"true\"\n      //@ts-ignore - web only\n      accessibilityRole={Platform.OS === 'web' ? 'dialog' : undefined}\n      accessibilityViewIsModal\n      _web={{ focusable: false }}\n    />\n  );\n};\n\nexport default memo(forwardRef(ModalContent));\n"]},"metadata":{},"sourceType":"module"}