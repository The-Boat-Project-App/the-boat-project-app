{"ast":null,"code":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:true});exports.getIMGState=getIMGState;var _extractImageStyleProps=_interopRequireDefault(require(\"./extractImageStyleProps\"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function getIMGState(_ref){var error=_ref.error,alt=_ref.alt,altColor=_ref.altColor,source=_ref.source,containerStyle=_ref.containerStyle,concreteDimensions=_ref.concreteDimensions,initialDimensions=_ref.initialDimensions,objectFit=_ref.objectFit,onError=_ref.onError;if(error){return{type:'error',alt:alt,altColor:altColor,source:source,error:error,containerStyle:containerStyle,dimensions:concreteDimensions!==null&&concreteDimensions!==void 0?concreteDimensions:initialDimensions};}if(concreteDimensions!=null){return{type:'success',alt:alt,altColor:altColor,source:source,onError:onError,containerStyle:containerStyle,imageStyle:(0,_extractImageStyleProps.default)(containerStyle,objectFit),dimensions:concreteDimensions};}return{type:'loading',alt:alt,altColor:altColor,source:source,containerStyle:containerStyle,dimensions:initialDimensions};}","map":{"version":3,"mappings":"sGAQA,2KAiBO,QAASA,YAAT,MAUiC,IATtCC,MASsC,MATtCA,KASsC,CARtCC,GAQsC,MARtCA,GAQsC,CAPtCC,QAOsC,MAPtCA,QAOsC,CANtCC,MAMsC,MANtCA,MAMsC,CALtCC,cAKsC,MALtCA,cAKsC,CAJtCC,kBAIsC,MAJtCA,kBAIsC,CAHtCC,iBAGsC,MAHtCA,iBAGsC,CAFtCC,SAEsC,MAFtCA,SAEsC,CADtCC,OACsC,MADtCA,OACsC,CACtC,GAAIR,KAAJ,CAAW,CACT,MAAO,CACLS,IAAI,CAAE,OADD,CAELR,GAFK,CAELA,GAFK,CAGLC,QAHK,CAGLA,QAHK,CAILC,MAJK,CAILA,MAJK,CAKLH,KALK,CAKLA,KALK,CAMLI,cANK,CAMLA,cANK,CAOLM,UAAU,CAAEL,kBAAF,OAAEA,oBAAF,SAAEA,oBAAsBC,iBAP7B,CAAP,CASD,CACD,GAAID,kBAAkB,EAAI,IAA1B,CAAgC,CAC9B,MAAO,CACLI,IAAI,CAAE,SADD,CAELR,GAFK,CAELA,GAFK,CAGLC,QAHK,CAGLA,QAHK,CAILC,MAJK,CAILA,MAJK,CAKLK,OALK,CAKLA,OALK,CAMLJ,cANK,CAMLA,cANK,CAOLO,UAAU,CAAE,oCAAuBP,cAAvB,CAAuCG,SAAvC,CAPP,CAQLG,UAAU,CAAEL,kBARP,CAAP,CAUD,CACD,MAAO,CACLI,IAAI,CAAE,SADD,CAELR,GAFK,CAELA,GAFK,CAGLC,QAHK,CAGLA,QAHK,CAILC,MAJK,CAILA,MAJK,CAKLC,cALK,CAKLA,cALK,CAMLM,UAAU,CAAEJ,iBANP,CAAP,CAQD","names":["getIMGState","error","alt","altColor","source","containerStyle","concreteDimensions","initialDimensions","objectFit","onError","type","dimensions","imageStyle"],"sources":["getIMGState.ts"],"sourcesContent":["import type {\n  UseIMGElementStateProps,\n  IMGElementState,\n  IMGElementStateBase,\n  IMGElementStateError,\n  IMGElementStateSuccess,\n  IMGElementStateLoading\n} from './img-types';\nimport extractImageStyleProps from './extractImageStyleProps';\nimport { ImageDimensions } from '../shared-types';\n\ninterface GetStateProps<C> extends Omit<IMGElementStateBase, 'dimensions'> {\n  concreteDimensions: C;\n  error: Error | null;\n  initialDimensions: ImageDimensions;\n  objectFit: UseIMGElementStateProps['objectFit'];\n  onError?: (e: Error) => void;\n}\n\nexport function getIMGState(\n  props: GetStateProps<ImageDimensions>\n): IMGElementStateError | IMGElementStateSuccess;\nexport function getIMGState(\n  props: GetStateProps<null | ImageDimensions>\n): IMGElementState;\nexport function getIMGState({\n  error,\n  alt,\n  altColor,\n  source,\n  containerStyle,\n  concreteDimensions,\n  initialDimensions,\n  objectFit,\n  onError\n}: GetStateProps<any>): IMGElementState {\n  if (error) {\n    return {\n      type: 'error',\n      alt,\n      altColor,\n      source,\n      error,\n      containerStyle,\n      dimensions: concreteDimensions ?? initialDimensions\n    };\n  }\n  if (concreteDimensions != null) {\n    return {\n      type: 'success',\n      alt,\n      altColor,\n      source,\n      onError,\n      containerStyle,\n      imageStyle: extractImageStyleProps(containerStyle, objectFit),\n      dimensions: concreteDimensions\n    } as IMGElementStateSuccess;\n  }\n  return {\n    type: 'loading',\n    alt,\n    altColor,\n    source,\n    containerStyle,\n    dimensions: initialDimensions\n  } as IMGElementStateLoading;\n}\n"]},"metadata":{},"sourceType":"script"}