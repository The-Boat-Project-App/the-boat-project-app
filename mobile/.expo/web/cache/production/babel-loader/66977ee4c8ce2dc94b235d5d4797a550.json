{"ast":null,"code":"var isErrorHandlingEnabled=true;var developmentBuildMessage=\"If you're trying to use a module that is not supported in Expo Go, you need to create a development build of your app. See https://docs.expo.dev/development/introduction/ for more info.\";function customizeUnavailableMessage(error){error.message+='\\n\\n'+developmentBuildMessage;}function customizeModuleIsMissingMessage(error){error.message=\"Your JavaScript code tried to access a native module that doesn't exist. \\n\\n\"+developmentBuildMessage;}function customizeError(error){if('code'in error&&error.code==='ERR_UNAVAILABLE'){customizeUnavailableMessage(error);}else if(error.message.includes('Native module cannot be null')||error.message.includes('`new NativeEventEmitter()` requires a non-null argument.')){customizeModuleIsMissingMessage(error);}}function errorHandler(originalHandler,error,isFatal){if(error instanceof Error){customizeError(error);}originalHandler(error,isFatal);}export function createErrorHandler(originalHandler){return function(error,isFatal){if(isErrorHandlingEnabled){errorHandler(originalHandler,error,isFatal);return;}originalHandler(error,isFatal);};}export function disableErrorHandling(){isErrorHandlingEnabled=false;}","map":{"version":3,"mappings":"AAGA,GAAIA,uBAAsB,CAAG,IAA7B,CAEA,GAAMC,wBAAuB,4LAA7B,CAEA,QAASC,4BAAT,CAAqCC,KAArC,CAAsD,CACpDA,KAAK,CAACC,OAAN,EAAiB,OAASH,uBAA1B,CACD,CAED,QAASI,gCAAT,CAAyCF,KAAzC,CAAqD,CACnDA,KAAK,CAACC,OAAN,iFAEAH,uBAFA,CAGD,CAED,QAASK,eAAT,CAAwBH,KAAxB,CAAiD,CAC/C,GAAI,QAAUA,MAAV,EAAmBA,KAAK,CAACI,IAAN,GAAe,iBAAtC,CAAyD,CACvDL,2BAA2B,CAACC,KAAD,CAA3B,CACD,CAFD,IAEO,IACLA,KAAK,CAACC,OAAN,CAAcI,QAAd,CAAuB,8BAAvB,GACAL,KAAK,CAACC,OAAN,CAAcI,QAAd,CAAuB,0DAAvB,CAFK,CAGL,CACAH,+BAA+B,CAACF,KAAD,CAA/B,CACD,CACF,CAED,QAASM,aAAT,CAAsBC,eAAtB,CAAuCP,KAAvC,CAA8CQ,OAA9C,CAAqD,CACnD,GAAIR,KAAK,WAAYS,MAArB,CAA4B,CAC1BN,cAAc,CAACH,KAAD,CAAd,CACD,CACDO,eAAe,CAACP,KAAD,CAAQQ,OAAR,CAAf,CACD,CAED,MAAM,SAAUE,mBAAV,CAA6BH,eAA7B,CAA4C,CAChD,MAAO,UAACP,KAAD,CAAQQ,OAAR,CAAmB,CACxB,GAAIX,sBAAJ,CAA4B,CAC1BS,YAAY,CAACC,eAAD,CAAkBP,KAAlB,CAAyBQ,OAAzB,CAAZ,CACA,OACD,CAEDD,eAAe,CAACP,KAAD,CAAQQ,OAAR,CAAf,CACD,CAPD,CAQD,CAED,MAAM,SAAUG,qBAAV,EAA8B,CAClCd,sBAAsB,CAAG,KAAzB,CACD","names":["isErrorHandlingEnabled","developmentBuildMessage","customizeUnavailableMessage","error","message","customizeModuleIsMissingMessage","customizeError","code","includes","errorHandler","originalHandler","isFatal","Error","createErrorHandler","disableErrorHandling"],"sourceRoot":"","sources":["../../src/errors/ExpoErrorManager.ts"],"sourcesContent":["// Similar interface to the one used in expo modules.\ntype CodedError = Error & { code?: string };\n\nlet isErrorHandlingEnabled = true;\n\nconst developmentBuildMessage = `If you're trying to use a module that is not supported in Expo Go, you need to create a development build of your app. See https://docs.expo.dev/development/introduction/ for more info.`;\n\nfunction customizeUnavailableMessage(error: CodedError) {\n  error.message += '\\n\\n' + developmentBuildMessage;\n}\n\nfunction customizeModuleIsMissingMessage(error: Error) {\n  error.message = `Your JavaScript code tried to access a native module that doesn't exist. \n\n${developmentBuildMessage}`;\n}\n\nfunction customizeError(error: Error | CodedError) {\n  if ('code' in error && error.code === 'ERR_UNAVAILABLE') {\n    customizeUnavailableMessage(error);\n  } else if (\n    error.message.includes('Native module cannot be null') || // RN 0.64 and below message\n    error.message.includes('`new NativeEventEmitter()` requires a non-null argument.') // RN 0.65+ message\n  ) {\n    customizeModuleIsMissingMessage(error);\n  }\n}\n\nfunction errorHandler(originalHandler, error, isFatal) {\n  if (error instanceof Error) {\n    customizeError(error);\n  }\n  originalHandler(error, isFatal);\n}\n\nexport function createErrorHandler(originalHandler) {\n  return (error, isFatal) => {\n    if (isErrorHandlingEnabled) {\n      errorHandler(originalHandler, error, isFatal);\n      return;\n    }\n\n    originalHandler(error, isFatal);\n  };\n}\n\nexport function disableErrorHandling() {\n  isErrorHandlingEnabled = false;\n}\n"]},"metadata":{},"sourceType":"module"}