{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"as\",\"size\"];function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import React,{memo,forwardRef}from'react';import{useToken,usePropsResolution}from\"../../../hooks\";import SVGIcon from\"./SVGIcon\";import{Factory}from\"../../../factory\";import{useHasResponsiveProps}from\"../../../hooks/useHasResponsiveProps\";var Icon=function Icon(props,ref){var _usePropsResolution=usePropsResolution('Icon',props),as=_usePropsResolution.as,size=_usePropsResolution.size,resolvedProps=_objectWithoutProperties(_usePropsResolution,_excluded);var tokenizedFontSize=useToken('space',size);if(useHasResponsiveProps(props)){return null;}if(!as){return React.createElement(SVGIcon,_extends({size:size},resolvedProps,{ref:ref}));}var isJSX=React.isValidElement(as);var StyledAs=Factory(isJSX?function(resolvedProps){return React.cloneElement(as,_objectSpread(_objectSpread({},resolvedProps),as.props));}:as);return React.createElement(StyledAs,_extends({},resolvedProps,{fontSize:tokenizedFontSize,lineHeight:tokenizedFontSize,size:size,ref:ref}));};export default memo(forwardRef(Icon));","map":{"version":3,"mappings":"gtCAAA,MAAOA,MAAP,EAAgBC,IAAhB,CAAsBC,UAAtB,KAAwC,OAAxC,CACA,OAASC,QAAT,CAAmBC,kBAAnB,sBAEA,MAAOC,QAAP,iBACA,OAASC,OAAT,wBACA,OAASC,qBAAT,4CAEA,GAAMC,KAAI,CAAG,QAAPA,KAAO,CAACC,KAAD,CAAoBC,GAApB,CAAkC,CAC7C,wBAAuCN,kBAAkB,CAAC,MAAD,CAASK,KAAT,CAAzD,CAAQE,EAAR,qBAAQA,EAAR,CAAYC,IAAZ,qBAAYA,IAAZ,CAAqBC,aAArB,yDACA,GAAMC,kBAAiB,CAAGX,QAAQ,CAAC,OAAD,CAAUS,IAAV,CAAlC,CAEA,GAAIL,qBAAqB,CAACE,KAAD,CAAzB,CAAkC,CAChC,MAAO,KAAP,CACD,CACD,GAAI,CAACE,EAAL,CAAS,CACP,MAAOX,qBAACK,OAAD,WAASO,IAAI,CAAEA,IAAf,EAAyBC,aAAzB,EAAwCH,GAAG,CAAEA,GAA7C,GAAP,CACD,CACD,GAAMK,MAAK,CAAGf,KAAK,CAACgB,cAANhB,CAAqBW,EAArBX,CAAd,CACA,GAAMiB,SAAQ,CAAGX,OAAO,CACtBS,KAAK,CACAF,sBAAD,QACEb,MAAK,CAACkB,YAANlB,CAAmBW,EAAnBX,gCACKa,aADLb,EAGKW,EAAE,CAACF,KAHRT,EADF,EADC,CAODW,EARkB,CAAxB,CAWA,MACEX,qBAACiB,QAAD,aACMJ,aADN,EAEEM,QAAQ,CAAEL,iBAFZ,CAGEM,UAAU,CAAEN,iBAHd,CAIEF,IAAI,CAAEA,IAJR,CAKEF,GAAG,CAAEA,GALP,GADF,CAtBF,EAiCA,cAAeT,KAAI,CAACC,UAAU,CAACM,IAAD,CAAX,CAAnB","names":["React","memo","forwardRef","useToken","usePropsResolution","SVGIcon","Factory","useHasResponsiveProps","Icon","props","ref","as","size","resolvedProps","tokenizedFontSize","isJSX","isValidElement","StyledAs","cloneElement","fontSize","lineHeight"],"sources":["Icon.tsx"],"sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { useToken, usePropsResolution } from '../../../hooks';\nimport type { IIconProps } from './types';\nimport SVGIcon from './SVGIcon';\nimport { Factory } from '../../../factory';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst Icon = (props: IIconProps, ref?: any) => {\n  const { as, size, ...resolvedProps } = usePropsResolution('Icon', props);\n  const tokenizedFontSize = useToken('space', size);\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  if (!as) {\n    return <SVGIcon size={size} {...resolvedProps} ref={ref} />;\n  }\n  const isJSX = React.isValidElement(as);\n  const StyledAs = Factory(\n    isJSX\n      ? (resolvedProps) =>\n          React.cloneElement(as, {\n            ...resolvedProps,\n            //@ts-ignore\n            ...as.props,\n          })\n      : as\n  );\n\n  return (\n    <StyledAs\n      {...resolvedProps}\n      fontSize={tokenizedFontSize}\n      lineHeight={tokenizedFontSize}\n      size={size}\n      ref={ref}\n    />\n  );\n};\n\nexport default memo(forwardRef(Icon));\n"]},"metadata":{},"sourceType":"module"}