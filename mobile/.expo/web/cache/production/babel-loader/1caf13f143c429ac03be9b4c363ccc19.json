{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}import{filterDOMProps,mergeProps}from'@react-aria/utils';import{listIds}from\"./utils\";import{useId}from'@react-aria/utils';import{useLabel}from'@react-aria/label';import{useSelectableList}from'@react-aria/selection';import{mapDomPropsToRN,useMapDomPropsToRN}from'@react-native-aria/utils';export function useListBox(props,state,ref){var domProps=filterDOMProps(props,{labelable:true});var _useSelectableList=useSelectableList(_objectSpread(_objectSpread({},props),{},{ref:ref,selectionManager:state.selectionManager,collection:state.collection,disabledKeys:state.disabledKeys})),listProps=_useSelectableList.listProps;var id=useId(props.id);listIds.set(state,id);var _useLabel=useLabel(_objectSpread(_objectSpread({},props),{},{id:id,labelElementType:'span'})),_labelProps=_useLabel.labelProps,fieldProps=_useLabel.fieldProps;var labelProps=mapDomPropsToRN(_labelProps);var _listBoxProps=mergeProps(domProps,state.selectionManager.selectionMode==='multiple'?{'aria-multiselectable':'true'}:{},_objectSpread({role:'listbox'},mergeProps(fieldProps,listProps)));var listBoxProps=useMapDomPropsToRN(_listBoxProps,ref);return{labelProps:labelProps,listBoxProps:listBoxProps};}","map":{"version":3,"mappings":"w0BAaA,OAASA,cAAT,CAAyBC,UAAzB,KAA2C,mBAA3C,CAGA,OAASC,OAAT,eAEA,OAASC,KAAT,KAAsB,mBAAtB,CACA,OAASC,QAAT,KAAyB,mBAAzB,CACA,OAASC,iBAAT,KAAkC,uBAAlC,CACA,OAASC,eAAT,CAA0BC,kBAA1B,KAAoD,0BAApD,CA+BA,MAAO,SAASC,WAAT,CACLC,KADK,CAELC,KAFK,CAGLC,GAHK,CAIQ,CACb,GAAIC,SAAQ,CAAGZ,cAAc,CAACS,KAAD,CAAQ,CAAEI,SAAS,CAAE,IAAb,CAAR,CAA7B,CACA,uBAAoBR,iBAAiB,gCAChCI,KADgC,MAEnCE,GAFoC,CAEpCA,GAFmC,CAGnCG,gBAAgB,CAAEJ,KAAK,CAACI,gBAHW,CAInCC,UAAU,CAAEL,KAAK,CAACK,UAJiB,CAKnCC,YAAY,CAAEN,KAAK,CAACM,YALe,GAArC,CAAMC,SAAN,oBAAMA,SAAN,CAQA,GAAIC,GAAE,CAAGf,KAAK,CAACM,KAAK,CAACS,EAAP,CAAd,CACAhB,OAAO,CAACiB,GAARjB,CAAYQ,KAAZR,CAAmBgB,EAAnBhB,EAEA,cAA8CE,QAAQ,gCACjDK,KADiD,MAEpDS,EAFqD,CAErDA,EAFoD,CAKpDE,gBAAgB,CAAE,MALkC,GAAtD,CAAkBC,WAAlB,WAAMC,UAAN,CAA+BC,UAA/B,WAA+BA,UAA/B,CAQA,GAAMD,WAAU,CAAGhB,eAAe,CAACe,WAAD,CAAlC,CAEA,GAAMG,cAAa,CAAGvB,UAAU,CAC9BW,QAD8B,CAE9BF,KAAK,CAACI,gBAANJ,CAAuBe,aAAvBf,GAAyC,UAAzCA,CACI,CACE,uBAAwB,MAD1B,CADJA,CAII,EAN0B,gBAQ5BgB,IAAI,CAAE,SARsB,EASzBzB,UAAU,CAACsB,UAAD,CAAaN,SAAb,CATe,EAAhC,CAaA,GAAMU,aAAY,CAAGpB,kBAAkB,CAACiB,aAAD,CAAgBb,GAAhB,CAAvC,CAEA,MAAO,CACLW,UADK,CACLA,UADK,CAELK,yBAFK,CAAP,CAID","names":["filterDOMProps","mergeProps","listIds","useId","useLabel","useSelectableList","mapDomPropsToRN","useMapDomPropsToRN","useListBox","props","state","ref","domProps","labelable","selectionManager","collection","disabledKeys","listProps","id","set","labelElementType","_labelProps","labelProps","fieldProps","_listBoxProps","selectionMode","role","listBoxProps"],"sources":["useListBox.web.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport { AriaListBoxProps } from '@react-types/listbox';\nimport { filterDOMProps, mergeProps } from '@react-aria/utils';\nimport { HTMLAttributes, ReactNode, RefObject } from 'react';\nimport { KeyboardDelegate } from '@react-types/shared';\nimport { listIds } from './utils';\nimport { ListState } from '@react-stately/list';\nimport { useId } from '@react-aria/utils';\nimport { useLabel } from '@react-aria/label';\nimport { useSelectableList } from '@react-aria/selection';\nimport { mapDomPropsToRN, useMapDomPropsToRN } from '@react-native-aria/utils';\n\ninterface ListBoxAria {\n  /** Props for the listbox element. */\n  listBoxProps: HTMLAttributes<HTMLElement>;\n  /** Props for the listbox's visual label element (if any). */\n  labelProps: HTMLAttributes<HTMLElement>;\n}\n\ninterface AriaListBoxOptions<T> extends Omit<AriaListBoxProps<T>, 'children'> {\n  /** Whether the listbox uses virtual scrolling. */\n  isVirtualized?: boolean;\n\n  /**\n   * An optional keyboard delegate implementation for type to select,\n   * to override the default.\n   */\n  keyboardDelegate?: KeyboardDelegate;\n\n  /**\n   * An optional visual label for the listbox.\n   */\n  label?: ReactNode;\n}\n\n/**\n * Provides the behavior and accessibility implementation for a listbox component.\n * A listbox displays a list of options and allows a user to select one or more of them.\n * @param props - Props for the listbox.\n * @param state - State for the listbox, as returned by `useListState`.\n */\nexport function useListBox<T>(\n  props: AriaListBoxOptions<T>,\n  state: ListState<T>,\n  ref: RefObject<HTMLElement>\n): ListBoxAria {\n  let domProps = filterDOMProps(props, { labelable: true });\n  let { listProps } = useSelectableList({\n    ...props,\n    ref,\n    selectionManager: state.selectionManager,\n    collection: state.collection,\n    disabledKeys: state.disabledKeys,\n  });\n\n  let id = useId(props.id);\n  listIds.set(state, id);\n\n  let { labelProps: _labelProps, fieldProps } = useLabel({\n    ...props,\n    id,\n    // listbox is not an HTML input element so it\n    // shouldn't be labeled by a <label> element.\n    labelElementType: 'span',\n  });\n\n  const labelProps = mapDomPropsToRN(_labelProps);\n\n  const _listBoxProps = mergeProps(\n    domProps,\n    state.selectionManager.selectionMode === 'multiple'\n      ? {\n          'aria-multiselectable': 'true',\n        }\n      : {},\n    {\n      role: 'listbox',\n      ...mergeProps(fieldProps, listProps),\n    }\n  );\n\n  const listBoxProps = useMapDomPropsToRN(_listBoxProps, ref);\n\n  return {\n    labelProps,\n    listBoxProps,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}