{"ast":null,"code":"import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"orientation\"];function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import React,{memo,forwardRef}from'react';import Platform from\"react-native-web/dist/exports/Platform\";import{usePropsResolution}from\"../../../hooks/useThemeProps\";import Box from\"./../../primitives/Box\";import{useHasResponsiveProps}from\"../../../hooks/useHasResponsiveProps\";var Divider=function Divider(props,ref){var _usePropsResolution=usePropsResolution('Divider',props,{},{resolveResponsively:['thickness']}),orientation=_usePropsResolution.orientation,resolvedProps=_objectWithoutProperties(_usePropsResolution,_excluded);if(useHasResponsiveProps(props)){return null;}return React.createElement(Box,_extends({},resolvedProps,{ref:ref,\"aria-orientation\":orientation,accessibilityRole:Platform.OS==='web'?'separator':undefined}));};export default memo(forwardRef(Divider));","map":{"version":3,"mappings":"0YAAA,MAAOA,MAAP,EAAgBC,IAAhB,CAAsBC,UAAtB,KAAwC,OAAxC,C,6DAEA,OAASC,kBAAT,oCACA,MAAOC,IAAP,8BAEA,OAASC,qBAAT,4CAEA,GAAMC,QAAO,CAAG,QAAVA,QAAU,CAACC,KAAD,CAAuBC,GAAvB,CAAqC,CACnD,wBAA0CL,kBAAkB,CAC1D,SAD0D,CAE1DI,KAF0D,CAG1D,EAH0D,CAI1D,CAAEE,mBAAmB,CAAE,CAAC,WAAD,CAAvB,CAJ0D,CAA5D,CAAQC,WAAR,qBAAQA,WAAR,CAAwBC,aAAxB,yDAOA,GAAIN,qBAAqB,CAACE,KAAD,CAAzB,CAAkC,CAChC,MAAO,KAAP,CACD,CACD,MACEP,qBAACI,GAAD,aACMO,aADN,EAEEH,GAAG,CAAEA,GAFP,CAGE,mBAAkBE,WAHpB,CAKEE,iBAAiB,CAAEC,QAAQ,CAACC,EAATD,GAAgB,KAAhBA,CAAwB,WAAxBA,CAAsCE,SAL3D,GADF,CAXF,EAsBA,cAAed,KAAI,CAACC,UAAU,CAACI,OAAD,CAAX,CAAnB","names":["React","memo","forwardRef","usePropsResolution","Box","useHasResponsiveProps","Divider","props","ref","resolveResponsively","orientation","resolvedProps","accessibilityRole","Platform","OS","undefined"],"sources":["index.tsx"],"sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { Platform } from 'react-native';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport Box from './../../primitives/Box';\nimport type { IDividerProps } from './types';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst Divider = (props: IDividerProps, ref?: any) => {\n  const { orientation, ...resolvedProps } = usePropsResolution(\n    'Divider',\n    props,\n    {},\n    { resolveResponsively: ['thickness'] }\n  );\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <Box\n      {...resolvedProps}\n      ref={ref}\n      aria-orientation={orientation}\n      //@ts-ignore web only role\n      accessibilityRole={Platform.OS === 'web' ? 'separator' : undefined}\n    />\n  );\n};\n\nexport default memo(forwardRef(Divider));\n"]},"metadata":{},"sourceType":"module"}