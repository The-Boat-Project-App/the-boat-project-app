{"ast":null,"code":"import NativeModulesProxy from\"./NativeModulesProxy\";export function requireNativeModule(moduleName){var _global$ExpoModules$m,_global$ExpoModules;var nativeModule=(_global$ExpoModules$m=(_global$ExpoModules=global.ExpoModules)==null?void 0:_global$ExpoModules[moduleName])!=null?_global$ExpoModules$m:NativeModulesProxy[moduleName];if(!nativeModule){throw new Error(\"Cannot find native module '\"+moduleName+\"'\");}return nativeModule;}","map":{"version":3,"mappings":"AAAA,MAAOA,mBAAP,4BAoBA,MAAM,SAAUC,oBAAV,CAAgDC,UAAhD,CAAkE,+CACtE,GAAMC,aAAY,6CAChBC,MAAM,CAACC,WADS,eAChB,oBAAqBH,UAArB,CADgB,8BACoBF,kBAAkB,CAACE,UAAD,CADxD,CAGA,GAAI,CAACC,YAAL,CAAmB,CACjB,KAAM,IAAIG,MAAJ,+BAAwCJ,UAAxC,KAAN,CACD,CACD,MAAOC,aAAP,CACD","names":["NativeModulesProxy","requireNativeModule","moduleName","nativeModule","global","ExpoModules","Error"],"sourceRoot":"","sources":["../src/requireNativeModule.ts"],"sourcesContent":["import NativeModulesProxy from './NativeModulesProxy';\n\ndeclare global {\n  // eslint-disable-next-line no-var\n  var ExpoModules:\n    | undefined\n    | {\n        [key: string]: any;\n      };\n}\n\n/**\n * Imports the native module registered with given name. In the first place it tries to load\n * the module installed through the JSI host object and then falls back to the bridge proxy module.\n * Notice that the modules loaded from the proxy may not support some features like synchronous functions.\n *\n * @param moduleName Name of the requested native module.\n * @returns Object representing the native module.\n * @throws Error when there is no native module with given name.\n */\nexport function requireNativeModule<ModuleType = any>(moduleName: string): ModuleType {\n  const nativeModule: ModuleType =\n    global.ExpoModules?.[moduleName] ?? NativeModulesProxy[moduleName];\n\n  if (!nativeModule) {\n    throw new Error(`Cannot find native module '${moduleName}'`);\n  }\n  return nativeModule;\n}\n"]},"metadata":{},"sourceType":"module"}