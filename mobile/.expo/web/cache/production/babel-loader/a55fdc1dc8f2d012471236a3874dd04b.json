{"ast":null,"code":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=domNodeToHTMLString;var _stringifyEntities=_interopRequireDefault(require(\"stringify-entities\"));var _transientRenderEngine=require(\"@native-html/transient-render-engine\");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function renderOpeningTag(tag,attributes){var strAttributes=[];Object.keys(attributes).forEach(function(key){strAttributes.push(key+\"=\\\"\"+(0,_stringifyEntities.default)(\"\"+attributes[key])+\"\\\"\");});return\"<\"+tag+(strAttributes.length?' ':'')+strAttributes.join(' ')+\">\";}function domNodeToHTMLString(root,reporter){var depth=arguments.length>2&&arguments[2]!==undefined?arguments[2]:0;var html='';if((0,_transientRenderEngine.isDomElement)(root)){var strChildren=root.children.reduce(function(prev,curr){var convertedNode=domNodeToHTMLString(curr,reporter,depth+1);return\"\"+prev+convertedNode;},'');html=\"\"+renderOpeningTag(root.tagName,root.attribs)+strChildren+\"</\"+root.tagName+\">\";}else if((0,_transientRenderEngine.isDomText)(root)){var text=(0,_stringifyEntities.default)(root.data);html=text;}typeof reporter==='function'&&reporter(root,depth,html);return html;}","map":{"version":3,"mappings":"0GAAA,6EACA,8JAMA,QAASA,iBAAT,CAA0BC,GAA1B,CAAuCC,UAAvC,CAA2E,CACzE,GAAMC,cAAuB,CAAG,EAAhC,CACAC,MAAM,CAACC,IAAPD,CAAYF,UAAZE,EAAwBE,OAAxBF,CAAiCG,YAAD,CAAS,CACvCJ,aAAa,CAACK,IAAdL,CAAsBI,GAAtBJ,OAA8B,kCAAoBD,UAAU,CAACK,GAAD,CAA9B,CAA9BJ,OADF,GAGA,UAAWF,GAAX,EAAiBE,aAAa,CAACM,MAAdN,CAAuB,GAAvBA,CAA6B,EAA9C,EAAmDA,aAAa,CAACO,IAAdP,CAAmB,GAAnBA,CAAnD,KACD,CAUc,QAASQ,oBAAT,CACbC,IADa,CAEbC,QAFa,CAIb,IADAC,MACA,2DADQ,CACR,CACA,GAAIC,KAAI,CAAG,EAAX,CACA,GAAI,wCAAaH,IAAb,CAAJ,CAAwB,CACtB,GAAMI,YAAW,CAAGJ,IAAI,CAACK,QAALL,CAAcM,MAAdN,CAAqB,SAACO,IAAD,CAAOC,IAAP,CAAgB,CACvD,GAAMC,cAAa,CAAGV,mBAAmB,CAACS,IAAD,CAAOP,QAAP,CAAiBC,KAAK,CAAG,CAAzB,CAAzC,CACA,SAAUK,IAAV,CAAiBE,aAAjB,CAFkB,EAGjB,EAHiBT,CAApB,CAIAG,IAAI,IAAMf,gBAAgB,CAACY,IAAI,CAACU,OAAN,CAAeV,IAAI,CAACW,OAApB,CAAtB,CAAqDP,WAArD,MACFJ,IAAI,CAACU,OADH,IAAJP,CALF,KAQO,IAAI,qCAAUH,IAAV,CAAJ,CAAqB,CAC1B,GAAMY,KAAI,CAAG,+BAAiBZ,IAAI,CAACa,IAAtB,CAAb,CACAV,IAAI,CAAGS,IAAPT,CACD,CACD,MAAOF,SAAP,GAAoB,UAApB,EAAkCA,QAAQ,CAACD,IAAD,CAAOE,KAAP,CAAcC,IAAd,CAA1C,CACA,MAAOA,KAAP,CACD","names":["renderOpeningTag","tag","attributes","strAttributes","Object","keys","forEach","key","push","length","join","domNodeToHTMLString","root","reporter","depth","html","strChildren","children","reduce","prev","curr","convertedNode","tagName","attribs","text","data"],"sources":["domNodeToHTMLString.ts"],"sourcesContent":["import strigifyEntities from 'stringify-entities';\nimport {\n  Node,\n  isDomText,\n  isDomElement\n} from '@native-html/transient-render-engine';\n\nfunction renderOpeningTag(tag: string, attributes: Record<string, string>) {\n  const strAttributes: string[] = [];\n  Object.keys(attributes).forEach((key) => {\n    strAttributes.push(`${key}=\"${strigifyEntities(`${attributes[key]}`)}\"`);\n  });\n  return `<${tag}${strAttributes.length ? ' ' : ''}${strAttributes.join(' ')}>`;\n}\n\n/**\n * Convert a DOM node to its HTML representation.\n *\n * @param root - The root to stringify.\n * @param reporter - An optional function which will receive every\n * parsed node as 1st argument, the depth as 2d argument and the converted html\n * as 3d argument.\n */\nexport default function domNodeToHTMLString(\n  root: Node | null,\n  reporter?: DomNodeToHtmlReporter,\n  depth = 0\n) {\n  let html = '';\n  if (isDomElement(root)) {\n    const strChildren = root.children.reduce((prev, curr) => {\n      const convertedNode = domNodeToHTMLString(curr, reporter, depth + 1);\n      return `${prev}${convertedNode}`;\n    }, '');\n    html = `${renderOpeningTag(root.tagName, root.attribs)}${strChildren}</${\n      root.tagName\n    }>`;\n  } else if (isDomText(root)) {\n    const text = strigifyEntities(root.data);\n    html = text;\n  }\n  typeof reporter === 'function' && reporter(root, depth, html);\n  return html;\n}\n\n/**\n * @public\n */\nexport interface DomNodeToHtmlReporter {\n  /**\n   * @param node - The node being parsed.\n   * @param depth - How many parents this node have.\n   * @param html - The HTML representation of this node and its children.\n   */\n  (node: Node | null, depth: number, html: string): void;\n}\n"]},"metadata":{},"sourceType":"script"}