{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}import{filterDOMProps as $frWMC$filterDOMProps,useId as $frWMC$useId,mergeProps as $frWMC$mergeProps,useSlotId as $frWMC$useSlotId,isMac as $frWMC$isMac,isWebKit as $frWMC$isWebKit}from\"@react-aria/utils\";import{useFocusWithin as $frWMC$useFocusWithin,useHover as $frWMC$useHover,isFocusVisible as $frWMC$isFocusVisible}from\"@react-aria/interactions\";import{useLabel as $frWMC$useLabel}from\"@react-aria/label\";import{useSelectableList as $frWMC$useSelectableList,useSelectableItem as $frWMC$useSelectableItem}from\"@react-aria/selection\";import{getItemCount as $frWMC$getItemCount}from\"@react-stately/collections\";var $b1f0cad8af73213b$export$3585ede4d035bf14=new WeakMap();function $b1f0cad8af73213b$var$normalizeKey(key){if(typeof key==='string')return key.replace(/\\s*/g,'');return''+key;}function $b1f0cad8af73213b$export$9145995848b05025(state,itemKey){var data=$b1f0cad8af73213b$export$3585ede4d035bf14.get(state);if(!data)throw new Error('Unknown list');return data.id+\"-option-\"+$b1f0cad8af73213b$var$normalizeKey(itemKey);}function $c132121280ec012d$export$50eacbbf140a3141(props,state,ref){var domProps=$frWMC$filterDOMProps(props,{labelable:true});var _$frWMC$useSelectable=$frWMC$useSelectableList(_objectSpread(_objectSpread({},props),{},{ref:ref,selectionManager:state.selectionManager,collection:state.collection,disabledKeys:state.disabledKeys})),listProps=_$frWMC$useSelectable.listProps;var _$frWMC$useFocusWithi=$frWMC$useFocusWithin({onFocusWithin:props.onFocus,onBlurWithin:props.onBlur,onFocusWithinChange:props.onFocusChange}),focusWithinProps=_$frWMC$useFocusWithi.focusWithinProps;var id=$frWMC$useId(props.id);$b1f0cad8af73213b$export$3585ede4d035bf14.set(state,{id:id,shouldUseVirtualFocus:props.shouldUseVirtualFocus,shouldSelectOnPressUp:props.shouldSelectOnPressUp,shouldFocusOnHover:props.shouldFocusOnHover,isVirtualized:props.isVirtualized,onAction:props.onAction});var _$frWMC$useLabel=$frWMC$useLabel(_objectSpread(_objectSpread({},props),{},{id:id,labelElementType:'span'})),labelProps=_$frWMC$useLabel.labelProps,fieldProps=_$frWMC$useLabel.fieldProps;return{labelProps:labelProps,listBoxProps:$frWMC$mergeProps(domProps,focusWithinProps,state.selectionManager.selectionMode==='multiple'?{'aria-multiselectable':'true'}:{},_objectSpread({role:'listbox'},$frWMC$mergeProps(fieldProps,listProps)))};}function $293f70390ea03370$export$497855f14858aa34(props,state,ref){var key=props.key;var data=$b1f0cad8af73213b$export$3585ede4d035bf14.get(state);var _isDisabled;var isDisabled=(_isDisabled=props.isDisabled)!==null&&_isDisabled!==void 0?_isDisabled:state.disabledKeys.has(key);var _isSelected;var isSelected=(_isSelected=props.isSelected)!==null&&_isSelected!==void 0?_isSelected:state.selectionManager.isSelected(key);var isFocused=state.selectionManager.focusedKey===key;var _shouldSelectOnPressUp;var shouldSelectOnPressUp=(_shouldSelectOnPressUp=props.shouldSelectOnPressUp)!==null&&_shouldSelectOnPressUp!==void 0?_shouldSelectOnPressUp:data.shouldSelectOnPressUp;var _shouldFocusOnHover;var shouldFocusOnHover=(_shouldFocusOnHover=props.shouldFocusOnHover)!==null&&_shouldFocusOnHover!==void 0?_shouldFocusOnHover:data.shouldFocusOnHover;var _shouldUseVirtualFocus;var shouldUseVirtualFocus=(_shouldUseVirtualFocus=props.shouldUseVirtualFocus)!==null&&_shouldUseVirtualFocus!==void 0?_shouldUseVirtualFocus:data.shouldUseVirtualFocus;var _isVirtualized;var isVirtualized=(_isVirtualized=props.isVirtualized)!==null&&_isVirtualized!==void 0?_isVirtualized:data.isVirtualized;var labelId=$frWMC$useSlotId();var descriptionId=$frWMC$useSlotId();var optionProps={role:'option','aria-disabled':isDisabled,'aria-selected':state.selectionManager.selectionMode!=='none'?isSelected:undefined};if(!($frWMC$isMac()&&$frWMC$isWebKit())){optionProps['aria-label']=props['aria-label'];optionProps['aria-labelledby']=labelId;optionProps['aria-describedby']=descriptionId;}if(isVirtualized){optionProps['aria-posinset']=state.collection.getItem(key).index+1;optionProps['aria-setsize']=$frWMC$getItemCount(state.collection);}var _$frWMC$useSelectable2=$frWMC$useSelectableItem({selectionManager:state.selectionManager,key:key,ref:ref,shouldSelectOnPressUp:shouldSelectOnPressUp,allowsDifferentPressOrigin:shouldSelectOnPressUp&&shouldFocusOnHover,isVirtualized:isVirtualized,shouldUseVirtualFocus:shouldUseVirtualFocus,isDisabled:isDisabled,onAction:data.onAction?function(){return data.onAction(key);}:undefined}),itemProps=_$frWMC$useSelectable2.itemProps,isPressed=_$frWMC$useSelectable2.isPressed,hasAction=_$frWMC$useSelectable2.hasAction,allowsSelection=_$frWMC$useSelectable2.allowsSelection;var _$frWMC$useHover=$frWMC$useHover({isDisabled:isDisabled||!shouldFocusOnHover,onHoverStart:function onHoverStart(){if(!$frWMC$isFocusVisible()){state.selectionManager.setFocused(true);state.selectionManager.setFocusedKey(key);}}}),hoverProps=_$frWMC$useHover.hoverProps;return{optionProps:_objectSpread(_objectSpread(_objectSpread({},optionProps),$frWMC$mergeProps(itemProps,hoverProps)),{},{id:$b1f0cad8af73213b$export$9145995848b05025(state,key)}),labelProps:{id:labelId},descriptionProps:{id:descriptionId},isFocused:isFocused,isSelected:isSelected,isDisabled:isDisabled,isPressed:isPressed,allowsSelection:allowsSelection,hasAction:hasAction};}function $af383d3bef1cfdc9$export$c3f9f39876e4bc7(props){var heading=props.heading,ariaLabel=props['aria-label'];var headingId=$frWMC$useId();return{itemProps:{role:'presentation'},headingProps:heading?{id:headingId,'aria-hidden':true}:{},groupProps:{role:'group','aria-label':ariaLabel,'aria-labelledby':heading?headingId:undefined}};}export{$c132121280ec012d$export$50eacbbf140a3141 as useListBox,$293f70390ea03370$export$497855f14858aa34 as useOption,$af383d3bef1cfdc9$export$c3f9f39876e4bc7 as useListBoxSection,$b1f0cad8af73213b$export$3585ede4d035bf14 as listData,$b1f0cad8af73213b$export$9145995848b05025 as getItemId};","map":{"version":3,"mappings":"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","names":["$b1f0cad8af73213b$export$3585ede4d035bf14","WeakMap","$b1f0cad8af73213b$var$normalizeKey","key","replace","$b1f0cad8af73213b$export$9145995848b05025","state","itemKey","data","get","Error","id","$c132121280ec012d$export$50eacbbf140a3141","props","ref","domProps","$frWMC$filterDOMProps","labelable","$frWMC$useSelectableList","selectionManager","collection","disabledKeys","listProps","$frWMC$useFocusWithin","onFocusWithin","onFocus","onBlurWithin","onBlur","onFocusWithinChange","onFocusChange","focusWithinProps","$frWMC$useId","set","shouldUseVirtualFocus","shouldSelectOnPressUp","shouldFocusOnHover","isVirtualized","onAction","$frWMC$useLabel","labelElementType","labelProps","fieldProps","listBoxProps","$frWMC$mergeProps","selectionMode","role","$293f70390ea03370$export$497855f14858aa34","_isDisabled","isDisabled","has","_isSelected","isSelected","isFocused","focusedKey","_shouldSelectOnPressUp","_shouldFocusOnHover","_shouldUseVirtualFocus","_isVirtualized","labelId","$frWMC$useSlotId","descriptionId","optionProps","undefined","$frWMC$isMac","$frWMC$isWebKit","getItem","index","$frWMC$getItemCount","$frWMC$useSelectableItem","allowsDifferentPressOrigin","itemProps","isPressed","hasAction","allowsSelection","$frWMC$useHover","onHoverStart","$frWMC$isFocusVisible","setFocused","setFocusedKey","hoverProps","descriptionProps","$af383d3bef1cfdc9$export$c3f9f39876e4bc7","heading","ariaLabel","headingId","headingProps","groupProps"],"sources":["packages/@react-aria/listbox/src/utils.ts","packages/@react-aria/listbox/src/useListBox.ts","packages/@react-aria/listbox/src/useOption.ts","packages/@react-aria/listbox/src/useListBoxSection.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Key} from 'react';\nimport {ListState} from '@react-stately/list';\n\ninterface ListData {\n  id: string,\n  shouldSelectOnPressUp?: boolean,\n  shouldFocusOnHover?: boolean,\n  shouldUseVirtualFocus?: boolean,\n  isVirtualized?: boolean,\n  onAction?: (key: Key) => void\n}\n\nexport const listData = new WeakMap<ListState<unknown>, ListData>();\n\nfunction normalizeKey(key: Key): string {\n  if (typeof key === 'string') {\n    return key.replace(/\\s*/g, '');\n  }\n\n  return '' + key;\n}\n\nexport function getItemId<T>(state: ListState<T>, itemKey: Key): string {\n  let data = listData.get(state);\n\n  if (!data) {\n    throw new Error('Unknown list');\n  }\n\n  return `${data.id}-option-${normalizeKey(itemKey)}`;\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaListBoxProps} from '@react-types/listbox';\nimport {DOMAttributes, KeyboardDelegate} from '@react-types/shared';\nimport {filterDOMProps, mergeProps} from '@react-aria/utils';\nimport {Key, ReactNode, RefObject} from 'react';\nimport {listData} from './utils';\nimport {ListState} from '@react-stately/list';\nimport {useFocusWithin} from '@react-aria/interactions';\nimport {useId} from '@react-aria/utils';\nimport {useLabel} from '@react-aria/label';\nimport {useSelectableList} from '@react-aria/selection';\n\nexport interface ListBoxAria {\n  /** Props for the listbox element. */\n  listBoxProps: DOMAttributes,\n  /** Props for the listbox's visual label element (if any). */\n  labelProps: DOMAttributes\n}\n\nexport interface AriaListBoxOptions<T> extends Omit<AriaListBoxProps<T>, 'children'> {\n  /** Whether the listbox uses virtual scrolling. */\n  isVirtualized?: boolean,\n\n  /**\n   * An optional keyboard delegate implementation for type to select,\n   * to override the default.\n   */\n  keyboardDelegate?: KeyboardDelegate,\n\n  /**\n   * Whether the listbox items should use virtual focus instead of being focused directly.\n   */\n  shouldUseVirtualFocus?: boolean,\n\n  /** Whether selection should occur on press up instead of press down. */\n  shouldSelectOnPressUp?: boolean,\n\n  /** Whether options should be focused when the user hovers over them. */\n  shouldFocusOnHover?: boolean,\n\n  /**\n   * An optional visual label for the listbox.\n   */\n  label?: ReactNode,\n  /**\n   * Handler that is called when a user performs an action on an item. The exact user event depends on\n   * the collection's `selectionBehavior` prop and the interaction modality.\n   */\n  onAction?: (key: Key) => void\n}\n\n/**\n * Provides the behavior and accessibility implementation for a listbox component.\n * A listbox displays a list of options and allows a user to select one or more of them.\n * @param props - Props for the listbox.\n * @param state - State for the listbox, as returned by `useListState`.\n */\nexport function useListBox<T>(props: AriaListBoxOptions<T>, state: ListState<T>, ref: RefObject<HTMLElement>): ListBoxAria {\n  let domProps = filterDOMProps(props, {labelable: true});\n  let {listProps} = useSelectableList({\n    ...props,\n    ref,\n    selectionManager: state.selectionManager,\n    collection: state.collection,\n    disabledKeys: state.disabledKeys\n  });\n\n  let {focusWithinProps} = useFocusWithin({\n    onFocusWithin: props.onFocus,\n    onBlurWithin: props.onBlur,\n    onFocusWithinChange: props.onFocusChange\n  });\n\n  // Share list id and some props with child options.\n  let id = useId(props.id);\n  listData.set(state, {\n    id,\n    shouldUseVirtualFocus: props.shouldUseVirtualFocus,\n    shouldSelectOnPressUp: props.shouldSelectOnPressUp,\n    shouldFocusOnHover: props.shouldFocusOnHover,\n    isVirtualized: props.isVirtualized,\n    onAction: props.onAction\n  });\n\n  let {labelProps, fieldProps} = useLabel({\n    ...props,\n    id,\n    // listbox is not an HTML input element so it\n    // shouldn't be labeled by a <label> element.\n    labelElementType: 'span'\n  });\n\n  return {\n    labelProps,\n    listBoxProps: mergeProps(domProps, focusWithinProps, state.selectionManager.selectionMode === 'multiple' ? {\n      'aria-multiselectable': 'true'\n    } : {}, {\n      role: 'listbox',\n      ...mergeProps(fieldProps, listProps)\n    })\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DOMAttributes, FocusableElement} from '@react-types/shared';\nimport {getItemCount} from '@react-stately/collections';\nimport {getItemId, listData} from './utils';\nimport {isFocusVisible, useHover} from '@react-aria/interactions';\nimport {isMac, isWebKit, mergeProps, useSlotId} from '@react-aria/utils';\nimport {Key, RefObject} from 'react';\nimport {ListState} from '@react-stately/list';\nimport {SelectableItemStates, useSelectableItem} from '@react-aria/selection';\n\nexport interface OptionAria extends SelectableItemStates {\n  /** Props for the option element. */\n  optionProps: DOMAttributes,\n\n  /** Props for the main text element inside the option. */\n  labelProps: DOMAttributes,\n\n  /** Props for the description text element inside the option, if any. */\n  descriptionProps: DOMAttributes,\n\n  /** Whether the option is currently focused. */\n  isFocused: boolean\n}\n\nexport interface AriaOptionProps {\n  /**\n   * Whether the option is disabled.\n   * @deprecated\n   */\n  isDisabled?: boolean,\n\n  /**\n   * Whether the option is selected.\n   * @deprecated\n   */\n  isSelected?: boolean,\n\n  /** A screen reader only label for the option. */\n  'aria-label'?: string,\n\n  /** The unique key for the option. */\n  key: Key,\n\n  /**\n   * Whether selection should occur on press up instead of press down.\n   * @deprecated\n   */\n  shouldSelectOnPressUp?: boolean,\n\n  /**\n   * Whether the option should be focused when the user hovers over it.\n   * @deprecated\n   */\n  shouldFocusOnHover?: boolean,\n\n  /**\n   * Whether the option is contained in a virtual scrolling listbox.\n   * @deprecated\n   */\n  isVirtualized?: boolean,\n\n  /**\n   * Whether the option should use virtual focus instead of being focused directly.\n   * @deprecated\n   */\n  shouldUseVirtualFocus?: boolean\n}\n\n/**\n * Provides the behavior and accessibility implementation for an option in a listbox.\n * See `useListBox` for more details about listboxes.\n * @param props - Props for the option.\n * @param state - State for the listbox, as returned by `useListState`.\n */\nexport function useOption<T>(props: AriaOptionProps, state: ListState<T>, ref: RefObject<FocusableElement>): OptionAria {\n  let {\n    key\n  } = props;\n\n  let data = listData.get(state);\n\n  let isDisabled = props.isDisabled ?? state.disabledKeys.has(key);\n  let isSelected = props.isSelected ?? state.selectionManager.isSelected(key);\n  let isFocused = state.selectionManager.focusedKey === key;\n  let shouldSelectOnPressUp = props.shouldSelectOnPressUp ?? data.shouldSelectOnPressUp;\n  let shouldFocusOnHover = props.shouldFocusOnHover ?? data.shouldFocusOnHover;\n  let shouldUseVirtualFocus = props.shouldUseVirtualFocus ?? data.shouldUseVirtualFocus;\n  let isVirtualized = props.isVirtualized ?? data.isVirtualized;\n\n  let labelId = useSlotId();\n  let descriptionId = useSlotId();\n\n  let optionProps = {\n    role: 'option',\n    'aria-disabled': isDisabled,\n    'aria-selected': state.selectionManager.selectionMode !== 'none' ? isSelected : undefined\n  };\n\n  // Safari with VoiceOver on macOS misreads options with aria-labelledby or aria-label as simply \"text\".\n  // We should not map slots to the label and description on Safari and instead just have VoiceOver read the textContent.\n  // https://bugs.webkit.org/show_bug.cgi?id=209279\n  if (!(isMac() && isWebKit())) {\n    optionProps['aria-label'] = props['aria-label'];\n    optionProps['aria-labelledby'] = labelId;\n    optionProps['aria-describedby'] = descriptionId;\n  }\n\n  if (isVirtualized) {\n    optionProps['aria-posinset'] = state.collection.getItem(key).index + 1;\n    optionProps['aria-setsize'] = getItemCount(state.collection);\n  }\n\n  let {itemProps, isPressed, hasAction, allowsSelection} = useSelectableItem({\n    selectionManager: state.selectionManager,\n    key,\n    ref,\n    shouldSelectOnPressUp,\n    allowsDifferentPressOrigin: shouldSelectOnPressUp && shouldFocusOnHover,\n    isVirtualized,\n    shouldUseVirtualFocus,\n    isDisabled,\n    onAction: data.onAction ? () => data.onAction(key) : undefined\n  });\n\n  let {hoverProps} = useHover({\n    isDisabled: isDisabled || !shouldFocusOnHover,\n    onHoverStart() {\n      if (!isFocusVisible()) {\n        state.selectionManager.setFocused(true);\n        state.selectionManager.setFocusedKey(key);\n      }\n    }\n  });\n\n  return {\n    optionProps: {\n      ...optionProps,\n      ...mergeProps(itemProps, hoverProps),\n      id: getItemId(state, key)\n    },\n    labelProps: {\n      id: labelId\n    },\n    descriptionProps: {\n      id: descriptionId\n    },\n    isFocused,\n    isSelected,\n    isDisabled,\n    isPressed,\n    allowsSelection,\n    hasAction\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DOMAttributes} from '@react-types/shared';\nimport {ReactNode} from 'react';\nimport {useId} from '@react-aria/utils';\n\nexport interface AriaListBoxSectionProps {\n  /** The heading for the section. */\n  heading?: ReactNode,\n  /** An accessibility label for the section. Required if `heading` is not present. */\n  'aria-label'?: string\n}\n\nexport interface ListBoxSectionAria {\n  /** Props for the wrapper list item. */\n  itemProps: DOMAttributes,\n\n  /** Props for the heading element, if any. */\n  headingProps: DOMAttributes,\n\n  /** Props for the group element. */\n  groupProps: DOMAttributes\n}\n\n/**\n * Provides the behavior and accessibility implementation for a section in a listbox.\n * See `useListBox` for more details about listboxes.\n * @param props - Props for the section.\n */\nexport function useListBoxSection(props: AriaListBoxSectionProps): ListBoxSectionAria {\n  let {heading, 'aria-label': ariaLabel} = props;\n  let headingId = useId();\n\n  return {\n    itemProps: {\n      role: 'presentation'\n    },\n    headingProps: heading ? {\n      // Techincally, listbox cannot contain headings according to ARIA.\n      // We hide the heading from assistive technology, and only use it\n      // as a label for the nested group.\n      id: headingId,\n      'aria-hidden': true\n    } : {},\n    groupProps: {\n      role: 'group',\n      'aria-label': ariaLabel,\n      'aria-labelledby': heading ? headingId : undefined\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}