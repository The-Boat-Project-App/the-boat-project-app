{"ast":null,"code":"function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import React,{memo,forwardRef}from'react';import StackMain from\"./Stack\";import{usePropsResolution}from\"../../../hooks/useThemeProps\";import{useHasResponsiveProps}from\"../../../hooks/useHasResponsiveProps\";var VStack=function VStack(props,ref){var resolvedProps=usePropsResolution('VStack',props);if(useHasResponsiveProps(props)){return null;}return React.createElement(StackMain,_extends({ref:ref},resolvedProps));};export default memo(forwardRef(VStack));","map":{"version":3,"mappings":"uRAAA,MAAOA,MAAP,EAAgBC,IAAhB,CAAsBC,UAAtB,KAAwC,OAAxC,CACA,MAAOC,UAAP,eACA,OAASC,kBAAT,oCAEA,OAASC,qBAAT,4CAaA,GAAMC,OAAM,CAAG,QAATA,OAAS,CAACC,KAAD,CAAsBC,GAAtB,CAAoC,CACjD,GAAMC,cAAa,CAAGL,kBAAkB,CAAC,QAAD,CAAWG,KAAX,CAAxC,CAEA,GAAIF,qBAAqB,CAACE,KAAD,CAAzB,CAAkC,CAChC,MAAO,KAAP,CACD,CACD,MAAOP,qBAACG,SAAD,WAAWK,GAAG,CAAEA,GAAhB,EAAyBC,aAAzB,EAAP,CANF,EASA,cAAeR,KAAI,CAACC,UAAU,CAACI,MAAD,CAAX,CAAnB","names":["React","memo","forwardRef","StackMain","usePropsResolution","useHasResponsiveProps","VStack","props","ref","resolvedProps"],"sources":["VStack.tsx"],"sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport StackMain, { InterfaceStackProps } from './Stack';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport type { CustomProps, ResponsiveValue } from '../../types';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nexport interface InterfaceVStackProps extends InterfaceStackProps {\n  /**\n   * The direction of the Stack Items.\n   * @default column\n   */\n  direction?: ResponsiveValue<\n    'column' | 'row' | 'column-reverse' | 'row-reverse'\n  >;\n}\n\nexport type IVStackProps = InterfaceVStackProps & CustomProps<'VStack'>;\n\nconst VStack = (props: IVStackProps, ref?: any) => {\n  const resolvedProps = usePropsResolution('VStack', props);\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return <StackMain ref={ref} {...resolvedProps} />;\n};\n\nexport default memo(forwardRef(VStack));\n"]},"metadata":{},"sourceType":"module"}