{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import _toConsumableArray from\"@babel/runtime/helpers/toConsumableArray\";import{nanoid}from'nanoid/non-secure';import*as React from'react';import useLatestCallback from'use-latest-callback';import NavigationHelpersContext from\"./NavigationHelpersContext\";import NavigationRouteContext from\"./NavigationRouteContext\";import PreventRemoveContext from\"./PreventRemoveContext\";var transformPreventedRoutes=function transformPreventedRoutes(preventedRoutesMap){var preventedRoutesToTransform=_toConsumableArray(preventedRoutesMap.values());var preventedRoutes=preventedRoutesToTransform.reduce(function(acc,_ref){var _acc$routeKey;var routeKey=_ref.routeKey,preventRemove=_ref.preventRemove;acc[routeKey]={preventRemove:((_acc$routeKey=acc[routeKey])===null||_acc$routeKey===void 0?void 0:_acc$routeKey.preventRemove)||preventRemove};return acc;},{});return preventedRoutes;};export default function PreventRemoveProvider(_ref2){var children=_ref2.children;var _React$useState=React.useState(function(){return nanoid();}),_React$useState2=_slicedToArray(_React$useState,1),parentId=_React$useState2[0];var _React$useState3=React.useState(new Map()),_React$useState4=_slicedToArray(_React$useState3,2),preventedRoutesMap=_React$useState4[0],setPreventedRoutesMap=_React$useState4[1];var navigation=React.useContext(NavigationHelpersContext);var route=React.useContext(NavigationRouteContext);var preventRemoveContextValue=React.useContext(PreventRemoveContext);var setParentPrevented=preventRemoveContextValue===null||preventRemoveContextValue===void 0?void 0:preventRemoveContextValue.setPreventRemove;var setPreventRemove=useLatestCallback(function(id,routeKey,preventRemove){if(preventRemove&&(navigation==null||navigation!==null&&navigation!==void 0&&navigation.getState().routes.every(function(route){return route.key!==routeKey;}))){throw new Error(\"Couldn't find a route with the key \"+routeKey+\". Is your component inside NavigationContent?\");}setPreventedRoutesMap(function(prevPrevented){var _prevPrevented$get,_prevPrevented$get2;if(routeKey===((_prevPrevented$get=prevPrevented.get(id))===null||_prevPrevented$get===void 0?void 0:_prevPrevented$get.routeKey)&&preventRemove===((_prevPrevented$get2=prevPrevented.get(id))===null||_prevPrevented$get2===void 0?void 0:_prevPrevented$get2.preventRemove)){return prevPrevented;}var nextPrevented=new Map(prevPrevented);if(preventRemove){nextPrevented.set(id,{routeKey:routeKey,preventRemove:preventRemove});}else{nextPrevented.delete(id);}return nextPrevented;});});var isPrevented=_toConsumableArray(preventedRoutesMap.values()).some(function(_ref3){var preventRemove=_ref3.preventRemove;return preventRemove;});React.useEffect(function(){if((route===null||route===void 0?void 0:route.key)!==undefined&&setParentPrevented!==undefined){setParentPrevented(parentId,route.key,isPrevented);return function(){setParentPrevented(parentId,route.key,false);};}return;},[parentId,isPrevented,route===null||route===void 0?void 0:route.key,setParentPrevented]);var value=React.useMemo(function(){return{setPreventRemove:setPreventRemove,preventedRoutes:transformPreventedRoutes(preventedRoutesMap)};},[setPreventRemove,preventedRoutesMap]);return React.createElement(PreventRemoveContext.Provider,{value:value},children);}","map":{"version":3,"mappings":"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","names":["nanoid","React","useLatestCallback","NavigationHelpersContext","NavigationRouteContext","PreventRemoveContext","transformPreventedRoutes","preventedRoutesMap","preventedRoutesToTransform","values","preventedRoutes","reduce","acc","routeKey","preventRemove","PreventRemoveProvider","children","useState","parentId","Map","setPreventedRoutesMap","navigation","useContext","route","preventRemoveContextValue","setParentPrevented","setPreventRemove","id","getState","routes","every","key","Error","prevPrevented","get","_prevPrevented$get","_prevPrevented$get2","nextPrevented","set","delete","isPrevented","some","useEffect","undefined","value","useMemo","Provider"],"sources":["PreventRemoveProvider.tsx"],"sourcesContent":["import { nanoid } from 'nanoid/non-secure';\nimport * as React from 'react';\nimport useLatestCallback from 'use-latest-callback';\n\nimport NavigationHelpersContext from './NavigationHelpersContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport PreventRemoveContext, { PreventedRoutes } from './PreventRemoveContext';\n\ntype Props = {\n  children: React.ReactNode;\n};\n\ntype PreventedRoutesMap = Map<\n  string,\n  {\n    routeKey: string;\n    preventRemove: boolean;\n  }\n>;\n\n/**\n * Util function to transform map of prevented routes to a simpler object.\n */\nconst transformPreventedRoutes = (\n  preventedRoutesMap: PreventedRoutesMap\n): PreventedRoutes => {\n  const preventedRoutesToTransform = [...preventedRoutesMap.values()];\n\n  const preventedRoutes = preventedRoutesToTransform.reduce<PreventedRoutes>(\n    (acc, { routeKey, preventRemove }) => {\n      acc[routeKey] = {\n        preventRemove: acc[routeKey]?.preventRemove || preventRemove,\n      };\n      return acc;\n    },\n    {}\n  );\n\n  return preventedRoutes;\n};\n\n/**\n * Component used for managing which routes have to be prevented from removal in native-stack.\n */\nexport default function PreventRemoveProvider({ children }: Props) {\n  const [parentId] = React.useState(() => nanoid());\n  const [preventedRoutesMap, setPreventedRoutesMap] =\n    React.useState<PreventedRoutesMap>(new Map());\n\n  const navigation = React.useContext(NavigationHelpersContext);\n  const route = React.useContext(NavigationRouteContext);\n\n  const preventRemoveContextValue = React.useContext(PreventRemoveContext);\n  // take `setPreventRemove` from parent context - if exist it means we're in a nested context\n  const setParentPrevented = preventRemoveContextValue?.setPreventRemove;\n\n  const setPreventRemove = useLatestCallback(\n    (id: string, routeKey: string, preventRemove: boolean): void => {\n      if (\n        preventRemove &&\n        (navigation == null ||\n          navigation\n            ?.getState()\n            .routes.every((route) => route.key !== routeKey))\n      ) {\n        throw new Error(\n          `Couldn't find a route with the key ${routeKey}. Is your component inside NavigationContent?`\n        );\n      }\n\n      setPreventedRoutesMap((prevPrevented) => {\n        // values haven't changed - do nothing\n        if (\n          routeKey === prevPrevented.get(id)?.routeKey &&\n          preventRemove === prevPrevented.get(id)?.preventRemove\n        ) {\n          return prevPrevented;\n        }\n\n        const nextPrevented = new Map(prevPrevented);\n\n        if (preventRemove) {\n          nextPrevented.set(id, {\n            routeKey,\n            preventRemove,\n          });\n        } else {\n          nextPrevented.delete(id);\n        }\n\n        return nextPrevented;\n      });\n    }\n  );\n\n  const isPrevented = [...preventedRoutesMap.values()].some(\n    ({ preventRemove }) => preventRemove\n  );\n\n  React.useEffect(() => {\n    if (route?.key !== undefined && setParentPrevented !== undefined) {\n      // when route is defined (and setParentPrevented) it means we're in a nested stack\n      // route.key then will be the route key of parent\n      setParentPrevented(parentId, route.key, isPrevented);\n      return () => {\n        setParentPrevented(parentId, route.key, false);\n      };\n    }\n\n    return;\n  }, [parentId, isPrevented, route?.key, setParentPrevented]);\n\n  const value = React.useMemo(\n    () => ({\n      setPreventRemove,\n      preventedRoutes: transformPreventedRoutes(preventedRoutesMap),\n    }),\n    [setPreventRemove, preventedRoutesMap]\n  );\n\n  return (\n    <PreventRemoveContext.Provider value={value}>\n      {children}\n    </PreventRemoveContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}