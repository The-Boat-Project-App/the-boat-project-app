{"ast":null,"code":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:true});exports.defaultRenderError=defaultRenderError;exports.defaultRenderLoading=defaultRenderLoading;exports.default=void 0;var _react=_interopRequireDefault(require(\"react\"));var _reactNative=require(\"react-native-web/dist/index\");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var styles=_reactNative.StyleSheet.create({alignCenter:{flex:1,alignItems:'center',justifyContent:'center'},errorText:{fontStyle:'italic',fontSize:16}});function defaultRenderError(source){return _react.default.createElement(_reactNative.View,{testID:\"loader-error\",style:styles.alignCenter},_react.default.createElement(_reactNative.Text,{style:styles.errorText},\"Failed to load HTML from \",source.uri));}function defaultRenderLoading(){return _react.default.createElement(_reactNative.View,{testID:\"loader-loading\",style:styles.alignCenter},_react.default.createElement(_reactNative.ActivityIndicator,null));}var sourceLoaderContext=_react.default.createContext({remoteErrorView:defaultRenderError,remoteLoadingView:defaultRenderLoading});var _default=sourceLoaderContext;exports.default=_default;","map":{"version":3,"mappings":"6LAAA,oD,2IAIA,GAAMA,OAAM,CAAGC,wBAAWC,MAAXD,CAAkB,CAC/BE,WAAW,CAAE,CACXC,IAAI,CAAE,CADK,CAEXC,UAAU,CAAE,QAFD,CAGXC,cAAc,CAAE,QAHL,CADkB,CAM/BC,SAAS,CAAE,CACTC,SAAS,CAAE,QADF,CAETC,QAAQ,CAAE,EAFD,CANoB,CAAlBR,CAAf,CAYO,QAASS,mBAAT,CAA4BC,MAA5B,CAAmD,CACxD,MACEC,8BAACC,iBAAD,EAAMC,MAAM,CAAC,cAAb,CAA4BC,KAAK,CAAEf,MAAM,CAACG,WAA1C,EACES,6BAACC,iBAAD,EAAME,KAAK,CAAEf,MAAM,CAACO,SAApB,8BAC4BI,MAAM,CAACK,GADnC,CADF,CADF,CAOD,CAEM,QAASC,qBAAT,EAAgC,CACrC,MACEL,8BAACC,iBAAD,EAAMC,MAAM,CAAC,gBAAb,CAA8BC,KAAK,CAAEf,MAAM,CAACG,WAA5C,EACES,6BAACC,8BAAD,MADF,CADF,CAKD,CAED,GAAMK,oBAAmB,CAAGC,eAAMC,aAAND,CAE1B,CACAE,eAAe,CAAEX,kBADjB,CAEAY,iBAAiB,CAAEL,oBAFnB,CAF0BE,CAA5B,cAOeD","names":["styles","StyleSheet","create","alignCenter","flex","alignItems","justifyContent","errorText","fontStyle","fontSize","defaultRenderError","source","_react","_reactNative","testID","style","uri","defaultRenderLoading","sourceLoaderContext","React","createContext","remoteErrorView","remoteLoadingView"],"sources":["sourceLoaderContext.tsx"],"sourcesContent":["import React from 'react';\nimport { ActivityIndicator, StyleSheet, Text, View } from 'react-native';\nimport { RenderHTMLConfig, HTMLSourceUri } from '../shared-types';\n\nconst styles = StyleSheet.create({\n  alignCenter: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  errorText: {\n    fontStyle: 'italic',\n    fontSize: 16\n  }\n});\n\nexport function defaultRenderError(source: HTMLSourceUri) {\n  return (\n    <View testID=\"loader-error\" style={styles.alignCenter}>\n      <Text style={styles.errorText}>\n        Failed to load HTML from {source.uri}\n      </Text>\n    </View>\n  );\n}\n\nexport function defaultRenderLoading() {\n  return (\n    <View testID=\"loader-loading\" style={styles.alignCenter}>\n      <ActivityIndicator />\n    </View>\n  );\n}\n\nconst sourceLoaderContext = React.createContext<\n  Pick<Required<RenderHTMLConfig>, 'remoteErrorView' | 'remoteLoadingView'>\n>({\n  remoteErrorView: defaultRenderError,\n  remoteLoadingView: defaultRenderLoading\n});\n\nexport default sourceLoaderContext;\n"]},"metadata":{},"sourceType":"script"}