{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import _asyncToGenerator from\"@babel/runtime/helpers/asyncToGenerator\";import{EventEmitter,Platform,UnavailabilityError}from'expo-modules-core';import{useEffect,useState}from'react';import processColor from\"react-native-web/dist/exports/processColor\";import ExpoNavigationBar from\"./ExpoNavigationBar\";var _emitter;function getEmitter(){if(!_emitter){_emitter=new EventEmitter(ExpoNavigationBar);}return _emitter;}export function addVisibilityListener(listener){if(!ExpoNavigationBar.addListener){throw new UnavailabilityError('NavigationBar','addVisibilityListener');}return getEmitter().addListener('ExpoNavigationBar.didChange',listener);}export function setBackgroundColorAsync(_x){return _setBackgroundColorAsync.apply(this,arguments);}function _setBackgroundColorAsync(){_setBackgroundColorAsync=_asyncToGenerator(function*(color){if(Platform.OS!=='android'){console.warn('`setBackgroundColorAsync` is only available on Android');return;}var colorNumber=processColor(color);return yield ExpoNavigationBar.setBackgroundColorAsync(colorNumber);});return _setBackgroundColorAsync.apply(this,arguments);}export function getBackgroundColorAsync(){return _getBackgroundColorAsync.apply(this,arguments);}function _getBackgroundColorAsync(){_getBackgroundColorAsync=_asyncToGenerator(function*(){if(Platform.OS!=='android'){console.warn('`getBackgroundColorAsync` is only available on Android');return\"#00000000\";}return yield ExpoNavigationBar.getBackgroundColorAsync();});return _getBackgroundColorAsync.apply(this,arguments);}export function setBorderColorAsync(_x2){return _setBorderColorAsync.apply(this,arguments);}function _setBorderColorAsync(){_setBorderColorAsync=_asyncToGenerator(function*(color){if(Platform.OS!=='android'){console.warn('`setBorderColorAsync` is only available on Android');return;}var colorNumber=processColor(color);yield ExpoNavigationBar.setBorderColorAsync(colorNumber);});return _setBorderColorAsync.apply(this,arguments);}export function getBorderColorAsync(){return _getBorderColorAsync.apply(this,arguments);}function _getBorderColorAsync(){_getBorderColorAsync=_asyncToGenerator(function*(){if(Platform.OS!=='android'){console.warn('`getBorderColorAsync` is only available on Android');return\"#00000000\";}return yield ExpoNavigationBar.getBorderColorAsync();});return _getBorderColorAsync.apply(this,arguments);}export function setVisibilityAsync(_x3){return _setVisibilityAsync.apply(this,arguments);}function _setVisibilityAsync(){_setVisibilityAsync=_asyncToGenerator(function*(visibility){if(Platform.OS!=='android'){console.warn('`setVisibilityAsync` is only available on Android');return;}yield ExpoNavigationBar.setVisibilityAsync(visibility);});return _setVisibilityAsync.apply(this,arguments);}export function getVisibilityAsync(){return _getVisibilityAsync.apply(this,arguments);}function _getVisibilityAsync(){_getVisibilityAsync=_asyncToGenerator(function*(){if(Platform.OS!=='android'){console.warn('`getVisibilityAsync` is only available on Android');return'hidden';}return ExpoNavigationBar.getVisibilityAsync();});return _getVisibilityAsync.apply(this,arguments);}export function setButtonStyleAsync(_x4){return _setButtonStyleAsync.apply(this,arguments);}function _setButtonStyleAsync(){_setButtonStyleAsync=_asyncToGenerator(function*(style){if(Platform.OS!=='android'){console.warn('`setButtonStyleAsync` is only available on Android');return;}yield ExpoNavigationBar.setButtonStyleAsync(style);});return _setButtonStyleAsync.apply(this,arguments);}export function getButtonStyleAsync(){return _getButtonStyleAsync.apply(this,arguments);}function _getButtonStyleAsync(){_getButtonStyleAsync=_asyncToGenerator(function*(){if(Platform.OS!=='android'){console.warn('`getButtonStyleAsync` is only available on Android');return'light';}return yield ExpoNavigationBar.getButtonStyleAsync();});return _getButtonStyleAsync.apply(this,arguments);}export function setPositionAsync(_x5){return _setPositionAsync.apply(this,arguments);}function _setPositionAsync(){_setPositionAsync=_asyncToGenerator(function*(position){if(Platform.OS!=='android'){console.warn('`setPositionAsync` is only available on Android');return;}yield ExpoNavigationBar.setPositionAsync(position);});return _setPositionAsync.apply(this,arguments);}export function unstable_getPositionAsync(){return _unstable_getPositionAsync.apply(this,arguments);}function _unstable_getPositionAsync(){_unstable_getPositionAsync=_asyncToGenerator(function*(){if(Platform.OS!=='android'){console.warn('`unstable_getPositionAsync` is only available on Android');return'relative';}return yield ExpoNavigationBar.unstable_getPositionAsync();});return _unstable_getPositionAsync.apply(this,arguments);}export function setBehaviorAsync(_x6){return _setBehaviorAsync.apply(this,arguments);}function _setBehaviorAsync(){_setBehaviorAsync=_asyncToGenerator(function*(behavior){if(Platform.OS!=='android'){console.warn('`setBehaviorAsync` is only available on Android');return;}return yield ExpoNavigationBar.setBehaviorAsync(behavior);});return _setBehaviorAsync.apply(this,arguments);}export function getBehaviorAsync(){return _getBehaviorAsync.apply(this,arguments);}function _getBehaviorAsync(){_getBehaviorAsync=_asyncToGenerator(function*(){if(Platform.OS!=='android'){console.warn('`getBehaviorAsync` is only available on Android');return'inset-touch';}return yield ExpoNavigationBar.getBehaviorAsync();});return _getBehaviorAsync.apply(this,arguments);}export function useVisibility(){var _useState=useState(null),_useState2=_slicedToArray(_useState,2),visibility=_useState2[0],setVisible=_useState2[1];useEffect(function(){var isMounted=true;if(Platform.OS!=='android'){setVisible('hidden');return;}getVisibilityAsync().then(function(visibility){if(isMounted){setVisible(visibility);}});var listener=addVisibilityListener(function(_ref){var visibility=_ref.visibility;if(isMounted){setVisible(visibility);}});return function(){listener.remove();isMounted=false;};},[]);return visibility;}export*from\"./NavigationBar.types\";","map":{"version":3,"mappings":"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","names":["EventEmitter","Platform","UnavailabilityError","useEffect","useState","ExpoNavigationBar","_emitter","getEmitter","addVisibilityListener","listener","addListener","setBackgroundColorAsync","color","OS","console","warn","colorNumber","processColor","getBackgroundColorAsync","setBorderColorAsync","getBorderColorAsync","setVisibilityAsync","visibility","getVisibilityAsync","setButtonStyleAsync","style","getButtonStyleAsync","setPositionAsync","position","unstable_getPositionAsync","setBehaviorAsync","behavior","getBehaviorAsync","useVisibility","setVisible","isMounted","then","remove"],"sourceRoot":"","sources":["../src/NavigationBar.ts"],"sourcesContent":["import { EventEmitter, Platform, Subscription, UnavailabilityError } from 'expo-modules-core';\nimport { useEffect, useState } from 'react';\nimport { ColorValue, processColor } from 'react-native';\n\nimport ExpoNavigationBar from './ExpoNavigationBar';\nimport {\n  NavigationBarButtonStyle,\n  NavigationBarBehavior,\n  NavigationBarPosition,\n  NavigationBarVisibility,\n  NavigationBarVisibilityEvent,\n} from './NavigationBar.types';\n\nlet _emitter: EventEmitter;\n\n// Lazily initialize the event emitter because it isn't available on iOS,\n// this enables us to use the same code for all platforms.\nfunction getEmitter() {\n  if (!_emitter) {\n    _emitter = new EventEmitter(ExpoNavigationBar);\n  }\n  return _emitter;\n}\n\n/**\n * Observe changes to the system navigation bar.\n * Due to platform constraints, this callback will also be triggered when the status bar visibility changes.\n *\n * @example\n * ```ts\n * NavigationBar.addVisibilityListener(({ visibility }) => {\n *   // ...\n * });\n * ```\n */\nexport function addVisibilityListener(\n  listener: (event: NavigationBarVisibilityEvent) => void\n): Subscription {\n  // Assert so the type is non-nullable.\n  if (!ExpoNavigationBar.addListener) {\n    throw new UnavailabilityError('NavigationBar', 'addVisibilityListener');\n  }\n  return getEmitter().addListener('ExpoNavigationBar.didChange', listener);\n}\n\n/**\n * Changes the navigation bar's background color.\n *\n * @example\n * ```ts\n * NavigationBar.setBackgroundColorAsync(\"white\");\n * ```\n * @param color Any valid [CSS 3 (SVG) color](http://www.w3.org/TR/css3-color/#svg-color).\n */\nexport async function setBackgroundColorAsync(color: ColorValue): Promise<void> {\n  if (Platform.OS !== 'android') {\n    console.warn('`setBackgroundColorAsync` is only available on Android');\n    return;\n  }\n  const colorNumber = processColor(color);\n  return await ExpoNavigationBar.setBackgroundColorAsync(colorNumber);\n}\n\n/**\n * Gets the navigation bar's background color.\n *\n * @example\n * ```ts\n * const color = await NavigationBar.getBackgroundColorAsync();\n * ```\n * @returns Current navigation bar color in hex format. Returns `#00000000` (transparent) on unsupported platforms (iOS, web).\n */\nexport async function getBackgroundColorAsync(): Promise<ColorValue> {\n  if (Platform.OS !== 'android') {\n    console.warn('`getBackgroundColorAsync` is only available on Android');\n    return `#00000000`;\n  }\n  return await ExpoNavigationBar.getBackgroundColorAsync();\n}\n\n/**\n * Changes the navigation bar's border color.\n *\n * @example\n * ```ts\n * NavigationBar.setBorderColorAsync(\"red\");\n * ```\n * @param color Any valid [CSS 3 (SVG) color](http://www.w3.org/TR/css3-color/#svg-color).\n */\nexport async function setBorderColorAsync(color: ColorValue): Promise<void> {\n  if (Platform.OS !== 'android') {\n    console.warn('`setBorderColorAsync` is only available on Android');\n    return;\n  }\n  const colorNumber = processColor(color);\n  await ExpoNavigationBar.setBorderColorAsync(colorNumber);\n}\n\n/**\n * Gets the navigation bar's top border color, also known as the \"divider color\".\n *\n * @example\n * ```ts\n * const color = await NavigationBar.getBorderColorAsync();\n * ```\n * @returns Navigation bar top border color in hex format. Returns `#00000000` (transparent) on unsupported platforms (iOS, web).\n */\nexport async function getBorderColorAsync(): Promise<ColorValue> {\n  if (Platform.OS !== 'android') {\n    console.warn('`getBorderColorAsync` is only available on Android');\n    return `#00000000`;\n  }\n\n  return await ExpoNavigationBar.getBorderColorAsync();\n}\n\n/**\n * Set the navigation bar's visibility.\n *\n * @example\n * ```ts\n * NavigationBar.setVisibilityAsync(\"hidden\");\n * ```\n * @param color Based on CSS visibility property.\n */\nexport async function setVisibilityAsync(visibility: NavigationBarVisibility): Promise<void> {\n  if (Platform.OS !== 'android') {\n    console.warn('`setVisibilityAsync` is only available on Android');\n    return;\n  }\n  await ExpoNavigationBar.setVisibilityAsync(visibility);\n}\n\n/**\n * Get the navigation bar's visibility.\n *\n * @example\n * ```ts\n * const visibility = await NavigationBar.getVisibilityAsync(\"hidden\");\n * ```\n * @returns Navigation bar's current visibility status. Returns `hidden` on unsupported platforms (iOS, web).\n */\nexport async function getVisibilityAsync(): Promise<NavigationBarVisibility> {\n  if (Platform.OS !== 'android') {\n    console.warn('`getVisibilityAsync` is only available on Android');\n    return 'hidden';\n  }\n  return ExpoNavigationBar.getVisibilityAsync();\n}\n\n/**\n * Changes the navigation bar's button colors between white (`light`) and a dark gray color (`dark`).\n *\n * @example\n * ```ts\n * NavigationBar.setButtonStyleAsync(\"light\");\n * ```\n * @param style Dictates the color of the foreground element color.\n */\nexport async function setButtonStyleAsync(style: NavigationBarButtonStyle): Promise<void> {\n  if (Platform.OS !== 'android') {\n    console.warn('`setButtonStyleAsync` is only available on Android');\n    return;\n  }\n  await ExpoNavigationBar.setButtonStyleAsync(style);\n}\n\n/**\n * Gets the navigation bar's button color styles.\n *\n * @example\n * ```ts\n * const style = await NavigationBar.getButtonStyleAsync();\n * ```\n * @returns Navigation bar foreground element color settings. Returns `light` on unsupported platforms (iOS, web).\n */\nexport async function getButtonStyleAsync(): Promise<NavigationBarButtonStyle> {\n  if (Platform.OS !== 'android') {\n    console.warn('`getButtonStyleAsync` is only available on Android');\n    return 'light';\n  }\n  return await ExpoNavigationBar.getButtonStyleAsync();\n}\n\n/**\n * Sets positioning method used for the navigation bar (and status bar).\n * Setting position `absolute` will float the navigation bar above the content,\n * whereas position `relative` will shrink the screen to inline the navigation bar.\n *\n * When drawing behind the status and navigation bars, ensure the safe area insets are adjusted accordingly.\n *\n * @example\n * ```ts\n * // enables edge-to-edge mode\n * await NavigationBar.setPositionAsync('absolute')\n * // transparent backgrounds to see through\n * await NavigationBar.setBackgroundColorAsync('#ffffff00')\n * ```\n * @param position Based on CSS position property.\n */\nexport async function setPositionAsync(position: NavigationBarPosition): Promise<void> {\n  if (Platform.OS !== 'android') {\n    console.warn('`setPositionAsync` is only available on Android');\n    return;\n  }\n  await ExpoNavigationBar.setPositionAsync(position);\n}\n\n/**\n * Whether the navigation and status bars float above the app (absolute) or sit inline with it (relative).\n * This value can be incorrect if `androidNavigationBar.visible` is used instead of the config plugin `position` property.\n *\n * This method is unstable because the position can be set via another native module and get out of sync.\n * Alternatively, you can get the position by measuring the insets returned by `react-native-safe-area-context`.\n *\n * @example\n * ```ts\n * await NavigationBar.unstable_getPositionAsync()\n * ```\n * @returns Navigation bar positional rendering mode. Returns `relative` on unsupported platforms (iOS, web).\n */\nexport async function unstable_getPositionAsync(): Promise<NavigationBarPosition> {\n  if (Platform.OS !== 'android') {\n    console.warn('`unstable_getPositionAsync` is only available on Android');\n    return 'relative';\n  }\n  return await ExpoNavigationBar.unstable_getPositionAsync();\n}\n\n/**\n * Sets the behavior of the status bar and navigation bar when they are hidden and the user wants to reveal them.\n *\n * For example, if the navigation bar is hidden (`setVisibilityAsync(false)`) and the behavior\n * is `'overlay-swipe'`, the user can swipe from the bottom of the screen to temporarily reveal the navigation bar.\n *\n * - `'overlay-swipe'`: Temporarily reveals the System UI after a swipe gesture (bottom or top) without insetting your App's content.\n * - `'inset-swipe'`: Reveals the System UI after a swipe gesture (bottom or top) and insets your App's content (Safe Area). The System UI is visible until you explicitly hide it again.\n * - `'inset-touch'`: Reveals the System UI after a touch anywhere on the screen and insets your App's content (Safe Area). The System UI is visible until you explicitly hide it again.\n *\n * @example\n * ```ts\n * await NavigationBar.setBehaviorAsync('overlay-swipe')\n * ```\n * @param behavior Dictates the interaction behavior of the navigation bar.\n */\nexport async function setBehaviorAsync(behavior: NavigationBarBehavior): Promise<void> {\n  if (Platform.OS !== 'android') {\n    console.warn('`setBehaviorAsync` is only available on Android');\n    return;\n  }\n  return await ExpoNavigationBar.setBehaviorAsync(behavior);\n}\n\n/**\n * Gets the behavior of the status and navigation bars when the user swipes or touches the screen.\n *\n * @example\n * ```ts\n * await NavigationBar.getBehaviorAsync()\n * ```\n * @returns Navigation bar interaction behavior. Returns `inset-touch` on unsupported platforms (iOS, web).\n */\nexport async function getBehaviorAsync(): Promise<NavigationBarBehavior> {\n  if (Platform.OS !== 'android') {\n    console.warn('`getBehaviorAsync` is only available on Android');\n    return 'inset-touch';\n  }\n  return await ExpoNavigationBar.getBehaviorAsync();\n}\n\n/**\n * React hook that statefully updates with the visibility of the system navigation bar.\n *\n * @example\n * ```ts\n * function App() {\n *   const visibility = NavigationBar.useVisibility()\n *   // React Component...\n * }\n * ```\n * @returns Visibility of the navigation bar, `null` during async initialization.\n */\nexport function useVisibility(): NavigationBarVisibility | null {\n  const [visibility, setVisible] = useState<NavigationBarVisibility | null>(null);\n\n  useEffect(() => {\n    let isMounted = true;\n    if (Platform.OS !== 'android') {\n      setVisible('hidden');\n      return;\n    }\n    getVisibilityAsync().then((visibility) => {\n      if (isMounted) {\n        setVisible(visibility);\n      }\n    });\n\n    const listener = addVisibilityListener(({ visibility }) => {\n      if (isMounted) {\n        setVisible(visibility);\n      }\n    });\n\n    return () => {\n      listener.remove();\n      isMounted = false;\n    };\n  }, []);\n\n  return visibility;\n}\n\nexport * from './NavigationBar.types';\n"]},"metadata":{},"sourceType":"module"}