{"ast":null,"code":"import _asyncToGenerator from\"@babel/runtime/helpers/asyncToGenerator\";import{Platform}from'expo-modules-core';import{getRecoveryPropsToSave}from\"./ErroRecoveryStore\";import ExpoErrorRecovery from\"./ExpoErrorRecovery\";if(Platform.OS!=='web'){var globalHandler=ErrorUtils.getGlobalHandler();ErrorUtils.setGlobalHandler(function(){var _ref=_asyncToGenerator(function*(error,isFatal){if(ExpoErrorRecovery.saveRecoveryProps){yield ExpoErrorRecovery.saveRecoveryProps(getRecoveryPropsToSave());}globalHandler(error,isFatal);});return function(_x,_x2){return _ref.apply(this,arguments);};}());}else if(Platform.OS==='web'&&Platform.isDOMAvailable){window.addEventListener('error',function(){ExpoErrorRecovery.saveRecoveryProps(getRecoveryPropsToSave());});}","map":{"version":3,"mappings":"uEAAA,OAASA,QAAT,KAAyB,mBAAzB,CAEA,OAASC,sBAAT,2BACA,MAAOC,kBAAP,2BAEA,GAAIF,QAAQ,CAACG,EAAT,GAAgB,KAApB,CAA2B,CACzB,GAAMC,cAAa,CAAGC,UAAU,CAACC,gBAAX,EAAtB,CAGAD,UAAU,CAACE,gBAAX,uCAA4B,UAAOC,KAAP,CAAcC,OAAd,CAAyB,CACnD,GAAIP,iBAAiB,CAACQ,iBAAtB,CAAyC,CACvC,KAAMR,kBAAiB,CAACQ,iBAAlB,CAAoCT,sBAAsB,EAA1D,CAAN,CACD,CACDG,aAAa,CAACI,KAAD,CAAQC,OAAR,CAAb,CACD,CALD,mEAMD,CAVD,IAUO,IAAIT,QAAQ,CAACG,EAAT,GAAgB,KAAhB,EAAyBH,QAAQ,CAACW,cAAtC,CAAsD,CAC3DC,MAAM,CAACC,gBAAP,CAAwB,OAAxB,CAAiC,UAAK,CACpCX,iBAAiB,CAACQ,iBAAlB,CAAoCT,sBAAsB,EAA1D,EACD,CAFD,EAGD","names":["Platform","getRecoveryPropsToSave","ExpoErrorRecovery","OS","globalHandler","ErrorUtils","getGlobalHandler","setGlobalHandler","error","isFatal","saveRecoveryProps","isDOMAvailable","window","addEventListener"],"sourceRoot":"","sources":["../src/ErrorRecovery.fx.ts"],"sourcesContent":["import { Platform } from 'expo-modules-core';\n\nimport { getRecoveryPropsToSave } from './ErroRecoveryStore';\nimport ExpoErrorRecovery from './ExpoErrorRecovery';\n\nif (Platform.OS !== 'web') {\n  const globalHandler = ErrorUtils.getGlobalHandler();\n  // ErrorUtils came from react-native\n  // https://github.com/facebook/react-native/blob/1151c096dab17e5d9a6ac05b61aacecd4305f3db/Libraries/vendor/core/ErrorUtils.js#L25\n  ErrorUtils.setGlobalHandler(async (error, isFatal) => {\n    if (ExpoErrorRecovery.saveRecoveryProps) {\n      await ExpoErrorRecovery.saveRecoveryProps(getRecoveryPropsToSave());\n    }\n    globalHandler(error, isFatal);\n  });\n} else if (Platform.OS === 'web' && Platform.isDOMAvailable) {\n  window.addEventListener('error', () => {\n    ExpoErrorRecovery.saveRecoveryProps(getRecoveryPropsToSave());\n  });\n}\n"]},"metadata":{},"sourceType":"module"}