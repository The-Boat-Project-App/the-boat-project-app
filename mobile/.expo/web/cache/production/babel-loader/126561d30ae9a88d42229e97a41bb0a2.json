{"ast":null,"code":"\"use strict\";var _slicedToArray=require(\"@babel/runtime/helpers/slicedToArray\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=useIMGElementState;var _react=require(\"react\");var _reactNative=require(\"react-native-web/dist/index\");var _defaultInitialImageDimensions=_interopRequireDefault(require(\"./defaultInitialImageDimensions\"));var _useIMGNormalizedSource=_interopRequireDefault(require(\"./useIMGNormalizedSource\"));var _useImageConcreteDimensions=_interopRequireDefault(require(\"./useImageConcreteDimensions\"));var _getIMGState=require(\"./getIMGState\");var _useImageSpecifiedDimensions=_interopRequireDefault(require(\"./useImageSpecifiedDimensions\"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function getImageSizeAsync(_ref){var uri=_ref.uri,headers=_ref.headers;return new Promise(function(onsuccess,onerror){var onImageDimensionsSuccess=function onImageDimensionsSuccess(width,height){return onsuccess({width:width,height:height});};if(headers){_reactNative.Image.getSizeWithHeaders(uri,headers,onImageDimensionsSuccess,onerror);}else{_reactNative.Image.getSize(uri,onImageDimensionsSuccess,onerror);}});}function useImageNaturalDimensions(props){var source=props.source,cachedNaturalDimensions=props.cachedNaturalDimensions;var _ref2=(0,_react.useState)(cachedNaturalDimensions||null),_ref3=_slicedToArray(_ref2,2),naturalDimensions=_ref3[0],setNaturalDimensions=_ref3[1];var _ref4=cachedNaturalDimensions||{},cachedNaturalWidth=_ref4.width,cachedNaturalHeight=_ref4.height;var _ref5=(0,_react.useState)(null),_ref6=_slicedToArray(_ref5,2),error=_ref6[0],setError=_ref6[1];(0,_react.useEffect)(function resetOnURIChange(){setNaturalDimensions(cachedNaturalWidth!=null&&cachedNaturalHeight!=null?{width:cachedNaturalWidth,height:cachedNaturalHeight}:null);setError(null);},[cachedNaturalHeight,cachedNaturalWidth,source.uri]);return{onNaturalDimensions:setNaturalDimensions,onError:setError,naturalDimensions:naturalDimensions,error:error};}function useFetchedNaturalDimensions(props){var source=props.source,cachedNaturalDimensions=props.cachedNaturalDimensions;var _useImageNaturalDimen=useImageNaturalDimensions(props),error=_useImageNaturalDimen.error,naturalDimensions=_useImageNaturalDimen.naturalDimensions,onError=_useImageNaturalDimen.onError,onNaturalDimensions=_useImageNaturalDimen.onNaturalDimensions;var hasCachedDimensions=!!cachedNaturalDimensions;(0,_react.useEffect)(function fetchPhysicalDimensions(){var cancelled=false;if(source.uri&&!hasCachedDimensions){getImageSizeAsync({uri:source.uri,headers:source.headers}).then(function(dimensions){return!cancelled&&onNaturalDimensions(dimensions);}).catch(function(e){return!cancelled&&onError(e||{});});return function(){cancelled=true;};}},[source.uri,source.headers,onNaturalDimensions,onError,hasCachedDimensions]);return{naturalDimensions:naturalDimensions,error:error,onError:onError,onNaturalDimensions:onNaturalDimensions};}function useIMGElementState(props){var alt=props.alt,altColor=props.altColor,source=props.source,contentWidth=props.contentWidth,computeMaxWidth=props.computeMaxWidth,objectFit=props.objectFit,_props$initialDimensi=props.initialDimensions,initialDimensions=_props$initialDimensi===void 0?_defaultInitialImageDimensions.default:_props$initialDimensi,cachedNaturalDimensions=props.cachedNaturalDimensions;var _ref7=(0,_useImageSpecifiedDimensions.default)(props),flatStyle=_ref7.flatStyle,specifiedDimensions=_ref7.specifiedDimensions;var nomalizedSource=(0,_useIMGNormalizedSource.default)({specifiedDimensions:specifiedDimensions,source:source});var _useFetchedNaturalDim=useFetchedNaturalDimensions({source:nomalizedSource,specifiedDimensions:specifiedDimensions,cachedNaturalDimensions:cachedNaturalDimensions}),naturalDimensions=_useFetchedNaturalDim.naturalDimensions,onError=_useFetchedNaturalDim.onError,error=_useFetchedNaturalDim.error;var concreteDimensions=(0,_useImageConcreteDimensions.default)({flatStyle:flatStyle,naturalDimensions:naturalDimensions,specifiedDimensions:specifiedDimensions,computeMaxWidth:computeMaxWidth,contentWidth:contentWidth});return(0,_getIMGState.getIMGState)({error:error,alt:alt,altColor:altColor,concreteDimensions:concreteDimensions,containerStyle:flatStyle,initialDimensions:initialDimensions,objectFit:objectFit,onError:onError,source:nomalizedSource});}","map":{"version":3,"mappings":"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","names":["getImageSizeAsync","uri","headers","Promise","onsuccess","onerror","onImageDimensionsSuccess","width","height","Image","getSizeWithHeaders","getSize","useImageNaturalDimensions","props","source","cachedNaturalDimensions","naturalDimensions","setNaturalDimensions","cachedNaturalWidth","cachedNaturalHeight","error","setError","resetOnURIChange","onNaturalDimensions","onError","useFetchedNaturalDimensions","hasCachedDimensions","fetchPhysicalDimensions","cancelled","then","dimensions","catch","e","useIMGElementState","alt","altColor","contentWidth","computeMaxWidth","objectFit","initialDimensions","defaultImageInitialDimensions","flatStyle","specifiedDimensions","nomalizedSource","concreteDimensions","containerStyle"],"sources":["useIMGElementState.ts"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { Image, ImageURISource } from 'react-native';\nimport {\n  UseIMGElementStateProps,\n  IMGElementState,\n  IncompleteImageDimensions\n} from './img-types';\nimport defaultImageInitialDimensions from './defaultInitialImageDimensions';\nimport useIMGNormalizedSource from './useIMGNormalizedSource';\nimport { ImageDimensions } from '../shared-types';\nimport useImageConcreteDimensions from './useImageConcreteDimensions';\nimport { getIMGState } from './getIMGState';\nimport useImageSpecifiedDimensions from './useImageSpecifiedDimensions';\n\nfunction getImageSizeAsync({\n  uri,\n  headers\n}: {\n  headers: any;\n  uri: string;\n}): Promise<ImageDimensions> {\n  return new Promise<ImageDimensions>((onsuccess, onerror) => {\n    const onImageDimensionsSuccess = (width: number, height: number) =>\n      onsuccess({ width, height });\n    if (headers) {\n      Image.getSizeWithHeaders(uri, headers, onImageDimensionsSuccess, onerror);\n    } else {\n      Image.getSize(uri, onImageDimensionsSuccess, onerror);\n    }\n  });\n}\n\nfunction useImageNaturalDimensions<P extends UseIMGElementStateProps>(props: {\n  cachedNaturalDimensions?: ImageDimensions;\n  source: ImageURISource;\n  specifiedDimensions: IncompleteImageDimensions;\n}) {\n  const { source, cachedNaturalDimensions } = props;\n  const [naturalDimensions, setNaturalDimensions] = useState<\n    P['cachedNaturalDimensions'] extends ImageDimensions\n      ? ImageDimensions\n      : ImageDimensions | null\n  >((cachedNaturalDimensions as any) || null);\n  const { width: cachedNaturalWidth, height: cachedNaturalHeight } =\n    cachedNaturalDimensions || {};\n  const [error, setError] = useState<null | Error>(null);\n  useEffect(\n    function resetOnURIChange() {\n      setNaturalDimensions(\n        (cachedNaturalWidth != null && cachedNaturalHeight != null\n          ? { width: cachedNaturalWidth, height: cachedNaturalHeight }\n          : null) as any\n      );\n      setError(null);\n    },\n    [cachedNaturalHeight, cachedNaturalWidth, source.uri]\n  );\n  return {\n    onNaturalDimensions: setNaturalDimensions,\n    onError: setError,\n    naturalDimensions,\n    error\n  };\n}\n\nfunction useFetchedNaturalDimensions(props: {\n  cachedNaturalDimensions?: ImageDimensions;\n  source: ImageURISource;\n  specifiedDimensions: IncompleteImageDimensions;\n}) {\n  const { source, cachedNaturalDimensions } = props;\n  const { error, naturalDimensions, onError, onNaturalDimensions } =\n    useImageNaturalDimensions(props);\n  const hasCachedDimensions = !!cachedNaturalDimensions;\n  useEffect(\n    function fetchPhysicalDimensions() {\n      let cancelled = false;\n      if (source.uri && !hasCachedDimensions) {\n        getImageSizeAsync({ uri: source.uri, headers: source.headers })\n          .then((dimensions) => !cancelled && onNaturalDimensions(dimensions))\n          .catch((e) => !cancelled && onError(e || {}));\n        return () => {\n          cancelled = true;\n        };\n      }\n    },\n    [\n      source.uri,\n      source.headers,\n      onNaturalDimensions,\n      onError,\n      hasCachedDimensions\n    ]\n  );\n  return {\n    naturalDimensions,\n    error,\n    onError,\n    onNaturalDimensions\n  };\n}\n\n/**\n * This hook will compute concrete dimensions from image natural dimensions and\n * constraints. It will fetch the image and get its dimensions.\n *\n * @remarks If you know the dimensions beforehand, use\n * {@link useIMGElementStateWithCache} instead to save a network request and\n * prevent a layout shift.\n */\nexport default function useIMGElementState(\n  props: UseIMGElementStateProps\n): IMGElementState {\n  const {\n    alt,\n    altColor,\n    source,\n    contentWidth,\n    computeMaxWidth,\n    objectFit,\n    initialDimensions = defaultImageInitialDimensions,\n    cachedNaturalDimensions\n  } = props;\n  const { flatStyle, specifiedDimensions } = useImageSpecifiedDimensions(props);\n  const nomalizedSource = useIMGNormalizedSource({\n    specifiedDimensions,\n    source\n  });\n  const { naturalDimensions, onError, error } = useFetchedNaturalDimensions({\n    source: nomalizedSource,\n    specifiedDimensions,\n    cachedNaturalDimensions\n  });\n  const concreteDimensions = useImageConcreteDimensions({\n    flatStyle,\n    naturalDimensions,\n    specifiedDimensions,\n    computeMaxWidth,\n    contentWidth\n  });\n\n  return getIMGState({\n    error,\n    alt,\n    altColor,\n    concreteDimensions,\n    containerStyle: flatStyle,\n    initialDimensions,\n    objectFit,\n    onError,\n    source: nomalizedSource\n  });\n}\n"]},"metadata":{},"sourceType":"script"}