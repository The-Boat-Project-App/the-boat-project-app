{"ast":null,"code":"\"use strict\";var _objectWithoutProperties=require(\"@babel/runtime/helpers/objectWithoutProperties\");var _excluded=[\"style\"];Object.defineProperty(exports,\"__esModule\",{value:true});exports.useIMGElementProps=useIMGElementProps;exports.default=void 0;var _react=_interopRequireWildcard(require(\"react\"));var _IMGElement=_interopRequireDefault(require(\"../elements/IMGElement\"));var _SharedPropsProvider=require(\"../context/SharedPropsProvider\");var _reactNative=require(\"react-native-web/dist/index\");var _useNormalizedUrl=_interopRequireDefault(require(\"../hooks/useNormalizedUrl\"));var _RenderersPropsProvider=require(\"../context/RenderersPropsProvider\");var _useContentWidth=_interopRequireDefault(require(\"../hooks/useContentWidth\"));var _getNativePropsForTNode=_interopRequireDefault(require(\"../helpers/getNativePropsForTNode\"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _getRequireWildcardCache(nodeInterop){if(typeof WeakMap!==\"function\")return null;var cacheBabelInterop=new WeakMap();var cacheNodeInterop=new WeakMap();return(_getRequireWildcardCache=function _getRequireWildcardCache(nodeInterop){return nodeInterop?cacheNodeInterop:cacheBabelInterop;})(nodeInterop);}function _interopRequireWildcard(obj,nodeInterop){if(!nodeInterop&&obj&&obj.__esModule){return obj;}if(obj===null||typeof obj!==\"object\"&&typeof obj!==\"function\"){return{default:obj};}var cache=_getRequireWildcardCache(nodeInterop);if(cache&&cache.has(obj)){return cache.get(obj);}var newObj={};var hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var key in obj){if(key!==\"default\"&&Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;if(desc&&(desc.get||desc.set)){Object.defineProperty(newObj,key,desc);}else{newObj[key]=obj[key];}}}newObj.default=obj;if(cache){cache.set(obj,newObj);}return newObj;}function useIMGElementProps(props){var tnode=props.tnode;var contentWidth=(0,_useContentWidth.default)();var _ref=(0,_RenderersPropsProvider.useRendererProps)('img'),initialDimensions=_ref.initialDimensions,enableExperimentalPercentWidth=_ref.enableExperimentalPercentWidth;var computeImagesMaxWidth=(0,_SharedPropsProvider.useComputeMaxWidthForTag)('img');var src=tnode.attributes.src||'';var source={uri:(0,_useNormalizedUrl.default)(src)};var _ref2=(0,_getNativePropsForTNode.default)(props),rawStyle=_ref2.style,containerProps=_objectWithoutProperties(_ref2,_excluded);var style=(0,_react.useMemo)(function(){return rawStyle?_reactNative.StyleSheet.flatten(rawStyle):{};},[rawStyle]);return{contentWidth:contentWidth,containerProps:containerProps,enableExperimentalPercentWidth:enableExperimentalPercentWidth,initialDimensions:initialDimensions,source:source,style:style,testID:'img',computeMaxWidth:computeImagesMaxWidth,alt:tnode.attributes.alt,altColor:tnode.styles.nativeTextFlow.color,width:tnode.attributes.width,height:tnode.attributes.height,objectFit:tnode.styles.webBlockRet.objectFit};}var IMGRenderer=function IMGRenderer(props){return _react.default.createElement(_IMGElement.default,useIMGElementProps(props));};var _default=IMGRenderer;exports.default=_default;","map":{"version":3,"mappings":"0PAAA,qDAEA,0EAEA,mE,wDAGA,mFACA,yEACA,iFACA,8qCAMO,QAASA,mBAAT,CACLC,KADK,CAEY,CACjB,GAAQC,MAAR,CAAkBD,KAAlB,CAAQC,KAAR,CAEA,GAAMC,aAAY,CAAG,8BAArB,CACA,SACE,6CAAiB,KAAjB,CADF,CAAQC,iBAAR,MAAQA,iBAAR,CAA2BC,8BAA3B,MAA2BA,8BAA3B,CAEA,GAAMC,sBAAqB,CAAG,kDAAyB,KAAzB,CAA9B,CACA,GAAMC,IAAG,CAAGL,KAAK,CAACM,UAANN,CAAiBK,GAAjBL,EAAwB,EAApC,CACA,GAAMO,OAAM,CAAG,CAAEC,GAAG,CAAE,8BAAiBH,GAAjB,CAAP,CAAf,CACA,UAA+C,oCAAuBN,KAAvB,CAA/C,CAAeU,QAAf,OAAQC,KAAR,CAA4BC,cAA5B,2CACA,GAAMD,MAAK,CAAG,mBACZ,iBAAOD,SAAQ,CAAIG,wBAAWC,OAAXD,CAAmBH,QAAnBG,CAAJ,CAAkD,EAAjE,EADY,CAEZ,CAACH,QAAD,CAFY,CAAd,CAIA,MAAO,CACLR,YADK,CACLA,YADK,CAELU,cAFK,CAELA,cAFK,CAGLR,8BAHK,CAGLA,8BAHK,CAILD,iBAJK,CAILA,iBAJK,CAKLK,MALK,CAKLA,MALK,CAMLG,KANK,CAMLA,KANK,CAOLI,MAAM,CAAE,KAPH,CAQLC,eAAe,CAAEX,qBARZ,CASLY,GAAG,CAAEhB,KAAK,CAACM,UAANN,CAAiBgB,GATjB,CAULC,QAAQ,CAAEjB,KAAK,CAACkB,MAANlB,CAAamB,cAAbnB,CAA4BoB,KAVjC,CAWLC,KAAK,CAAErB,KAAK,CAACM,UAANN,CAAiBqB,KAXnB,CAYLC,MAAM,CAAEtB,KAAK,CAACM,UAANN,CAAiBsB,MAZpB,CAaLC,SAAS,CAAEvB,KAAK,CAACkB,MAANlB,CAAawB,WAAbxB,CAAyBuB,SAb/B,CAAP,CAeD,CAED,GAAME,YAAkC,CAAI1B,QAAtC0B,YAAsC1B,MAAD,CAAW,CACpD,MAAO2B,gBAAMC,aAAND,CAAoBE,mBAApBF,CAAgC5B,kBAAkB,CAACC,KAAD,CAAlD2B,CAAP,CADF,eAIeD","names":["useIMGElementProps","props","tnode","contentWidth","initialDimensions","enableExperimentalPercentWidth","computeImagesMaxWidth","src","attributes","source","uri","rawStyle","style","containerProps","StyleSheet","flatten","testID","computeMaxWidth","alt","altColor","styles","nativeTextFlow","color","width","height","objectFit","webBlockRet","IMGRenderer","React","createElement","IMGElement"],"sources":["IMGRenderer.tsx"],"sourcesContent":["import React, { useMemo } from 'react';\nimport { TBlock } from '@native-html/transient-render-engine';\nimport IMGElement, { IMGElementProps } from '../elements/IMGElement';\nimport { InternalBlockRenderer } from '../render/render-types';\nimport { useComputeMaxWidthForTag } from '../context/SharedPropsProvider';\nimport { ImageStyle, StyleSheet } from 'react-native';\nimport { InternalRendererProps } from '../shared-types';\nimport useNormalizedUrl from '../hooks/useNormalizedUrl';\nimport { useRendererProps } from '../context/RenderersPropsProvider';\nimport useContentWidth from '../hooks/useContentWidth';\nimport getNativePropsForTNode from '../helpers/getNativePropsForTNode';\n\n/**\n * A hook to produce props consumable by {@link IMGElement} component\n * from custom renderer props.\n */\nexport function useIMGElementProps(\n  props: InternalRendererProps<TBlock>\n): IMGElementProps {\n  const { tnode } = props;\n\n  const contentWidth = useContentWidth();\n  const { initialDimensions, enableExperimentalPercentWidth } =\n    useRendererProps('img');\n  const computeImagesMaxWidth = useComputeMaxWidthForTag('img');\n  const src = tnode.attributes.src || '';\n  const source = { uri: useNormalizedUrl(src) };\n  const { style: rawStyle, ...containerProps } = getNativePropsForTNode(props);\n  const style = useMemo<ImageStyle>(\n    () => (rawStyle ? (StyleSheet.flatten(rawStyle) as ImageStyle) : {}),\n    [rawStyle]\n  );\n  return {\n    contentWidth,\n    containerProps,\n    enableExperimentalPercentWidth,\n    initialDimensions,\n    source,\n    style,\n    testID: 'img',\n    computeMaxWidth: computeImagesMaxWidth,\n    alt: tnode.attributes.alt,\n    altColor: tnode.styles.nativeTextFlow.color as string,\n    width: tnode.attributes.width,\n    height: tnode.attributes.height,\n    objectFit: tnode.styles.webBlockRet.objectFit\n  };\n}\n\nconst IMGRenderer: InternalBlockRenderer = (props) => {\n  return React.createElement(IMGElement, useIMGElementProps(props));\n};\n\nexport default IMGRenderer;\n"]},"metadata":{},"sourceType":"script"}