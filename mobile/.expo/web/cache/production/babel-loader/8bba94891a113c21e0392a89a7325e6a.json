{"ast":null,"code":"import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"columns\",\"space\",\"spacingX\",\"spacingY\",\"minChildWidth\",\"children\"];function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import React from'react';import{Box,HStack,VStack}from\"../../primitives\";import{useThemeProps}from\"../../../hooks/useThemeProps\";import{useHasResponsiveProps}from\"../../../hooks/useHasResponsiveProps\";var DEBUG_STYLES=false?{rows:{borderWidth:'1px'},cols:{borderWidth:'1px'}}:{rows:{},cols:{}};var SimpleGrid=function SimpleGrid(props,ref){var _useThemeProps=useThemeProps('SimpleGrid',props),columns=_useThemeProps.columns,space=_useThemeProps.space,spacingX=_useThemeProps.spacingX,spacingY=_useThemeProps.spacingY,minChildWidth=_useThemeProps.minChildWidth,children=_useThemeProps.children,remainingProps=_objectWithoutProperties(_useThemeProps,_excluded);if(useHasResponsiveProps(props)){return React.createElement(React.Fragment,null);}var cellSpacing=space!==null&&space!==void 0?space:0;var cellSpacingX=spacingX!==null&&spacingX!==void 0?spacingX:cellSpacing;var cellSpacingY=spacingY!==null&&spacingY!==void 0?spacingY:cellSpacing;var childrenArray=React.Children.toArray(children);if(columns){var rowSlices=[];for(var i=0;i<childrenArray.length;i=i+columns){rowSlices.push(childrenArray.slice(i,i+columns));}return React.createElement(VStack,_extends({},DEBUG_STYLES.rows,{space:cellSpacingY},remainingProps,{ref:ref}),rowSlices.map(function(row,rowIndex){return React.createElement(HStack,{space:cellSpacingX,key:rowIndex},row.map(function(col){return React.createElement(Box,_extends({},DEBUG_STYLES.cols,{key:col.key}),col);}));}));}else if(minChildWidth){return React.createElement(Box,_extends({flexDirection:\"row\",flexWrap:\"wrap\",justifyContent:\"center\"},remainingProps,{ref:ref}),childrenArray.map(function(col){return React.createElement(Box,_extends({},DEBUG_STYLES.cols,{mx:cellSpacingX,my:cellSpacingY,key:col.key,minWidth:minChildWidth}),col);}));}return React.createElement(React.Fragment,null);};export default React.memo(React.forwardRef(SimpleGrid));","map":{"version":3,"mappings":"+bAAA,MAAOA,MAAP,KAAkB,OAAlB,CACA,OAASC,GAAT,CAAcC,MAAd,CAAsBC,MAAtB,wBAGA,OAASC,aAAT,oCACA,OAASC,qBAAT,4CAEA,GAAMC,aAAY,CAAG,MACjB,CACEC,IAAI,CAAE,CACJC,WAAW,CAAE,KADT,CADR,CAIEC,IAAI,CAAE,CACJD,WAAW,CAAE,KADT,CAJR,CADiB,CASjB,CACED,IAAI,CAAE,EADR,CAEEE,IAAI,CAAE,EAFR,CATJ,CAcA,GAAMC,WAAU,CAAG,QAAbA,WAAa,CAACC,KAAD,CAA0BC,GAA1B,CAAqD,CACtE,mBAQIR,aAAa,CAAC,YAAD,CAAeO,KAAf,CARjB,CACEE,OADF,gBACEA,OADF,CAEEC,KAFF,gBAEEA,KAFF,CAGEC,QAHF,gBAGEA,QAHF,CAIEC,QAJF,gBAIEA,QAJF,CAKEC,aALF,gBAKEA,aALF,CAMEC,QANF,gBAMEA,QANF,CAOKC,cAPL,oDAUA,GAAId,qBAAqB,CAACM,KAAD,CAAzB,CAAkC,CAChC,MAAOX,yCAAP,CACD,CACD,GAAIoB,YAAW,CAAGN,KAAH,OAAGA,OAAH,SAAGA,OAAS,CAA3B,CACA,GAAIO,aAAY,CAAGN,QAAH,OAAGA,UAAH,SAAGA,UAAYK,WAA/B,CACA,GAAIE,aAAY,CAAGN,QAAH,OAAGA,UAAH,SAAGA,UAAYI,WAA/B,CAEA,GAAMG,cAAa,CAAGvB,KAAK,CAACwB,QAANxB,CAAeyB,OAAfzB,CAAuBkB,QAAvBlB,CAAtB,CAEA,GAAIa,OAAJ,CAAa,CACX,GAAIa,UAAS,CAAG,EAAhB,CACA,IAAK,GAAIC,EAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGJ,aAAa,CAACK,MAAlC,CAA0CD,CAAC,CAAGA,CAAC,CAAGd,OAAlD,CAA2D,CACzDa,SAAS,CAACG,IAAVH,CAAeH,aAAa,CAACO,KAAdP,CAAoBI,CAApBJ,CAAuBI,CAAC,CAAGd,OAA3BU,CAAfG,EACD,CAED,MACE1B,qBAACG,MAAD,aACMG,YAAY,CAACC,IADnB,EAEEO,KAAK,CAAEQ,YAFT,EAGMH,cAHN,EAIEP,GAAG,CAAEA,GAJP,GAMGc,SAAS,CAACK,GAAVL,CAAc,SAACM,GAAD,CAAMC,QAAN,CAAmB,CAChC,MACEjC,qBAACE,MAAD,EAAQY,KAAK,CAAEO,YAAf,CAA6Ba,GAAG,CAAED,QAAlC,EACGD,GAAG,CAACD,GAAJC,CAASG,YAAD,CAAc,CACrB,MACEnC,qBAACC,GAAD,aAASK,YAAY,CAACG,IAAtB,EAA4ByB,GAAG,CAAEC,GAAG,CAACD,GAArC,GACGC,GADH,CADF,CADD,EADH,CADF,CADD,EANH,CADF,CANF,KA+BK,IAAIlB,aAAJ,CAAmB,CACtB,MACEjB,qBAACC,GAAD,WACEmC,aAAa,CAAC,KADhB,CAEEC,QAAQ,CAAC,MAFX,CAGEC,cAAc,CAAC,QAHjB,EAIMnB,cAJN,EAKEP,GAAG,CAAEA,GALP,GAOGW,aAAa,CAACQ,GAAdR,CAAmBY,YAAD,CAAc,CAC/B,MACEnC,qBAACC,GAAD,aACMK,YAAY,CAACG,IADnB,EAEE8B,EAAE,CAAElB,YAFN,CAGEmB,EAAE,CAAElB,YAHN,CAIEY,GAAG,CAAEC,GAAG,CAACD,GAJX,CAKEO,QAAQ,CAAExB,aALZ,GAOGkB,GAPH,CADF,CADD,EAPH,CADF,CAuBD,CAED,MAAOnC,yCAAP,CA7EF,EA+EA,cAAeA,MAAK,CAAC0C,IAAN1C,CAAWA,KAAK,CAAC2C,UAAN3C,CAAiBU,UAAjBV,CAAXA,CAAf","names":["React","Box","HStack","VStack","useThemeProps","useHasResponsiveProps","DEBUG_STYLES","rows","borderWidth","cols","SimpleGrid","props","ref","columns","space","spacingX","spacingY","minChildWidth","children","remainingProps","cellSpacing","cellSpacingX","cellSpacingY","childrenArray","Children","toArray","rowSlices","i","length","push","slice","map","row","rowIndex","key","col","flexDirection","flexWrap","justifyContent","mx","my","minWidth","memo","forwardRef"],"sources":["SimpleGrid.tsx"],"sourcesContent":["import React from 'react';\nimport { Box, HStack, VStack } from '../../primitives';\nimport type { ISimpleGridProps } from './types';\n// const isDebug = process.env.NODE_ENV !== 'production';\nimport { useThemeProps } from '../../../hooks/useThemeProps';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst DEBUG_STYLES = false\n  ? {\n      rows: {\n        borderWidth: '1px',\n      },\n      cols: {\n        borderWidth: '1px',\n      },\n    }\n  : {\n      rows: {},\n      cols: {},\n    };\n\nconst SimpleGrid = (props: ISimpleGridProps, ref?: any): JSX.Element => {\n  const {\n    columns,\n    space,\n    spacingX,\n    spacingY,\n    minChildWidth,\n    children,\n    ...remainingProps\n  } = useThemeProps('SimpleGrid', props);\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return <></>;\n  }\n  let cellSpacing = space ?? 0;\n  let cellSpacingX = spacingX ?? cellSpacing;\n  let cellSpacingY = spacingY ?? cellSpacing;\n\n  const childrenArray = React.Children.toArray(children);\n\n  if (columns) {\n    let rowSlices = [];\n    for (let i = 0; i < childrenArray.length; i = i + columns) {\n      rowSlices.push(childrenArray.slice(i, i + columns));\n    }\n\n    return (\n      <VStack\n        {...DEBUG_STYLES.rows}\n        space={cellSpacingY}\n        {...remainingProps}\n        ref={ref}\n      >\n        {rowSlices.map((row, rowIndex) => {\n          return (\n            <HStack space={cellSpacingX} key={rowIndex}>\n              {row.map((col: any) => {\n                return (\n                  <Box {...DEBUG_STYLES.cols} key={col.key}>\n                    {col}\n                  </Box>\n                );\n              })}\n            </HStack>\n          );\n        })}\n      </VStack>\n    );\n  }\n  // Needs more work for empty spacing i.e. auto-fit. Current workaround is to use wrap and let the columns be created dynamically\n  // https://css-tricks.com/auto-sizing-columns-css-grid-auto-fill-vs-auto-fit/\n  else if (minChildWidth) {\n    return (\n      <Box\n        flexDirection=\"row\"\n        flexWrap=\"wrap\"\n        justifyContent=\"center\"\n        {...remainingProps}\n        ref={ref}\n      >\n        {childrenArray.map((col: any) => {\n          return (\n            <Box\n              {...DEBUG_STYLES.cols}\n              mx={cellSpacingX}\n              my={cellSpacingY}\n              key={col.key}\n              minWidth={minChildWidth}\n            >\n              {col}\n            </Box>\n          );\n        })}\n      </Box>\n    );\n  }\n\n  return <></>;\n};\nexport default React.memo(React.forwardRef(SimpleGrid));\n"]},"metadata":{},"sourceType":"module"}