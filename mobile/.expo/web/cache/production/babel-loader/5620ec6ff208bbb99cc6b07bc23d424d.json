{"ast":null,"code":"import{getPathFromState,NavigationContainerRefContext,NavigationHelpersContext}from'@react-navigation/core';import*as React from'react';import Platform from\"react-native-web/dist/exports/Platform\";import LinkingContext from\"./LinkingContext\";import useLinkTo from\"./useLinkTo\";var getStateFromParams=function getStateFromParams(params){if(params!==null&&params!==void 0&&params.state){return params.state;}if(params!==null&&params!==void 0&&params.screen){return{routes:[{name:params.screen,params:params.params,state:params.screen?getStateFromParams(params.params):undefined}]};}return undefined;};export default function useLinkProps(_ref){var _options$getPathFromS;var to=_ref.to,action=_ref.action;var root=React.useContext(NavigationContainerRefContext);var navigation=React.useContext(NavigationHelpersContext);var _React$useContext=React.useContext(LinkingContext),options=_React$useContext.options;var linkTo=useLinkTo();var onPress=function onPress(e){var _e$currentTarget;var shouldHandle=false;if(Platform.OS!=='web'||!e){shouldHandle=e?!e.defaultPrevented:true;}else if(!e.defaultPrevented&&!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)&&(e.button==null||e.button===0)&&[undefined,null,'','self'].includes((_e$currentTarget=e.currentTarget)===null||_e$currentTarget===void 0?void 0:_e$currentTarget.target)){e.preventDefault();shouldHandle=true;}if(shouldHandle){if(action){if(navigation){navigation.dispatch(action);}else if(root){root.dispatch(action);}else{throw new Error(\"Couldn't find a navigation object. Is your component inside NavigationContainer?\");}}else{linkTo(to);}}};var getPathFromStateHelper=(_options$getPathFromS=options===null||options===void 0?void 0:options.getPathFromState)!==null&&_options$getPathFromS!==void 0?_options$getPathFromS:getPathFromState;var href=typeof to==='string'?to:getPathFromStateHelper({routes:[{name:to.screen,params:to.params,state:getStateFromParams(to.params)}]},options===null||options===void 0?void 0:options.config);return{href:href,accessibilityRole:'link',onPress:onPress};}","map":{"version":3,"mappings":"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","names":["getPathFromState","NavigationContainerRefContext","NavigationHelpersContext","React","LinkingContext","useLinkTo","getStateFromParams","params","state","screen","routes","name","undefined","useLinkProps","to","action","root","useContext","navigation","options","linkTo","onPress","e","shouldHandle","Platform","OS","defaultPrevented","metaKey","altKey","ctrlKey","shiftKey","button","includes","currentTarget","_e$currentTarget","target","preventDefault","dispatch","Error","getPathFromStateHelper","href","config","accessibilityRole"],"sources":["useLinkProps.tsx"],"sourcesContent":["import {\n  getPathFromState,\n  NavigationAction,\n  NavigationContainerRefContext,\n  NavigationHelpersContext,\n  NavigatorScreenParams,\n  ParamListBase,\n} from '@react-navigation/core';\nimport type { NavigationState, PartialState } from '@react-navigation/routers';\nimport * as React from 'react';\nimport { GestureResponderEvent, Platform } from 'react-native';\n\nimport LinkingContext from './LinkingContext';\nimport useLinkTo, { To } from './useLinkTo';\n\ntype Props<ParamList extends ReactNavigation.RootParamList> = {\n  to: To<ParamList>;\n  action?: NavigationAction;\n};\n\nconst getStateFromParams = (\n  params: NavigatorScreenParams<ParamListBase, NavigationState> | undefined\n): PartialState<NavigationState> | NavigationState | undefined => {\n  if (params?.state) {\n    return params.state;\n  }\n\n  if (params?.screen) {\n    return {\n      routes: [\n        {\n          name: params.screen,\n          params: params.params,\n          // @ts-expect-error\n          state: params.screen\n            ? getStateFromParams(\n                params.params as\n                  | NavigatorScreenParams<ParamListBase, NavigationState>\n                  | undefined\n              )\n            : undefined,\n        },\n      ],\n    };\n  }\n\n  return undefined;\n};\n\n/**\n * Hook to get props for an anchor tag so it can work with in page navigation.\n *\n * @param props.to Absolute path to screen (e.g. `/feeds/hot`).\n * @param props.action Optional action to use for in-page navigation. By default, the path is parsed to an action based on linking config.\n */\nexport default function useLinkProps<\n  ParamList extends ReactNavigation.RootParamList\n>({ to, action }: Props<ParamList>) {\n  const root = React.useContext(NavigationContainerRefContext);\n  const navigation = React.useContext(NavigationHelpersContext);\n  const { options } = React.useContext(LinkingContext);\n  const linkTo = useLinkTo<ParamList>();\n\n  const onPress = (\n    e?: React.MouseEvent<HTMLAnchorElement, MouseEvent> | GestureResponderEvent\n  ) => {\n    let shouldHandle = false;\n\n    if (Platform.OS !== 'web' || !e) {\n      shouldHandle = e ? !e.defaultPrevented : true;\n    } else if (\n      !e.defaultPrevented && // onPress prevented default\n      // @ts-expect-error: these properties exist on web, but not in React Native\n      !(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && // ignore clicks with modifier keys\n      // @ts-expect-error: these properties exist on web, but not in React Native\n      (e.button == null || e.button === 0) && // ignore everything but left clicks\n      // @ts-expect-error: these properties exist on web, but not in React Native\n      [undefined, null, '', 'self'].includes(e.currentTarget?.target) // let browser handle \"target=_blank\" etc.\n    ) {\n      e.preventDefault();\n      shouldHandle = true;\n    }\n\n    if (shouldHandle) {\n      if (action) {\n        if (navigation) {\n          navigation.dispatch(action);\n        } else if (root) {\n          root.dispatch(action);\n        } else {\n          throw new Error(\n            \"Couldn't find a navigation object. Is your component inside NavigationContainer?\"\n          );\n        }\n      } else {\n        linkTo(to);\n      }\n    }\n  };\n\n  const getPathFromStateHelper = options?.getPathFromState ?? getPathFromState;\n\n  const href =\n    typeof to === 'string'\n      ? to\n      : getPathFromStateHelper(\n          {\n            routes: [\n              {\n                name: to.screen,\n                // @ts-expect-error\n                params: to.params,\n                // @ts-expect-error\n                state: getStateFromParams(to.params),\n              },\n            ],\n          },\n          options?.config\n        );\n\n  return {\n    href,\n    accessibilityRole: 'link' as const,\n    onPress,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}