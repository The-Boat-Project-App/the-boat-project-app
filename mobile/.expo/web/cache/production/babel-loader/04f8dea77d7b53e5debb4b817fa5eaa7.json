{"ast":null,"code":"import{useNavigation,useRoute}from'@react-navigation/core';import*as React from'react';function getScrollableNode(ref){if(ref.current==null){return null;}if('scrollToTop'in ref.current||'scrollTo'in ref.current||'scrollToOffset'in ref.current||'scrollResponderScrollTo'in ref.current){return ref.current;}else if('getScrollResponder'in ref.current){return ref.current.getScrollResponder();}else if('getNode'in ref.current){return ref.current.getNode();}else{return ref.current;}}export default function useScrollToTop(ref){var navigation=useNavigation();var route=useRoute();React.useEffect(function(){var current=navigation;while(current&&current.getState().type!=='tab'){current=current.getParent();}if(!current){return;}var unsubscribe=current.addListener('tabPress',function(e){var isFocused=navigation.isFocused();var isFirst=navigation===current||navigation.getState().routes[0].key===route.key;requestAnimationFrame(function(){var scrollable=getScrollableNode(ref);if(isFocused&&isFirst&&scrollable&&!e.defaultPrevented){if('scrollToTop'in scrollable){scrollable.scrollToTop();}else if('scrollTo'in scrollable){scrollable.scrollTo({x:0,y:0,animated:true});}else if('scrollToOffset'in scrollable){scrollable.scrollToOffset({offset:0,animated:true});}else if('scrollResponderScrollTo'in scrollable){scrollable.scrollResponderScrollTo({y:0,animated:true});}}});});return unsubscribe;},[navigation,ref,route.key]);}","map":{"version":3,"mappings":"AAAA,OAAmBA,aAAnB,CAAkCC,QAAlC,KAAkD,wBAAlD,CACA,MAAO,GAAKC,MAAZ,KAAuB,OAAvB,CAeA,QAASC,kBAAT,CAA2BC,GAA3B,CAAoE,CAClE,GAAIA,GAAG,CAACC,OAAJD,EAAe,IAAnB,CAAyB,CACvB,MAAO,KAAP,CACD,CAED,GACE,eAAiBA,IAAG,CAACC,OAArB,EACA,YAAcD,IAAG,CAACC,OADlB,EAEA,kBAAoBD,IAAG,CAACC,OAFxB,EAGA,2BAA6BD,IAAG,CAACC,OAJnC,CAKE,CAEA,MAAOD,IAAG,CAACC,OAAX,CAPF,KAQO,IAAI,sBAAwBD,IAAG,CAACC,OAAhC,CAAyC,CAG9C,MAAOD,IAAG,CAACC,OAAJD,CAAYE,kBAAZF,EAAP,CAHK,KAIA,IAAI,WAAaA,IAAG,CAACC,OAArB,CAA8B,CAKnC,MAAOD,IAAG,CAACC,OAAJD,CAAYG,OAAZH,EAAP,CALK,KAMA,CACL,MAAOA,IAAG,CAACC,OAAX,CACD,CACF,CAED,cAAe,SAASG,eAAT,CACbJ,GADa,CAEb,CACA,GAAMK,WAAU,CAAGT,aAAa,EAAhC,CACA,GAAMU,MAAK,CAAGT,QAAQ,EAAtB,CAEAC,KAAK,CAACS,SAANT,CAAgB,UAAM,CACpB,GAAIG,QAAO,CAAGI,UAAd,CAIA,MAAOJ,OAAO,EAAIA,OAAO,CAACO,QAARP,GAAmBQ,IAAnBR,GAA4B,KAA9C,CAAqD,CACnDA,OAAO,CAAGA,OAAO,CAACS,SAART,EAAVA,CACD,CAED,GAAI,CAACA,OAAL,CAAc,CACZ,OACD,CAED,GAAMU,YAAW,CAAGV,OAAO,CAACW,WAARX,CAIlB,UAJkBA,CAKjBY,UAAD,CAAmC,CAEjC,GAAMC,UAAS,CAAGT,UAAU,CAACS,SAAXT,EAAlB,CAIA,GAAMU,QAAO,CACXV,UAAU,GAAKJ,OAAfI,EACAA,UAAU,CAACG,QAAXH,GAAsBW,MAAtBX,CAA6B,CAA7BA,EAAgCY,GAAhCZ,GAAwCC,KAAK,CAACW,GAFhD,CAMAC,qBAAqB,CAAC,UAAM,CAC1B,GAAMC,WAAU,CAAGpB,iBAAiB,CAACC,GAAD,CAApC,CAEA,GAAIc,SAAS,EAAIC,OAAbD,EAAwBK,UAAxBL,EAAsC,CAACD,CAAC,CAACO,gBAA7C,CAA+D,CAC7D,GAAI,eAAiBD,WAArB,CAAiC,CAC/BA,UAAU,CAACE,WAAXF,GADF,KAEO,IAAI,YAAcA,WAAlB,CAA8B,CACnCA,UAAU,CAACG,QAAXH,CAAoB,CAAEI,CAAC,CAAE,CAAL,CAAQC,CAAC,CAAE,CAAX,CAAcC,QAAQ,CAAE,IAAxB,CAApBN,EADK,KAEA,IAAI,kBAAoBA,WAAxB,CAAoC,CACzCA,UAAU,CAACO,cAAXP,CAA0B,CAAEQ,MAAM,CAAE,CAAV,CAAaF,QAAQ,CAAE,IAAvB,CAA1BN,EADK,KAEA,IAAI,2BAA6BA,WAAjC,CAA6C,CAClDA,UAAU,CAACS,uBAAXT,CAAmC,CAAEK,CAAC,CAAE,CAAL,CAAQC,QAAQ,CAAE,IAAlB,CAAnCN,EACD,CACF,CAbkB,EAArBD,CAjBgB,EAApB,CAmCA,MAAOP,YAAP,CAhDF,EAiDG,CAACN,UAAD,CAAaL,GAAb,CAAkBM,KAAK,CAACW,GAAxB,CAjDHnB,EAkDD","names":["useNavigation","useRoute","React","getScrollableNode","ref","current","getScrollResponder","getNode","useScrollToTop","navigation","route","useEffect","getState","type","getParent","unsubscribe","addListener","e","isFocused","isFirst","routes","key","requestAnimationFrame","scrollable","defaultPrevented","scrollToTop","scrollTo","x","y","animated","scrollToOffset","offset","scrollResponderScrollTo"],"sources":["useScrollToTop.tsx"],"sourcesContent":["import { EventArg, useNavigation, useRoute } from '@react-navigation/core';\nimport * as React from 'react';\n\ntype ScrollOptions = { x?: number; y?: number; animated?: boolean };\n\ntype ScrollableView =\n  | { scrollToTop(): void }\n  | { scrollTo(options: ScrollOptions): void }\n  | { scrollToOffset(options: { offset?: number; animated?: boolean }): void }\n  | { scrollResponderScrollTo(options: ScrollOptions): void };\n\ntype ScrollableWrapper =\n  | { getScrollResponder(): React.ReactNode }\n  | { getNode(): ScrollableView }\n  | ScrollableView;\n\nfunction getScrollableNode(ref: React.RefObject<ScrollableWrapper>) {\n  if (ref.current == null) {\n    return null;\n  }\n\n  if (\n    'scrollToTop' in ref.current ||\n    'scrollTo' in ref.current ||\n    'scrollToOffset' in ref.current ||\n    'scrollResponderScrollTo' in ref.current\n  ) {\n    // This is already a scrollable node.\n    return ref.current;\n  } else if ('getScrollResponder' in ref.current) {\n    // If the view is a wrapper like FlatList, SectionList etc.\n    // We need to use `getScrollResponder` to get access to the scroll responder\n    return ref.current.getScrollResponder();\n  } else if ('getNode' in ref.current) {\n    // When a `ScrollView` is wraped in `Animated.createAnimatedComponent`\n    // we need to use `getNode` to get the ref to the actual scrollview.\n    // Note that `getNode` is deprecated in newer versions of react-native\n    // this is why we check if we already have a scrollable node above.\n    return ref.current.getNode();\n  } else {\n    return ref.current;\n  }\n}\n\nexport default function useScrollToTop(\n  ref: React.RefObject<ScrollableWrapper>\n) {\n  const navigation = useNavigation();\n  const route = useRoute();\n\n  React.useEffect(() => {\n    let current = navigation;\n\n    // The screen might be inside another navigator such as stack nested in tabs\n    // We need to find the closest tab navigator and add the listener there\n    while (current && current.getState().type !== 'tab') {\n      current = current.getParent();\n    }\n\n    if (!current) {\n      return;\n    }\n\n    const unsubscribe = current.addListener(\n      // We don't wanna import tab types here to avoid extra deps\n      // in addition, there are multiple tab implementations\n      // @ts-expect-error\n      'tabPress',\n      (e: EventArg<'tabPress', true>) => {\n        // We should scroll to top only when the screen is focused\n        const isFocused = navigation.isFocused();\n\n        // In a nested stack navigator, tab press resets the stack to first screen\n        // So we should scroll to top only when we are on first screen\n        const isFirst =\n          navigation === current ||\n          navigation.getState().routes[0].key === route.key;\n\n        // Run the operation in the next frame so we're sure all listeners have been run\n        // This is necessary to know if preventDefault() has been called\n        requestAnimationFrame(() => {\n          const scrollable = getScrollableNode(ref) as ScrollableWrapper;\n\n          if (isFocused && isFirst && scrollable && !e.defaultPrevented) {\n            if ('scrollToTop' in scrollable) {\n              scrollable.scrollToTop();\n            } else if ('scrollTo' in scrollable) {\n              scrollable.scrollTo({ x: 0, y: 0, animated: true });\n            } else if ('scrollToOffset' in scrollable) {\n              scrollable.scrollToOffset({ offset: 0, animated: true });\n            } else if ('scrollResponderScrollTo' in scrollable) {\n              scrollable.scrollResponderScrollTo({ y: 0, animated: true });\n            }\n          }\n        });\n      }\n    );\n\n    return unsubscribe;\n  }, [navigation, ref, route.key]);\n}\n"]},"metadata":{},"sourceType":"module"}