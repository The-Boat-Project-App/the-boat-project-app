{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}import{OverlayContainer}from'@react-native-aria/overlays';import React from'react';import Modal from\"react-native-web/dist/exports/Modal\";import Platform from\"react-native-web/dist/exports/Platform\";import{useKeyboardDismissable}from\"../../../hooks\";import{ExitAnimationContext}from\"./ExitAnimationContext\";export function Overlay(_ref){var children=_ref.children,isOpen=_ref.isOpen,_ref$useRNModal=_ref.useRNModal,useRNModal=_ref$useRNModal===void 0?false:_ref$useRNModal,_ref$useRNModalOnAndr=_ref.useRNModalOnAndroid,useRNModalOnAndroid=_ref$useRNModalOnAndr===void 0?false:_ref$useRNModalOnAndr,_ref$isKeyboardDismis=_ref.isKeyboardDismissable,isKeyboardDismissable=_ref$isKeyboardDismis===void 0?true:_ref$isKeyboardDismis,_ref$animationPreset=_ref.animationPreset,animationPreset=_ref$animationPreset===void 0?'fade':_ref$animationPreset,onRequestClose=_ref.onRequestClose,style=_ref.style,unmountOnExit=_ref.unmountOnExit;var _React$useState=React.useState(!isOpen),_React$useState2=_slicedToArray(_React$useState,2),exited=_React$useState2[0],setExited=_React$useState2[1];useKeyboardDismissable({enabled:isOpen&&isKeyboardDismissable,callback:onRequestClose?onRequestClose:function(){}});var styleObj=_objectSpread({},style);if(animationPreset==='slide'){styleObj.overflow='hidden';styleObj.display='flex';}else{styleObj.display=exited&&!isOpen?'none':'flex';}if(unmountOnExit&&!isOpen&&exited){return null;}if(useRNModal||useRNModalOnAndroid&&Platform.OS==='android'){return React.createElement(ExitAnimationContext.Provider,{value:{exited:exited,setExited:setExited}},React.createElement(Modal,{statusBarTranslucent:true,transparent:true,visible:isOpen,onRequestClose:onRequestClose,animationType:animationPreset},children));}if(unmountOnExit&&!isOpen&&exited){return null;}return React.createElement(OverlayContainer,{style:_objectSpread({},styleObj)},React.createElement(ExitAnimationContext.Provider,{value:{exited:exited,setExited:setExited}},children));}","map":{"version":3,"mappings":"y4BACA,OAASA,gBAAT,KAAiC,6BAAjC,CACA,MAAOC,MAAP,KAAkB,OAAlB,C,oHAGA,OAASC,sBAAT,sBACA,OAASC,oBAAT,8BAeA,MAAO,SAASC,QAAT,MAWW,IAVhBC,SAUgB,MAVhBA,QAUgB,CAThBC,MASgB,MAThBA,MASgB,sBARhBC,UAQgB,CARhBA,UAQgB,0BARH,KAQG,4CAPhBC,mBAOgB,CAPhBA,mBAOgB,gCAPM,KAON,kDANhBC,qBAMgB,CANhBA,qBAMgB,gCANQ,IAMR,iDAJhBC,eAIgB,CAJhBA,eAIgB,+BAJE,MAIF,sBAHhBC,cAGgB,MAHhBA,cAGgB,CAFhBC,KAEgB,MAFhBA,KAEgB,CADhBC,aACgB,MADhBA,aACgB,CAChB,oBAA4BZ,KAAK,CAACa,QAANb,CAAe,CAACK,MAAhBL,CAA5B,oDAAOc,MAAP,qBAAeC,SAAf,qBAEAd,sBAAsB,CAAC,CACrBe,OAAO,CAAEX,MAAM,EAAIG,qBADE,CAErBS,QAAQ,CAAEP,cAAc,CAAGA,cAAH,CAAoB,UAAM,CAAE,CAF/B,CAAD,CAAtBT,CAIA,GAAMiB,SAAQ,kBAAQP,KAAR,CAAd,CACA,GAAIF,eAAe,GAAK,OAAxB,CAAiC,CAC/BS,QAAQ,CAACC,QAATD,CAAoB,QAApBA,CACAA,QAAQ,CAACE,OAATF,CAAmB,MAAnBA,CAFF,KAGO,CACLA,QAAQ,CAACE,OAATF,CAAmBJ,MAAM,EAAI,CAACT,MAAXS,CAAoB,MAApBA,CAA6B,MAAhDI,CACD,CAED,GAAIN,aAAa,EAAI,CAACP,MAAlBO,EAA4BE,MAAhC,CAAwC,CACtC,MAAO,KAAP,CACD,CAED,GAAIR,UAAU,EAAKC,mBAAmB,EAAIc,QAAQ,CAACC,EAATD,GAAgB,SAA1D,CAAsE,CACpE,MACErB,qBAACE,oBAAD,CAAsBqB,QAAtB,EAA+BC,KAAK,CAAE,CAAEV,MAAF,CAAEA,MAAF,CAAUC,mBAAV,CAAtC,EACEf,oBAACyB,KAAD,EACEC,oBAAoB,KADtB,CAEEC,WAAW,KAFb,CAGEC,OAAO,CAAEvB,MAHX,CAIEK,cAAc,CAAEA,cAJlB,CAKEmB,aAAa,CAAEpB,eALjB,EAOGL,QAPH,CADF,CADF,CAaD,CAED,GAAIQ,aAAa,EAAI,CAACP,MAAlBO,EAA4BE,MAAhC,CAAwC,CACtC,MAAO,KAAP,CACD,CAED,MAEEd,qBAACD,gBAAD,EAAkBY,KAAK,kBAAOO,QAAP,CAAvB,EACElB,oBAACE,oBAAD,CAAsBqB,QAAtB,EAA+BC,KAAK,CAAE,CAAEV,MAAF,CAAEA,MAAF,CAAUC,mBAAV,CAAtC,EACGX,QADH,CADF,CAFF,CAQD","names":["OverlayContainer","React","useKeyboardDismissable","ExitAnimationContext","Overlay","children","isOpen","useRNModal","useRNModalOnAndroid","isKeyboardDismissable","animationPreset","onRequestClose","style","unmountOnExit","useState","exited","setExited","enabled","callback","styleObj","overflow","display","Platform","OS","Provider","value","Modal","statusBarTranslucent","transparent","visible","animationType"],"sources":["Overlay.tsx"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { OverlayContainer } from '@react-native-aria/overlays';\nimport React from 'react';\nimport type { ViewStyle } from 'react-native';\nimport { Modal, Platform } from 'react-native';\nimport { useKeyboardDismissable } from '../../../hooks';\nimport { ExitAnimationContext } from './ExitAnimationContext';\n\nexport interface IOverlayProps {\n  isOpen?: boolean;\n  children?: any;\n  // We use RN modal on android if needed as it supports shifting accessiblity focus to the opened view. IOS automatically shifts focus if an absolutely placed view appears in front.\n  useRNModalOnAndroid?: boolean;\n  useRNModal?: boolean;\n  onRequestClose?: any;\n  isKeyboardDismissable?: boolean;\n  animationPreset?: 'fade' | 'slide' | 'none';\n  style?: ViewStyle;\n  unmountOnExit?: boolean;\n}\n\nexport function Overlay({\n  children,\n  isOpen,\n  useRNModal = false,\n  useRNModalOnAndroid = false,\n  isKeyboardDismissable = true,\n  //@ts-ignore\n  animationPreset = 'fade',\n  onRequestClose,\n  style,\n  unmountOnExit,\n}: IOverlayProps) {\n  const [exited, setExited] = React.useState(!isOpen);\n\n  useKeyboardDismissable({\n    enabled: isOpen && isKeyboardDismissable,\n    callback: onRequestClose ? onRequestClose : () => {},\n  });\n  const styleObj = { ...style };\n  if (animationPreset === 'slide') {\n    styleObj.overflow = 'hidden';\n    styleObj.display = 'flex';\n  } else {\n    styleObj.display = exited && !isOpen ? 'none' : 'flex';\n  }\n\n  if (unmountOnExit && !isOpen && exited) {\n    return null;\n  }\n\n  if (useRNModal || (useRNModalOnAndroid && Platform.OS === 'android')) {\n    return (\n      <ExitAnimationContext.Provider value={{ exited, setExited }}>\n        <Modal\n          statusBarTranslucent\n          transparent\n          visible={isOpen}\n          onRequestClose={onRequestClose}\n          animationType={animationPreset}\n        >\n          {children}\n        </Modal>\n      </ExitAnimationContext.Provider>\n    );\n  }\n\n  if (unmountOnExit && !isOpen && exited) {\n    return null;\n  }\n\n  return (\n    //@ts-ignore\n    <OverlayContainer style={{ ...styleObj }}>\n      <ExitAnimationContext.Provider value={{ exited, setExited }}>\n        {children}\n      </ExitAnimationContext.Provider>\n    </OverlayContainer>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}