{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"children\"];import{memo}from'react';import{usePropsResolution}from\"../../../hooks/useThemeProps\";import{useBreakpointValue,useTheme,useToken}from\"../../../hooks\";import{useColorMode}from\"../../../core/color-mode/hooks\";import Platform from\"react-native-web/dist/exports/Platform\";export function Hidden(_ref){var children=_ref.children,props=_objectWithoutProperties(_ref,_excluded);var _usePropsResolution=usePropsResolution('Hidden',props,{},{ignoreProps:['only','platform']}),from=_usePropsResolution.from,till=_usePropsResolution.till,only=_usePropsResolution.only,platform=_usePropsResolution.platform,colorMode=_usePropsResolution.colorMode;var _useTheme=useTheme(),breakpoints=_useTheme.breakpoints;var currentColorMode=useColorMode();var breakpointValueObject=Object.keys(breakpoints).reduce(function(obj,val){obj[val]=val;return obj;},{});var breakpointValue=useBreakpointValue(breakpointValueObject);var _useToken=useToken('breakpoints',[breakpointValue]),_useToken2=_slicedToArray(_useToken,1),currentBreakpointValue=_useToken2[0];var _useToken3=useToken('breakpoints',[from]),_useToken4=_slicedToArray(_useToken3,1),fromBreakPointValue=_useToken4[0];var _useToken5=useToken('breakpoints',[till]),_useToken6=_slicedToArray(_useToken5,1),tillBreakPointValue=_useToken6[0];if(!from&&!till&&!only&&!colorMode&&!platform){return null;}else if(from&&till&&currentBreakpointValue>=fromBreakPointValue&&currentBreakpointValue<tillBreakPointValue){return null;}else if(from&&!till&&currentBreakpointValue>=fromBreakPointValue){return null;}else if(till&&!from&&currentBreakpointValue<tillBreakPointValue){return null;}else if(Array.isArray(only)&&only.includes(breakpointValue)||only===breakpointValue){return null;}else if(Array.isArray(platform)&&platform.includes(Platform.OS)||platform===Platform.OS){return null;}else if(colorMode===currentColorMode.colorMode){return null;}return children;}export default memo(Hidden);","map":{"version":3,"mappings":"iLAAA,OAASA,IAAT,KAAqB,OAArB,CAEA,OAASC,kBAAT,oCACA,OAASC,kBAAT,CAA6BC,QAA7B,CAAuCC,QAAvC,sBACA,OAASC,YAAT,sC,6DAGA,MAAO,SAASC,OAAT,MAAsD,IAApCC,SAAoC,MAApCA,QAAoC,CAAvBC,KAAuB,0CAC3D,wBAAkDP,kBAAkB,CAClE,QADkE,CAElEO,KAFkE,CAGlE,EAHkE,CAIlE,CACEC,WAAW,CAAE,CAAC,MAAD,CAAS,UAAT,CADf,CAJkE,CAApE,CAAQC,IAAR,qBAAQA,IAAR,CAAcC,IAAd,qBAAcA,IAAd,CAAoBC,IAApB,qBAAoBA,IAApB,CAA0BC,QAA1B,qBAA0BA,QAA1B,CAAoCC,SAApC,qBAAoCA,SAApC,CAQA,cAAwBX,QAAQ,EAAhC,CAAQY,WAAR,WAAQA,WAAR,CACA,GAAMC,iBAAgB,CAAGX,YAAY,EAArC,CAEA,GAAMY,sBAAqB,CAAGC,MAAM,CAACC,IAAPD,CAAYH,WAAZG,EAAyBE,MAAzBF,CAC5B,SAACG,GAAD,CAAWC,GAAX,CAA2B,CACzBD,GAAG,CAACC,GAAD,CAAHD,CAAWC,GAAXD,CACA,MAAOA,IAAP,CAH0B,EAK5B,EAL4BH,CAA9B,CAOA,GAAMK,gBAAe,CAAGrB,kBAAkB,CAACe,qBAAD,CAA1C,CACA,cAAiCb,QAAQ,CAAC,aAAD,CAAgB,CAACmB,eAAD,CAAhB,CAAzC,wCAAOC,sBAAP,eACA,eAA8BpB,QAAQ,CAAC,aAAD,CAAgB,CAACM,IAAD,CAAhB,CAAtC,yCAAOe,mBAAP,eACA,eAA8BrB,QAAQ,CAAC,aAAD,CAAgB,CAACO,IAAD,CAAhB,CAAtC,yCAAOe,mBAAP,eAGA,GAAI,CAAChB,IAAD,EAAS,CAACC,IAAV,EAAkB,CAACC,IAAnB,EAA2B,CAACE,SAA5B,EAAyC,CAACD,QAA9C,CAAwD,CACtD,MAAO,KAAP,CADF,KAKK,IACHH,IAAI,EACJC,IADAD,EAEAc,sBAAsB,EAAIC,mBAF1Bf,EAGAc,sBAAsB,CAAGE,mBAJtB,CAKH,CACA,MAAO,KAAP,CANG,KAUA,IAAIhB,IAAI,EAAI,CAACC,IAATD,EAAiBc,sBAAsB,EAAIC,mBAA/C,CAAoE,CACvE,MAAO,KAAP,CADG,KAKA,IAAId,IAAI,EAAI,CAACD,IAATC,EAAiBa,sBAAsB,CAAGE,mBAA9C,CAAmE,CACtE,MAAO,KAAP,CADG,KAMA,IACFC,KAAK,CAACC,OAAND,CAAcf,IAAde,GAAuBf,IAAI,CAACiB,QAALjB,CAAcW,eAAdX,CAAvBe,EACDf,IAAI,GAAKW,eAFN,CAGH,CACA,MAAO,KAAP,CAJG,KAQA,IACFI,KAAK,CAACC,OAAND,CAAcd,QAAdc,GAA2Bd,QAAQ,CAACgB,QAAThB,CAAkBiB,QAAQ,CAACC,EAA3BlB,CAA3Bc,EACDd,QAAQ,GAAKiB,QAAQ,CAACC,EAFnB,CAGH,CACA,MAAO,KAAP,CAJG,KAOA,IAAIjB,SAAS,GAAKE,gBAAgB,CAACF,SAAnC,CAA8C,CACjD,MAAO,KAAP,CACD,CACD,MAAOP,SAAP,CACD,CAED,cAAeP,KAAI,CAACM,MAAD,CAAnB","names":["memo","usePropsResolution","useBreakpointValue","useTheme","useToken","useColorMode","Hidden","children","props","ignoreProps","from","till","only","platform","colorMode","breakpoints","currentColorMode","breakpointValueObject","Object","keys","reduce","obj","val","breakpointValue","currentBreakpointValue","fromBreakPointValue","tillBreakPointValue","Array","isArray","includes","Platform","OS"],"sources":["index.tsx"],"sourcesContent":["import { memo } from 'react';\nimport type { IHiddenProps } from './types';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useBreakpointValue, useTheme, useToken } from '../../../hooks';\nimport { useColorMode } from '../../../core/color-mode/hooks';\nimport { Platform } from 'react-native';\n\nexport function Hidden({ children, ...props }: IHiddenProps) {\n  const { from, till, only, platform, colorMode } = usePropsResolution(\n    'Hidden',\n    props,\n    {},\n    {\n      ignoreProps: ['only', 'platform'],\n    }\n  );\n  const { breakpoints } = useTheme();\n  const currentColorMode = useColorMode();\n\n  const breakpointValueObject = Object.keys(breakpoints).reduce(\n    (obj: any, val: string) => {\n      obj[val] = val;\n      return obj;\n    },\n    {}\n  );\n  const breakpointValue = useBreakpointValue(breakpointValueObject);\n  const [currentBreakpointValue] = useToken('breakpoints', [breakpointValue]);\n  const [fromBreakPointValue] = useToken('breakpoints', [from]);\n  const [tillBreakPointValue] = useToken('breakpoints', [till]);\n\n  //if no prop is passed, it will hide the element wrapped with hidden\n  if (!from && !till && !only && !colorMode && !platform) {\n    return null;\n  }\n\n  //if from and till prop exists, it will hide the element wrapped accordingly\n  else if (\n    from &&\n    till &&\n    currentBreakpointValue >= fromBreakPointValue &&\n    currentBreakpointValue < tillBreakPointValue\n  ) {\n    return null;\n  }\n\n  //if from prop exists, it will hide the element wrapped starting from that breakpoint.\n  else if (from && !till && currentBreakpointValue >= fromBreakPointValue) {\n    return null;\n  }\n\n  //if till prop exists, it will hide the element wrapped starting from  0 till that breakpoint.\n  else if (till && !from && currentBreakpointValue < tillBreakPointValue) {\n    return null;\n  }\n\n  //if only prop exists and is array, check that array consists current breakpoint value, and if that exists, hide on that breakpoint to next breakpoint.\n  // if only prop is string, hide on that breakpoint to next breakpoint.\n  else if (\n    (Array.isArray(only) && only.includes(breakpointValue)) ||\n    only === breakpointValue\n  ) {\n    return null;\n  }\n  //if platform prop exists and is array, check that array consists current platform value, and if that exists, hide on that platform.\n  // if platform prop is string, hide on that platform.\n  else if (\n    (Array.isArray(platform) && platform.includes(Platform.OS)) ||\n    platform === Platform.OS\n  ) {\n    return null;\n  }\n  //if colormode prop is valid string, hide on that colormode.\n  else if (colorMode === currentColorMode.colorMode) {\n    return null;\n  }\n  return children;\n}\n\nexport default memo(Hidden);\nexport type { IHiddenProps };\n"]},"metadata":{},"sourceType":"module"}