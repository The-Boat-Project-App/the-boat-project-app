{"ast":null,"code":"function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import React,{memo,forwardRef}from'react';import Box from\"../../primitives/Box\";import{usePropsResolution}from\"../../../hooks\";import{AlertDialogContext}from\"./Context\";import{useHasResponsiveProps}from\"../../../hooks/useHasResponsiveProps\";var AlertDialogContent=function AlertDialogContent(props,ref){var newProps=usePropsResolution('AlertDialogContent',props);var _React$useContext=React.useContext(AlertDialogContext),contentSize=_React$useContext.contentSize,initialFocusRef=_React$useContext.initialFocusRef,finalFocusRef=_React$useContext.finalFocusRef,handleClose=_React$useContext.handleClose;React.useEffect(function(){var finalRefVal=finalFocusRef?finalFocusRef.current:null;if(initialFocusRef&&initialFocusRef.current){initialFocusRef.current.focus();}return function(){if(finalRefVal){finalRefVal.focus();}};},[initialFocusRef,finalFocusRef]);if(useHasResponsiveProps(props)){return null;}return React.createElement(Box,_extends({},contentSize,newProps,{ref:ref,onAccessibilityEscape:handleClose,\"aria-modal\":\"true\",accessibilityRole:\"alert\",accessibilityViewIsModal:true}));};export default memo(forwardRef(AlertDialogContent));","map":{"version":3,"mappings":"uRAAA,MAAOA,MAAP,EAAgBC,IAAhB,CAAsBC,UAAtB,KAAwC,OAAxC,CACA,MAAOC,IAAP,4BACA,OAASC,kBAAT,sBACA,OAASC,kBAAT,iBACA,OAASC,qBAAT,4CAEA,GAAMC,mBAAkB,CAAG,QAArBA,mBAAqB,CAACC,KAAD,CAAmBC,GAAnB,CAAiC,CAC1D,GAAMC,SAAQ,CAAGN,kBAAkB,CAAC,oBAAD,CAAuBI,KAAvB,CAAnC,CACA,sBAKIR,KAAK,CAACW,UAANX,CAAiBK,kBAAjBL,CALJ,CACEY,WADF,mBACEA,WADF,CAEEC,eAFF,mBAEEA,eAFF,CAGEC,aAHF,mBAGEA,aAHF,CAIEC,WAJF,mBAIEA,WAJF,CAMAf,KAAK,CAACgB,SAANhB,CAAgB,UAAM,CACpB,GAAMiB,YAAW,CAAGH,aAAa,CAAGA,aAAa,CAACI,OAAjB,CAA2B,IAA5D,CACA,GAAIL,eAAe,EAAIA,eAAe,CAACK,OAAvC,CAAgD,CAE9CL,eAAe,CAACK,OAAhBL,CAAwBM,KAAxBN,GACD,CAED,MAAO,WAAM,CACX,GAAII,WAAJ,CAAiB,CAEfA,WAAW,CAACE,KAAZF,GACD,CAJH,EAPF,EAaG,CAACJ,eAAD,CAAkBC,aAAlB,CAbHd,EAgBA,GAAIM,qBAAqB,CAACE,KAAD,CAAzB,CAAkC,CAChC,MAAO,KAAP,CACD,CACD,MACER,qBAACG,GAAD,aACMS,WADN,CAEMF,QAFN,EAGED,GAAG,CAAEA,GAHP,CAIEW,qBAAqB,CAAEL,WAJzB,CAME,aAAW,MANb,CAQEM,iBAAiB,CAAC,OARpB,CASEC,wBAAwB,KAT1B,GADF,CA3BF,EA0CA,cAAerB,KAAI,CAACC,UAAU,CAACK,kBAAD,CAAX,CAAnB","names":["React","memo","forwardRef","Box","usePropsResolution","AlertDialogContext","useHasResponsiveProps","AlertDialogContent","props","ref","newProps","useContext","contentSize","initialFocusRef","finalFocusRef","handleClose","useEffect","finalRefVal","current","focus","onAccessibilityEscape","accessibilityRole","accessibilityViewIsModal"],"sources":["AlertDialogContent.tsx"],"sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport Box, { IBoxProps } from '../../primitives/Box';\nimport { usePropsResolution } from '../../../hooks';\nimport { AlertDialogContext } from './Context';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst AlertDialogContent = (props: IBoxProps, ref?: any) => {\n  const newProps = usePropsResolution('AlertDialogContent', props);\n  const {\n    contentSize,\n    initialFocusRef,\n    finalFocusRef,\n    handleClose,\n  } = React.useContext(AlertDialogContext);\n  React.useEffect(() => {\n    const finalRefVal = finalFocusRef ? finalFocusRef.current : null;\n    if (initialFocusRef && initialFocusRef.current) {\n      //@ts-ignore\n      initialFocusRef.current.focus();\n    }\n\n    return () => {\n      if (finalRefVal) {\n        //@ts-ignore\n        finalRefVal.focus();\n      }\n    };\n  }, [initialFocusRef, finalFocusRef]);\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <Box\n      {...contentSize}\n      {...newProps}\n      ref={ref}\n      onAccessibilityEscape={handleClose}\n      //@ts-ignore - web only\n      aria-modal=\"true\"\n      //@ts-ignore - web only\n      accessibilityRole=\"alert\"\n      accessibilityViewIsModal\n    />\n  );\n};\n\nexport default memo(forwardRef(AlertDialogContent));\n"]},"metadata":{},"sourceType":"module"}