{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import*as React from'react';import useNavigation from\"./useNavigation\";export default function useNavigationState(selector){var navigation=useNavigation();var _React$useState=React.useState(function(){return selector(navigation.getState());}),_React$useState2=_slicedToArray(_React$useState,2),setResult=_React$useState2[1];var selectorRef=React.useRef(selector);React.useEffect(function(){selectorRef.current=selector;});React.useEffect(function(){var unsubscribe=navigation.addListener('state',function(e){setResult(selectorRef.current(e.data.state));});return unsubscribe;},[navigation]);return selector(navigation.getState());}","map":{"version":3,"mappings":"iEACA,MAAO,GAAKA,MAAZ,KAAuB,OAAvB,CAGA,MAAOC,cAAP,uBAWA,cAAe,SAASC,mBAAT,CACbC,QADa,CAEV,CACH,GAAMC,WAAU,CAAGH,aAAa,EAAhC,CAIA,oBAAsBD,KAAK,CAACK,QAANL,CAAe,iBAAMG,SAAQ,CAACC,UAAU,CAACE,QAAXF,EAAD,CAAd,EAAfJ,CAAtB,oDAASO,SAAT,qBAGA,GAAMC,YAAW,CAAGR,KAAK,CAACS,MAANT,CAAaG,QAAbH,CAApB,CAEAA,KAAK,CAACU,SAANV,CAAgB,UAAM,CACpBQ,WAAW,CAACG,OAAZH,CAAsBL,QAAtBK,CADF,GAIAR,KAAK,CAACU,SAANV,CAAgB,UAAM,CACpB,GAAMY,YAAW,CAAGR,UAAU,CAACS,WAAXT,CAAuB,OAAvBA,CAAiCU,UAAD,CAAO,CACzDP,SAAS,CAACC,WAAW,CAACG,OAAZH,CAAoBM,CAAC,CAACC,IAAFD,CAAOE,KAA3BR,CAAD,CAATD,CADkB,EAApB,CAIA,MAAOK,YAAP,CALF,EAMG,CAACR,UAAD,CANHJ,EAQA,MAAOG,SAAQ,CAACC,UAAU,CAACE,QAAXF,EAAD,CAAf,CACD","names":["React","useNavigation","useNavigationState","selector","navigation","useState","getState","setResult","selectorRef","useRef","useEffect","current","unsubscribe","addListener","e","data","state"],"sources":["useNavigationState.tsx"],"sourcesContent":["import type { NavigationState, ParamListBase } from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport type { NavigationProp } from './types';\nimport useNavigation from './useNavigation';\n\ntype Selector<ParamList extends ParamListBase, T> = (\n  state: NavigationState<ParamList>\n) => T;\n\n/**\n * Hook to get a value from the current navigation state using a selector.\n *\n * @param selector Selector function to get a value from the state.\n */\nexport default function useNavigationState<ParamList extends ParamListBase, T>(\n  selector: Selector<ParamList, T>\n): T {\n  const navigation = useNavigation<NavigationProp<ParamList>>();\n\n  // We don't care about the state value, we run the selector again at the end\n  // The state is only to make sure that there's a re-render when we have a new value\n  const [, setResult] = React.useState(() => selector(navigation.getState()));\n\n  // We store the selector in a ref to avoid re-subscribing listeners every render\n  const selectorRef = React.useRef(selector);\n\n  React.useEffect(() => {\n    selectorRef.current = selector;\n  });\n\n  React.useEffect(() => {\n    const unsubscribe = navigation.addListener('state', (e) => {\n      setResult(selectorRef.current(e.data.state));\n    });\n\n    return unsubscribe;\n  }, [navigation]);\n\n  return selector(navigation.getState());\n}\n"]},"metadata":{},"sourceType":"module"}