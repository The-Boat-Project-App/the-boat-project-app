{"ast":null,"code":"import compareVersions from'compare-versions';import{CodedError}from\"./errors/CodedError\";var postedWarnings={};export default function deprecate(library,deprecatedAPI){var options=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};var currentVersion=options.currentVersion,versionToRemove=options.versionToRemove,replacement=options.replacement;var code=codeFromLibrary(library);var key=code+\":\"+deprecatedAPI+\":\"+replacement;if(!postedWarnings[key]){postedWarnings[key]=true;}if(!currentVersion||!versionToRemove||compareVersions(currentVersion,versionToRemove)>=0){var _message=\"`\"+deprecatedAPI+\"` has been removed\";if(versionToRemove){_message=_message+\" as of version \\\"\"+versionToRemove+\"\\\"\";}if(replacement&&replacement.length){_message=_message+\" please migrate to: `\"+replacement+\"`\";}throw new CodedError(\"ERR_DEPRECATED_API\",prependLibrary(library,_message));}var message=\"`\"+deprecatedAPI+\"` has been deprecated\";if(replacement&&replacement.length){message=message+\" in favor of `\"+replacement+\"`\";}if(versionToRemove&&versionToRemove.length){message=message+\" and will be removed in version \\\"\"+versionToRemove+\"\\\"\";}console.warn(prependLibrary(library,message));}function prependLibrary(library,message){return library+\": \"+message;}function codeFromLibrary(library){var code=library.replace(/[-.]/g,'_').toUpperCase();return code;}","map":{"version":3,"mappings":"AAAA,MAAOA,gBAAP,KAA4B,kBAA5B,CAEA,OAASC,UAAT,2BAEA,GAAMC,eAAc,CAA+B,EAAnD,CAKA,cAAc,SAAUC,UAAV,CACZC,OADY,CAEZC,aAFY,CAON,IAJNC,QAIM,2DAAF,EAAE,CAEN,GAAQC,eAAR,CAAyDD,OAAzD,CAAQC,cAAR,CAAwBC,eAAxB,CAAyDF,OAAzD,CAAwBE,eAAxB,CAAyCC,WAAzC,CAAyDH,OAAzD,CAAyCG,WAAzC,CACA,GAAMC,KAAI,CAAGC,eAAe,CAACP,OAAD,CAA5B,CACA,GAAMQ,IAAG,CAAMF,IAAN,KAAcL,aAAd,KAA+BI,WAAxC,CACA,GAAI,CAACP,cAAc,CAACU,GAAD,CAAnB,CAA0B,CACxBV,cAAc,CAACU,GAAD,CAAd,CAAsB,IAAtB,CACD,CAED,GACE,CAACL,cAAD,EACA,CAACC,eADD,EAEAR,eAAe,CAACO,cAAD,CAAiBC,eAAjB,CAAf,EAAoD,CAHtD,CAIE,CACA,GAAIK,SAAO,KAAQR,aAAR,qBAAX,CACA,GAAIG,eAAJ,CAAqB,CACnBK,QAAO,CAAMA,QAAN,qBAAgCL,eAAhC,KAAP,CACD,CACD,GAAIC,WAAW,EAAIA,WAAW,CAACK,MAA/B,CAAuC,CACrCD,QAAO,CAAMA,QAAN,yBAAsCJ,WAAtC,IAAP,CACD,CAED,KAAM,IAAIR,WAAJ,sBAAqCc,cAAc,CAACX,OAAD,CAAUS,QAAV,CAAnD,CAAN,CACD,CAED,GAAIA,QAAO,KAAQR,aAAR,wBAAX,CACA,GAAII,WAAW,EAAIA,WAAW,CAACK,MAA/B,CAAuC,CACrCD,OAAO,CAAMA,OAAN,kBAA+BJ,WAA/B,IAAP,CACD,CACD,GAAID,eAAe,EAAIA,eAAe,CAACM,MAAvC,CAA+C,CAC7CD,OAAO,CAAMA,OAAN,sCAAiDL,eAAjD,KAAP,CACD,CACDQ,OAAO,CAACC,IAAR,CAAaF,cAAc,CAACX,OAAD,CAAUS,OAAV,CAA3B,EACD,CAED,QAASE,eAAT,CAAwBX,OAAxB,CAAyCS,OAAzC,CAAwD,CACtD,MAAUT,QAAV,MAAsBS,OAAtB,CACD,CAOD,QAASF,gBAAT,CAAyBP,OAAzB,CAAwC,CACtC,GAAMM,KAAI,CAAGN,OAAO,CAACc,OAAR,CAAgB,OAAhB,CAAyB,GAAzB,EAA8BC,WAA9B,EAAb,CACA,MAAOT,KAAP,CACD","names":["compareVersions","CodedError","postedWarnings","deprecate","library","deprecatedAPI","options","currentVersion","versionToRemove","replacement","code","codeFromLibrary","key","message","length","prependLibrary","console","warn","replace","toUpperCase"],"sourceRoot":"","sources":["../src/deprecate.ts"],"sourcesContent":["import compareVersions from 'compare-versions';\n\nimport { CodedError } from './errors/CodedError';\n\nconst postedWarnings: { [key: string]: boolean } = {};\n\n/**\n * Used for deprecating values and throwing an error if a given version of Expo has passed.\n */\nexport default function deprecate(\n  library: string,\n  deprecatedAPI: string,\n  options: {\n    replacement?: string;\n    currentVersion?: string;\n    versionToRemove?: string;\n  } = {}\n): void {\n  const { currentVersion, versionToRemove, replacement } = options;\n  const code = codeFromLibrary(library);\n  const key = `${code}:${deprecatedAPI}:${replacement}`;\n  if (!postedWarnings[key]) {\n    postedWarnings[key] = true;\n  }\n\n  if (\n    !currentVersion ||\n    !versionToRemove ||\n    compareVersions(currentVersion, versionToRemove) >= 0\n  ) {\n    let message = `\\`${deprecatedAPI}\\` has been removed`;\n    if (versionToRemove) {\n      message = `${message} as of version \"${versionToRemove}\"`;\n    }\n    if (replacement && replacement.length) {\n      message = `${message} please migrate to: \\`${replacement}\\``;\n    }\n\n    throw new CodedError(`ERR_DEPRECATED_API`, prependLibrary(library, message));\n  }\n\n  let message = `\\`${deprecatedAPI}\\` has been deprecated`;\n  if (replacement && replacement.length) {\n    message = `${message} in favor of \\`${replacement}\\``;\n  }\n  if (versionToRemove && versionToRemove.length) {\n    message = `${message} and will be removed in version \"${versionToRemove}\"`;\n  }\n  console.warn(prependLibrary(library, message));\n}\n\nfunction prependLibrary(library: string, message: string): string {\n  return `${library}: ${message}`;\n}\n\n/**\n * Transform format:\n * Expo.AR -> EXPO_AR\n * expo-ar -> EXPO_AR\n */\nfunction codeFromLibrary(library: string): string {\n  const code = library.replace(/[-.]/g, '_').toUpperCase();\n  return code;\n}\n"]},"metadata":{},"sourceType":"module"}