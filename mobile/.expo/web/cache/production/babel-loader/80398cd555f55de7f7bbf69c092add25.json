{"ast":null,"code":"\"use strict\";var _defineProperty=require(\"@babel/runtime/helpers/defineProperty\");function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=void 0;var _pick=_interopRequireDefault(require(\"ramda/src/pick\"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var extractProps=(0,_pick.default)(['resizeMode','tintColor','overlayColor']);function mapObjectFit(objectFit){var resizeMode;switch(objectFit){case'contain':case'cover':resizeMode=objectFit;break;case'fill':resizeMode='stretch';break;case'scale-down':resizeMode='contain';break;default:return null;}return{resizeMode:resizeMode};}function extractImageStyleProps(style,objectFit){var resizeModeFromFit=objectFit?mapObjectFit(objectFit):null;return _objectSpread(_objectSpread({},extractProps(style)),resizeModeFromFit);}var _default=extractImageStyleProps;exports.default=_default;","map":{"version":3,"mappings":"u6BAGA,+IAEA,GAAMA,aAAY,CAAG,kBAAuB,CAC1C,YAD0C,CAE1C,WAF0C,CAG1C,cAH0C,CAAvB,CAArB,CAMA,QAASC,aAAT,CAAsBC,SAAtB,CAA8D,CAC5D,GAAIC,WAAJ,CACA,OAAQD,SAAR,EACE,IAAK,SAAL,CACA,IAAK,OAAL,CACEC,UAAU,CAAGD,SAAbC,CACA,MACF,IAAK,MAAL,CACEA,UAAU,CAAG,SAAbA,CACA,MACF,IAAK,YAAL,CACEA,UAAU,CAAG,SAAbA,CACA,MACF,QACE,MAAO,KAAP,CAZJ,CAcA,MAAO,CAAEA,qBAAF,CAAP,CACD,CAED,QAASC,uBAAT,CACEC,KADF,CAEEH,SAFF,CAGE,CACA,GAAMI,kBAAiB,CAAGJ,SAAS,CAAGD,YAAY,CAACC,SAAD,CAAf,CAA6B,IAAhE,CACA,sCACKF,YAAY,CAACK,KAAD,CADjB,EAEKC,iBAFL,EAID,cAEcF","names":["extractProps","mapObjectFit","objectFit","resizeMode","extractImageStyleProps","style","resizeModeFromFit"],"sources":["extractImageStyleProps.ts"],"sourcesContent":["import { ImageStyle } from 'react-native';\nimport { WebBlockStyles } from '@native-html/transient-render-engine';\n\nimport pick from 'ramda/src/pick';\n\nconst extractProps = pick<keyof ImageStyle>([\n  'resizeMode',\n  'tintColor',\n  'overlayColor'\n]);\n\nfunction mapObjectFit(objectFit: WebBlockStyles['objectFit']) {\n  let resizeMode: ImageStyle['resizeMode'];\n  switch (objectFit) {\n    case 'contain':\n    case 'cover':\n      resizeMode = objectFit;\n      break;\n    case 'fill':\n      resizeMode = 'stretch';\n      break;\n    case 'scale-down':\n      resizeMode = 'contain';\n      break;\n    default:\n      return null;\n  }\n  return { resizeMode };\n}\n\nfunction extractImageStyleProps(\n  style: any,\n  objectFit?: WebBlockStyles['objectFit']\n) {\n  const resizeModeFromFit = objectFit ? mapObjectFit(objectFit) : null;\n  return {\n    ...extractProps(style),\n    ...resizeModeFromFit\n  };\n}\n\nexport default extractImageStyleProps;\n"]},"metadata":{},"sourceType":"script"}