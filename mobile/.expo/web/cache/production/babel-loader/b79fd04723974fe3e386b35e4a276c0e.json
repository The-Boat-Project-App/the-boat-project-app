{"ast":null,"code":"import _asyncToGenerator from\"@babel/runtime/helpers/asyncToGenerator\";import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import React,{useState,useEffect}from'react';import{HybridContext}from\"./../hybrid-overlay/Context\";import AppState from\"react-native-web/dist/exports/AppState\";import _useColorScheme from\"react-native-web/dist/exports/useColorScheme\";import{useSubscription}from'use-subscription';export var useColorMode=function useColorMode(){var _React$useContext=React.useContext(HybridContext),colorModeContext=_React$useContext.colorMode;if(colorModeContext===undefined){throw new Error('useColorMode must be used within a NativeBaseProvider');}return colorModeContext;};export function useColorModeValue(light,dark){var _useColorMode=useColorMode(),colorMode=_useColorMode.colorMode;return colorMode==='dark'?dark:light;}export var useAppState=function useAppState(){var subscription=React.useMemo(function(){return{getCurrentValue:function getCurrentValue(){return AppState.currentState;},subscribe:function subscribe(callback){AppState.addEventListener('change',callback);return function(){return AppState.removeEventListener('change',callback);};}};},[]);return useSubscription(subscription);};export var useColorScheme=function useColorScheme(){var colorScheme=_useColorScheme();var _useState=useState(colorScheme),_useState2=_slicedToArray(_useState,2),currentScheme=_useState2[0],setCurrentScheme=_useState2[1];var appState=useAppState();useEffect(function(){if(appState==='active'){setCurrentScheme(colorScheme);}},[appState,colorScheme]);return currentScheme;};export function useModeManager(initialColorMode,useSystemColorMode,colorModeManager){var systemColorMode=useColorScheme();if(useSystemColorMode){initialColorMode=systemColorMode;}var _useState3=useState(initialColorMode),_useState4=_slicedToArray(_useState3,2),colorMode=_useState4[0],setRawMode=_useState4[1];var setColorMode=React.useCallback(function(){var _ref=_asyncToGenerator(function*(val){if(colorModeManager){yield colorModeManager.set(val);}setRawMode(val);});return function(_x){return _ref.apply(this,arguments);};}(),[colorModeManager]);useEffect(function(){if(colorModeManager){(function(){var _getMode=_asyncToGenerator(function*(){var value=yield colorModeManager.get(initialColorMode);if(value&&value!==colorMode){setRawMode(value);}});function getMode(){return _getMode.apply(this,arguments);}return getMode;})()();}},[colorMode,initialColorMode,colorModeManager]);useEffect(function(){if(!colorModeManager&&useSystemColorMode){setRawMode(systemColorMode);}},[systemColorMode,colorModeManager,useSystemColorMode,setRawMode]);return{colorMode:colorMode,setColorMode:setColorMode};}export function useAccessibleColors(){var _React$useContext2=React.useContext(HybridContext),colorModeContext=_React$useContext2.colorMode;var toggleAccessibleColors=function toggleAccessibleColors(){return colorModeContext.setAccessibleColors(!colorModeContext.accessibleColors);};return[colorModeContext.accessibleColors,colorModeContext.setAccessibleColors,toggleAccessibleColors];}","map":{"version":3,"mappings":"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","names":["React","useState","useEffect","HybridContext","useSubscription","useColorMode","useContext","colorModeContext","colorMode","undefined","Error","useColorModeValue","light","dark","useAppState","subscription","useMemo","getCurrentValue","AppState","currentState","subscribe","callback","addEventListener","removeEventListener","useColorScheme","colorScheme","_useColorScheme","currentScheme","setCurrentScheme","appState","useModeManager","initialColorMode","useSystemColorMode","colorModeManager","systemColorMode","setRawMode","setColorMode","useCallback","val","set","value","get","getMode","useAccessibleColors","toggleAccessibleColors","setAccessibleColors","accessibleColors"],"sources":["hooks.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport type {\n  ColorMode,\n  StorageManager,\n  IColorModeContextProps,\n} from './types';\nimport { HybridContext } from './../hybrid-overlay/Context';\nimport type { IHybridContextProps } from './../hybrid-overlay/types';\nimport { AppState, useColorScheme as _useColorScheme } from 'react-native';\nimport { useSubscription } from 'use-subscription';\n\nexport const useColorMode = (): IColorModeContextProps => {\n  const {\n    colorMode: colorModeContext,\n  }: {\n    colorMode: IColorModeContextProps;\n  } = React.useContext<IHybridContextProps>(HybridContext);\n  if (colorModeContext === undefined) {\n    throw new Error('useColorMode must be used within a NativeBaseProvider');\n  }\n  return colorModeContext;\n};\n\nexport function useColorModeValue(light: any, dark: any) {\n  const { colorMode } = useColorMode();\n  return colorMode === 'dark' ? dark : light;\n}\n\nexport const useAppState = () => {\n  const subscription = React.useMemo(\n    () => ({\n      getCurrentValue: () => AppState.currentState,\n      subscribe: (callback: () => void) => {\n        AppState.addEventListener('change', callback);\n        return () => AppState.removeEventListener('change', callback);\n      },\n    }),\n    []\n  );\n  return useSubscription(subscription);\n};\n\nexport const useColorScheme = () => {\n  const colorScheme = _useColorScheme();\n  const [currentScheme, setCurrentScheme] = useState(colorScheme);\n  const appState = useAppState();\n\n  useEffect(() => {\n    if (appState === 'active') {\n      setCurrentScheme(colorScheme);\n    }\n  }, [appState, colorScheme]);\n\n  return currentScheme;\n};\n\nexport function useModeManager(\n  initialColorMode: ColorMode,\n  useSystemColorMode: boolean | undefined,\n  colorModeManager?: StorageManager\n) {\n  const systemColorMode = useColorScheme();\n\n  if (useSystemColorMode) {\n    initialColorMode = systemColorMode;\n  }\n\n  const [colorMode, setRawMode] = useState<ColorMode>(initialColorMode);\n  const setColorMode = React.useCallback(\n    async (val: ColorMode) => {\n      if (colorModeManager) {\n        await colorModeManager.set(val);\n      }\n      setRawMode(val);\n    },\n    [colorModeManager]\n  );\n\n  // For initial setting initial color mode from storage\n  useEffect(() => {\n    if (colorModeManager) {\n      (async function getMode() {\n        let value = await colorModeManager.get(initialColorMode);\n        if (value && value !== colorMode) {\n          setRawMode(value);\n        }\n      })();\n    }\n  }, [colorMode, initialColorMode, colorModeManager]);\n\n  // Set system color mode only when user has not passed a colorModeManager\n  useEffect(() => {\n    if (!colorModeManager && useSystemColorMode) {\n      setRawMode(systemColorMode);\n    }\n  }, [systemColorMode, colorModeManager, useSystemColorMode, setRawMode]);\n\n  return { colorMode, setColorMode };\n}\n\nexport function useAccessibleColors(): [\n  boolean,\n  (val: boolean) => void,\n  () => void\n] {\n  const {\n    colorMode: colorModeContext,\n  }: {\n    colorMode: IColorModeContextProps;\n  } = React.useContext<IHybridContextProps>(HybridContext);\n  const toggleAccessibleColors = () =>\n    colorModeContext.setAccessibleColors(!colorModeContext.accessibleColors);\n  return [\n    colorModeContext.accessibleColors,\n    colorModeContext.setAccessibleColors,\n    toggleAccessibleColors,\n  ];\n}\n"]},"metadata":{},"sourceType":"module"}