{"ast":null,"code":"import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"htmlProps\"];function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import React,{memo,forwardRef}from'react';import{usePropsResolution}from\"../../../hooks/useThemeProps\";import Box from\"../../primitives/Box\";import{useFormControlProvider,FormControlContext}from\"./useFormControl\";import{useHasResponsiveProps}from\"../../../hooks/useHasResponsiveProps\";var FormControl=function FormControl(props,ref){var _useFormControlProvid=useFormControlProvider(props),htmlProps=_useFormControlProvid.htmlProps,context=_objectWithoutProperties(_useFormControlProvid,_excluded);var resolvedProps=usePropsResolution('FormControl',props,{isDisabled:context.isDisabled,isReadOnly:context.isReadOnly,isInvalid:context.isInvalid});if(useHasResponsiveProps(props)){return null;}return React.createElement(FormControlContext.Provider,{value:context},React.createElement(Box,_extends({},resolvedProps,htmlProps,{ref:ref})));};export default memo(forwardRef(FormControl));","map":{"version":3,"mappings":"wYAAA,MAAOA,MAAP,EAAgBC,IAAhB,CAAsBC,UAAtB,KAAwC,OAAxC,CACA,OAASC,kBAAT,oCACA,MAAOC,IAAP,4BAEA,OAASC,sBAAT,CAAiCC,kBAAjC,wBACA,OAASC,qBAAT,4CAEA,GAAMC,YAAW,CAAG,QAAdA,YAAc,CAACC,KAAD,CAA2BC,GAA3B,CAAwC,CAC1D,0BAAkCL,sBAAsB,CAACI,KAAD,CAAxD,CAAQE,SAAR,uBAAQA,SAAR,CAAsBC,OAAtB,2DACA,GAAMC,cAAa,CAAGV,kBAAkB,CAAC,aAAD,CAAgBM,KAAhB,CAAuB,CAC7DK,UAAU,CAAEF,OAAO,CAACE,UADyC,CAE7DC,UAAU,CAAEH,OAAO,CAACG,UAFyC,CAG7DC,SAAS,CAAEJ,OAAO,CAACI,SAH0C,CAAvB,CAAxC,CAOA,GAAIT,qBAAqB,CAACE,KAAD,CAAzB,CAAkC,CAChC,MAAO,KAAP,CACD,CACD,MACET,qBAACM,kBAAD,CAAoBW,QAApB,EAA6BC,KAAK,CAAEN,OAApC,EACEZ,oBAACI,GAAD,aAASS,aAAT,CAA4BF,SAA5B,EAAuCD,GAAG,CAAEA,GAA5C,GADF,CADF,CAZF,EAmBA,cAAeT,KAAI,CAACC,UAAU,CAACM,WAAD,CAAX,CAAnB","names":["React","memo","forwardRef","usePropsResolution","Box","useFormControlProvider","FormControlContext","useHasResponsiveProps","FormControl","props","ref","htmlProps","context","resolvedProps","isDisabled","isReadOnly","isInvalid","Provider","value"],"sources":["FormControl.tsx"],"sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport Box from '../../primitives/Box';\nimport type { IFormControlProps } from './types';\nimport { useFormControlProvider, FormControlContext } from './useFormControl';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst FormControl = (props: IFormControlProps, ref: any) => {\n  const { htmlProps, ...context } = useFormControlProvider(props);\n  const resolvedProps = usePropsResolution('FormControl', props, {\n    isDisabled: context.isDisabled,\n    isReadOnly: context.isReadOnly,\n    isInvalid: context.isInvalid,\n    // isRequired: context.isRequired,\n  });\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <FormControlContext.Provider value={context}>\n      <Box {...resolvedProps} {...htmlProps} ref={ref} />\n    </FormControlContext.Provider>\n  );\n};\n\nexport default memo(forwardRef(FormControl));\n"]},"metadata":{},"sourceType":"module"}