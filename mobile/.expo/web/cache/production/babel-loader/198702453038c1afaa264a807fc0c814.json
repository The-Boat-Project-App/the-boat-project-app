{"ast":null,"code":"export default function checkDuplicateRouteNames(state){var duplicates=[];var getRouteNames=function getRouteNames(location,state){state.routes.forEach(function(route){var _route$state,_route$state$routeNam;var currentLocation=location?location+\" > \"+route.name:route.name;(_route$state=route.state)===null||_route$state===void 0?void 0:(_route$state$routeNam=_route$state.routeNames)===null||_route$state$routeNam===void 0?void 0:_route$state$routeNam.forEach(function(routeName){if(routeName===route.name){duplicates.push([currentLocation,currentLocation+\" > \"+route.name]);}});if(route.state){getRouteNames(currentLocation,route.state);}});};getRouteNames('',state);return duplicates;}","map":{"version":3,"mappings":"AAEA,cAAe,SAASA,yBAAT,CAAkCC,KAAlC,CAA0D,CACvE,GAAMC,WAAsB,CAAG,EAA/B,CAEA,GAAMC,cAAa,CAAG,QAAhBA,cAAgB,CACpBC,QADoB,CAEpBH,KAFoB,CAGjB,CACHA,KAAK,CAACI,MAANJ,CAAaK,OAAbL,CAAsBM,cAAD,CAAmC,wCACtD,GAAMC,gBAAe,CAAGJ,QAAQ,CACzBA,QADyB,OACXG,KAAK,CAACE,IADK,CAE5BF,KAAK,CAACE,IAFV,CAIA,mBAAK,CAACR,KAAN,2EAAaS,UAAb,sEAAyBJ,OAAzB,CAAkCK,kBAAD,CAAe,CAC9C,GAAIA,SAAS,GAAKJ,KAAK,CAACE,IAAxB,CAA8B,CAC5BP,UAAU,CAACU,IAAXV,CAAgB,CACdM,eADc,CAEXA,eAFW,OAEUD,KAAK,CAACE,IAFhB,CAAhBP,EAID,CANH,GASA,GAAIK,KAAK,CAACN,KAAV,CAAiB,CACfE,aAAa,CAACK,eAAD,CAAkBD,KAAK,CAACN,KAAxB,CAAbE,CACD,CAhBH,GAJF,EAwBAA,aAAa,CAAC,EAAD,CAAKF,KAAL,CAAbE,CAEA,MAAOD,WAAP,CACD","names":["checkDuplicateRouteNames","state","duplicates","getRouteNames","location","routes","forEach","route","currentLocation","name","routeNames","routeName","push"],"sources":["checkDuplicateRouteNames.tsx"],"sourcesContent":["import type { NavigationState, PartialState } from '@react-navigation/routers';\n\nexport default function checkDuplicateRouteNames(state: NavigationState) {\n  const duplicates: string[][] = [];\n\n  const getRouteNames = (\n    location: string,\n    state: NavigationState | PartialState<NavigationState>\n  ) => {\n    state.routes.forEach((route: typeof state.routes[0]) => {\n      const currentLocation = location\n        ? `${location} > ${route.name}`\n        : route.name;\n\n      route.state?.routeNames?.forEach((routeName) => {\n        if (routeName === route.name) {\n          duplicates.push([\n            currentLocation,\n            `${currentLocation} > ${route.name}`,\n          ]);\n        }\n      });\n\n      if (route.state) {\n        getRouteNames(currentLocation, route.state);\n      }\n    });\n  };\n\n  getRouteNames('', state);\n\n  return duplicates;\n}\n"]},"metadata":{},"sourceType":"module"}