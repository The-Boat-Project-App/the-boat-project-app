{"ast":null,"code":"import*as React from'react';import Dimensions from\"react-native-web/dist/exports/Dimensions\";import Platform from\"react-native-web/dist/exports/Platform\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import View from\"react-native-web/dist/exports/View\";import{initialWindowMetrics,SafeAreaInsetsContext,SafeAreaProvider}from'react-native-safe-area-context';var _Dimensions$get=Dimensions.get('window'),_Dimensions$get$width=_Dimensions$get.width,width=_Dimensions$get$width===void 0?0:_Dimensions$get$width,_Dimensions$get$heigh=_Dimensions$get.height,height=_Dimensions$get$heigh===void 0?0:_Dimensions$get$heigh;var initialMetrics=Platform.OS==='web'||initialWindowMetrics==null?{frame:{x:0,y:0,width:width,height:height},insets:{top:0,left:0,right:0,bottom:0}}:initialWindowMetrics;export default function SafeAreaProviderCompat(_ref){var children=_ref.children,style=_ref.style;return React.createElement(SafeAreaInsetsContext.Consumer,null,function(insets){if(insets){return React.createElement(View,{style:[styles.container,style]},children);}return React.createElement(SafeAreaProvider,{initialMetrics:initialMetrics,style:style},children);});}SafeAreaProviderCompat.initialMetrics=initialMetrics;var styles=StyleSheet.create({container:{flex:1}});","map":{"version":3,"mappings":"AAAA,MAAO,GAAKA,MAAZ,KAAuB,OAAvB,C,oPASA,OACEC,oBADF,CAEEC,qBAFF,CAGEC,gBAHF,KAIO,gCAJP,CAWA,oBAAkCC,UAAU,CAACC,GAAXD,CAAe,QAAfA,CAAlC,uCAAQE,KAAR,CAAQA,KAAR,gCAAgB,CAAhB,6DAAmBC,MAAnB,CAAmBA,MAAnB,gCAA4B,CAA5B,uBAKA,GAAMC,eAAc,CAClBC,QAAQ,CAACC,EAATD,GAAgB,KAAhBA,EAAyBR,oBAAoB,EAAI,IAAjDQ,CACI,CACEE,KAAK,CAAE,CAAEC,CAAC,CAAE,CAAL,CAAQC,CAAC,CAAE,CAAX,CAAcP,KAAd,CAAcA,KAAd,CAAqBC,aAArB,CADT,CAEEO,MAAM,CAAE,CAAEC,GAAG,CAAE,CAAP,CAAUC,IAAI,CAAE,CAAhB,CAAmBC,KAAK,CAAE,CAA1B,CAA6BC,MAAM,CAAE,CAArC,CAFV,CADJT,CAKIR,oBANN,CAQA,cAAe,SAASkB,uBAAT,MAA4D,IAA1BC,SAA0B,MAA1BA,QAA0B,CAAhBC,KAAgB,MAAhBA,KAAgB,CACzE,MACErB,qBAACE,qBAAD,CAAuBoB,QAAvB,MACIR,eAAD,CAAY,CACX,GAAIA,MAAJ,CAAY,CAIV,MAAOd,qBAACuB,IAAD,EAAMF,KAAK,CAAE,CAACG,MAAM,CAACC,SAAR,CAAmBJ,KAAnB,CAAb,EAAyCD,QAAzC,CAAP,CACD,CAED,MACEpB,qBAACG,gBAAD,EAAkBK,cAAc,CAAEA,cAAlC,CAAkDa,KAAK,CAAEA,KAAzD,EACGD,QADH,CADF,CATJ,EADF,CAkBD,CAEDD,sBAAsB,CAACX,cAAvBW,CAAwCX,cAAxCW,CAEA,GAAMK,OAAM,CAAGE,UAAU,CAACC,MAAXD,CAAkB,CAC/BD,SAAS,CAAE,CACTG,IAAI,CAAE,CADG,CADoB,CAAlBF,CAAf","names":["React","initialWindowMetrics","SafeAreaInsetsContext","SafeAreaProvider","Dimensions","get","width","height","initialMetrics","Platform","OS","frame","x","y","insets","top","left","right","bottom","SafeAreaProviderCompat","children","style","Consumer","View","styles","container","StyleSheet","create","flex"],"sources":["SafeAreaProviderCompat.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Dimensions,\n  Platform,\n  StyleProp,\n  StyleSheet,\n  View,\n  ViewStyle,\n} from 'react-native';\nimport {\n  initialWindowMetrics,\n  SafeAreaInsetsContext,\n  SafeAreaProvider,\n} from 'react-native-safe-area-context';\n\ntype Props = {\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n};\n\nconst { width = 0, height = 0 } = Dimensions.get('window');\n\n// To support SSR on web, we need to have empty insets for initial values\n// Otherwise there can be mismatch between SSR and client output\n// We also need to specify empty values to support tests environments\nconst initialMetrics =\n  Platform.OS === 'web' || initialWindowMetrics == null\n    ? {\n        frame: { x: 0, y: 0, width, height },\n        insets: { top: 0, left: 0, right: 0, bottom: 0 },\n      }\n    : initialWindowMetrics;\n\nexport default function SafeAreaProviderCompat({ children, style }: Props) {\n  return (\n    <SafeAreaInsetsContext.Consumer>\n      {(insets) => {\n        if (insets) {\n          // If we already have insets, don't wrap the stack in another safe area provider\n          // This avoids an issue with updates at the cost of potentially incorrect values\n          // https://github.com/react-navigation/react-navigation/issues/174\n          return <View style={[styles.container, style]}>{children}</View>;\n        }\n\n        return (\n          <SafeAreaProvider initialMetrics={initialMetrics} style={style}>\n            {children}\n          </SafeAreaProvider>\n        );\n      }}\n    </SafeAreaInsetsContext.Consumer>\n  );\n}\n\nSafeAreaProviderCompat.initialMetrics = initialMetrics;\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}