{"ast":null,"code":"import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";var _excluded=[\"theme\"];import get from'lodash.get';import omit from'lodash.omit';import useWindowDimensions from\"react-native-web/dist/exports/useWindowDimensions\";import Platform from\"react-native-web/dist/exports/Platform\";import{useNativeBase}from\"./../useNativeBase\";import{omitUndefined,extractInObject}from\"./../../theme/tools/\";import{filterShadowProps}from\"./../../utils/filterShadowProps\";import{calculateProps}from\"./utils\";var filterAndCalculateProps=function filterAndCalculateProps(theme,colorModeProps,componentTheme,propsReceived,windowWidth){var _extractInObject=extractInObject(propsReceived,['children','style','onPress','icon','onOpen','onClose']),_extractInObject2=_slicedToArray(_extractInObject,2),ignoredProps=_extractInObject2[0],props=_extractInObject2[1];var newProps=calculateProps(theme,colorModeProps,componentTheme,props,windowWidth);var mergedProps=filterShadowProps(newProps,ignoredProps,Platform.OS);return omitUndefined(mergedProps);};export function useThemeProps(component,propsReceived){var _useWindowDimensions;var _useNativeBase=useNativeBase(),theme=_useNativeBase.theme,colorModeProps=_objectWithoutProperties(_useNativeBase,_excluded);var componentTheme=get(theme,\"components.\".concat(component));var windowWidth=(_useWindowDimensions=useWindowDimensions())===null||_useWindowDimensions===void 0?void 0:_useWindowDimensions.width;return filterAndCalculateProps(omit(theme,['components']),colorModeProps,componentTheme,propsReceived,windowWidth);}","map":{"version":3,"mappings":"8KAAA,MAAOA,IAAP,KAAgB,YAAhB,CACA,MAAOC,KAAP,KAAiB,aAAjB,C,gJAEA,OAASC,aAAT,0BACA,OAASC,aAAT,CAAwBC,eAAxB,4BACA,OAASC,iBAAT,uCACA,OAASC,cAAT,eAEA,GAAMC,wBAAuB,CAAG,QAA1BA,wBAA0B,CAC9BC,KAD8B,CAE9BC,cAF8B,CAG9BC,cAH8B,CAI9BC,aAJ8B,CAK9BC,WAL8B,CAM3B,CAIH,qBAA4BR,eAAe,CAACO,aAAD,CAAgB,CACzD,UADyD,CAEzD,OAFyD,CAGzD,SAHyD,CAIzD,MAJyD,CAKzD,QALyD,CAMzD,SANyD,CAAhB,CAA3C,sDAAKE,YAAL,sBAAmBC,KAAnB,sBAQA,GAAIC,SAAQ,CAAGT,cAAc,CAC3BE,KAD2B,CAE3BC,cAF2B,CAG3BC,cAH2B,CAI3BI,KAJ2B,CAK3BF,WAL2B,CAA7B,CAOA,GAAII,YAAW,CAAGX,iBAAiB,CAACU,QAAD,CAAWF,YAAX,CAAyBI,QAAQ,CAACC,EAAlC,CAAnC,CACA,MAAOf,cAAa,CAACa,WAAD,CAApB,CA1BF,EA6BA,MAAO,SAASG,cAAT,CAAuBC,SAAvB,CAA0CT,aAA1C,CAA8D,0BACnE,mBAAqCT,aAAa,EAAlD,CAAQM,KAAR,gBAAQA,KAAR,CAAkBC,cAAlB,oDAGA,GAAMC,eAAc,CAAGV,GAAG,CAACQ,KAAD,sBAAsBY,SAAtB,EAA1B,CAEA,GAAMR,YAAW,uBAAGS,mBAAmB,EAAtB,+CAAGC,qBAAuBC,KAA3C,CAGA,MAAOhB,wBAAuB,CAC5BN,IAAI,CAACO,KAAD,CAAQ,CAAC,YAAD,CAAR,CADwB,CAE5BC,cAF4B,CAG5BC,cAH4B,CAI5BC,aAJ4B,CAK5BC,WAL4B,CAA9B,CAOD","names":["get","omit","useNativeBase","omitUndefined","extractInObject","filterShadowProps","calculateProps","filterAndCalculateProps","theme","colorModeProps","componentTheme","propsReceived","windowWidth","ignoredProps","props","newProps","mergedProps","Platform","OS","useThemeProps","component","useWindowDimensions","_useWindowDimensions","width"],"sources":["useProps.tsx"],"sourcesContent":["import get from 'lodash.get';\nimport omit from 'lodash.omit';\nimport { useWindowDimensions, Platform } from 'react-native';\nimport { useNativeBase } from './../useNativeBase';\nimport { omitUndefined, extractInObject } from './../../theme/tools/';\nimport { filterShadowProps } from './../../utils/filterShadowProps';\nimport { calculateProps } from './utils';\n\nconst filterAndCalculateProps = (\n  theme: any,\n  colorModeProps: any,\n  componentTheme: any,\n  propsReceived: any,\n  windowWidth: any\n) => {\n  // Extracting out children and style, as they do not contribute in props calculation\n  // This is done as these props are passed as it is later in the development\n  // Required as some of these will trigger cyclic computation which may lead to error\n  let [ignoredProps, props] = extractInObject(propsReceived, [\n    'children',\n    'style',\n    'onPress',\n    'icon',\n    'onOpen',\n    'onClose',\n  ]);\n  let newProps = calculateProps(\n    theme,\n    colorModeProps,\n    componentTheme,\n    props,\n    windowWidth\n  );\n  let mergedProps = filterShadowProps(newProps, ignoredProps, Platform.OS);\n  return omitUndefined(mergedProps);\n};\n\nexport function useThemeProps(component: string, propsReceived: any) {\n  const { theme, ...colorModeProps } = useNativeBase();\n  // console.log('THEME = ', theme);\n\n  const componentTheme = get(theme, `components.${component}`);\n  // console.log('COMPONENT THEME = ', componentTheme);\n  const windowWidth = useWindowDimensions()?.width;\n\n  // To pass the component theme props and component props seperately\n  return filterAndCalculateProps(\n    omit(theme, ['components']),\n    colorModeProps,\n    componentTheme,\n    propsReceived,\n    windowWidth\n  );\n}\n"]},"metadata":{},"sourceType":"module"}