{"ast":null,"code":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=useTTree;var _react=require(\"react\");var _ttreeEventsContext=_interopRequireDefault(require(\"../context/ttreeEventsContext\"));var _SharedPropsProvider=require(\"../context/SharedPropsProvider\");var _TRenderEngineProvider=require(\"../TRenderEngineProvider\");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function useTTreeChangeEffect(ttree){var _ref=(0,_react.useContext)(_ttreeEventsContext.default),onTTreeChange=_ref.onTTreeChange;var _ref2=(0,_SharedPropsProvider.useSharedProps)(),debug=_ref2.debug;var updateNumber=(0,_react.useRef)(0);(0,_react.useEffect)(function(){onTTreeChange===null||onTTreeChange===void 0?void 0:onTTreeChange.call(null,ttree);if(debug&&typeof __DEV__==='boolean'&&__DEV__){console.info(\"Transient Render Tree update \"+ ++updateNumber.current+\":\\n\"+ttree.snapshot({withNodeIndex:false,withStyles:false}));}},[ttree,onTTreeChange,debug]);}function useTTree(props){var document=props.document;var trenderEngine=(0,_TRenderEngineProvider.useAmbientTRenderEngine)();var ttree=(0,_react.useMemo)(function(){return typeof document==='string'?trenderEngine.buildTTree(document):trenderEngine.buildTTreeFromDoc(document);},[document,trenderEngine]);useTTreeChangeEffect(ttree);return ttree;}","map":{"version":3,"mappings":"+FAAA,4BACA,yFACA,mEAEA,kJAGA,QAASA,qBAAT,CAA8BC,KAA9B,CAAgD,CAC9C,SAA0B,sBAAWC,2BAAX,CAA1B,CAAQC,aAAR,MAAQA,aAAR,CACA,UAAkB,yCAAlB,CAAQC,KAAR,OAAQA,KAAR,CACA,GAAMC,aAAY,CAAG,kBAAO,CAAP,CAArB,CACA,qBAAU,UAAM,CACdF,aAAa,OAAbA,eAAa,SAAbA,qBAAa,CAAEG,IAAfH,CAAoB,IAApBA,CAA0BF,KAA1BE,EACA,GAAIC,KAAK,EAAI,MAAOG,QAAP,GAAmB,SAA5BH,EAAyCG,OAA7C,CAAsD,CACpDC,OAAO,CAACC,IAARD,iCACkC,GAAEH,YAAY,CAACK,OADjDF,OAC8DP,KAAK,CAACU,QAANV,CAC1D,CACEW,aAAa,CAAE,KADjB,CAEEC,UAAU,CAAE,KAFd,CAD0DZ,CAD9DO,EAQD,CAXH,EAYG,CAACP,KAAD,CAAQE,aAAR,CAAuBC,KAAvB,CAZH,EAaD,CAKc,QAASU,SAAT,CAAkBC,KAAlB,CAA2C,CACxD,GAAQC,SAAR,CAAqBD,KAArB,CAAQC,QAAR,CACA,GAAMC,cAAa,CAAG,oDAAtB,CACA,GAAMhB,MAAK,CAAG,mBACZ,iBACE,OAAOe,SAAP,GAAoB,QAApB,CACIC,aAAa,CAACC,UAAdD,CAAyBD,QAAzBC,CADJ,CAEIA,aAAa,CAACE,iBAAdF,CAAgCD,QAAhCC,CAHN,EADY,CAKZ,CAACD,QAAD,CAAWC,aAAX,CALY,CAAd,CAOAjB,oBAAoB,CAACC,KAAD,CAApBD,CACA,MAAOC,MAAP,CACD","names":["useTTreeChangeEffect","ttree","ttreeEventsContext","onTTreeChange","debug","updateNumber","call","__DEV__","console","info","current","snapshot","withNodeIndex","withStyles","useTTree","props","document","trenderEngine","buildTTree","buildTTreeFromDoc"],"sources":["useTTree.ts"],"sourcesContent":["import { useMemo, useEffect, useRef, useContext } from 'react';\nimport ttreeEventsContext from '../context/ttreeEventsContext';\nimport { useSharedProps } from '../context/SharedPropsProvider';\nimport { RenderTTreeProps } from '../internal-types';\nimport { useAmbientTRenderEngine } from '../TRenderEngineProvider';\nimport { TDocument } from '@native-html/transient-render-engine';\n\nfunction useTTreeChangeEffect(ttree: TDocument) {\n  const { onTTreeChange } = useContext(ttreeEventsContext);\n  const { debug } = useSharedProps();\n  const updateNumber = useRef(0);\n  useEffect(() => {\n    onTTreeChange?.call(null, ttree);\n    if (debug && typeof __DEV__ === 'boolean' && __DEV__) {\n      console.info(\n        `Transient Render Tree update ${++updateNumber.current}:\\n${ttree.snapshot(\n          {\n            withNodeIndex: false,\n            withStyles: false\n          }\n        )}`\n      );\n    }\n  }, [ttree, onTTreeChange, debug]);\n}\n\n/**\n * @internal\n */\nexport default function useTTree(props: RenderTTreeProps) {\n  const { document } = props;\n  const trenderEngine = useAmbientTRenderEngine();\n  const ttree = useMemo(\n    () =>\n      typeof document === 'string'\n        ? trenderEngine.buildTTree(document)\n        : trenderEngine.buildTTreeFromDoc(document),\n    [document, trenderEngine]\n  );\n  useTTreeChangeEffect(ttree);\n  return ttree;\n}\n"]},"metadata":{},"sourceType":"script"}