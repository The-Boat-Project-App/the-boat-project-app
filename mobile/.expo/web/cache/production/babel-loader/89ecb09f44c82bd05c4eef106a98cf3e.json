{"ast":null,"code":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:true});exports.useTNodeChildrenProps=useTNodeChildrenProps;exports.default=void 0;var _SharedPropsProvider=require(\"./context/SharedPropsProvider\");var _TChildrenRenderer=require(\"./TChildrenRenderer\");var _renderChildren=_interopRequireDefault(require(\"./renderChildren\"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function isCollapsible(tnode){return tnode.type==='block'||tnode.type==='phrasing';}function useTNodeChildrenProps(_ref){var tnode=_ref.tnode,propsForChildren=_ref.propsForChildren,_ref$disableMarginCol=_ref.disableMarginCollapsing,disableMarginCollapsing=_ref$disableMarginCol===void 0?false:_ref$disableMarginCol,renderChild=_ref.renderChild;var _ref2=(0,_SharedPropsProvider.useSharedProps)(),enableExperimentalMarginCollapsing=_ref2.enableExperimentalMarginCollapsing;var shouldCollapseChildren=enableExperimentalMarginCollapsing&&!disableMarginCollapsing&&isCollapsible(tnode);return{propsForChildren:propsForChildren,disableMarginCollapsing:!shouldCollapseChildren,tchildren:tnode.children,renderChild:renderChild};}function TNodeChildrenRenderer(props){if(props.tnode.type==='text'){return props.tnode.data;}return(0,_renderChildren.default)(useTNodeChildrenProps(props));}TNodeChildrenRenderer.defaultProps=_TChildrenRenderer.tchildrenRendererDefaultProps;var _default=TNodeChildrenRenderer;exports.default=_default;","map":{"version":3,"mappings":"iJAEA,kEACA,sDAKA,2JAEA,QAASA,cAAT,CAAuBC,KAAvB,CAAqC,CACnC,MAAOA,MAAK,CAACC,IAAND,GAAe,OAAfA,EAA0BA,KAAK,CAACC,IAAND,GAAe,UAAhD,CACD,CA4BM,QAASE,sBAAT,MAKgD,IAJrDF,MAIqD,MAJrDA,KAIqD,CAHrDG,gBAGqD,MAHrDA,gBAGqD,4BAFrDC,uBAEqD,CAFrDA,uBAEqD,gCAF3B,KAE2B,uBADrDC,WACqD,MADrDA,WACqD,CACrD,UAA+C,yCAA/C,CAAQC,kCAAR,OAAQA,kCAAR,CACA,GAAMC,uBAAsB,CAC1BD,kCAAkC,EAClC,CAACF,uBADDE,EAEAP,aAAa,CAACC,KAAD,CAHf,CAIA,MAAO,CACLG,gBADK,CACLA,gBADK,CAELC,uBAAuB,CAAE,CAACG,sBAFrB,CAGLC,SAAS,CAAER,KAAK,CAACS,QAHZ,CAILJ,uBAJK,CAAP,CAMD,CAKD,QAASK,sBAAT,CACEC,KADF,CAEgB,CACd,GAAIA,KAAK,CAACX,KAANW,CAAYV,IAAZU,GAAqB,MAAzB,CAAiC,CAE/B,MAAOA,MAAK,CAACX,KAANW,CAAYC,IAAnB,CAHY,CAQd,MAAO,4BAAeV,qBAAqB,CAACS,KAAD,CAApC,CAAP,CACD,CAKDD,qBAAqB,CAACG,YAAtBH,CAAqCI,gDAArCJ,cAEeA","names":["isCollapsible","tnode","type","useTNodeChildrenProps","propsForChildren","disableMarginCollapsing","renderChild","enableExperimentalMarginCollapsing","shouldCollapseChildren","tchildren","children","TNodeChildrenRenderer","props","data","defaultProps","tchildrenRendererDefaultProps"],"sources":["TNodeChildrenRenderer.tsx"],"sourcesContent":["import { ReactElement } from 'react';\nimport { TNode } from '@native-html/transient-render-engine';\nimport { useSharedProps } from './context/SharedPropsProvider';\nimport { tchildrenRendererDefaultProps } from './TChildrenRenderer';\nimport {\n  TChildrenRendererProps,\n  TNodeChildrenRendererProps\n} from './shared-types';\nimport renderChildren from './renderChildren';\n\nfunction isCollapsible(tnode: TNode) {\n  return tnode.type === 'block' || tnode.type === 'phrasing';\n}\n\n/**\n * A hook especially useful when one need to tamper with children in a custom\n * renderer. Should be used with {@link TChildrenRenderer}.\n *\n * @example\n * For example, a custom renderer which inserts ads in an article:\n *\n * ```tsx\n * function ArticleRenderer(props) {\n *   const { tnode, TDefaultRenderer, ...defaultRendererProps } = props;\n *   const tchildrenProps = useTNodeChildrenProps(props);\n *   const firstChildrenChunk = tnode.children.slice(0, 2);\n *   const secondChildrenChunk = tnode.children.slice(2, 4);\n *   const thirdChildrenChunk = tnode.children.slice(4, 5);\n *   return (\n *     <TDefaultRenderer tnode={tnode} {...defaultRendererProps}>\n *       <TChildrenRenderer {...tchildrenProps} tchildren={firstChildrenChunk} />\n *       {firstChildrenChunk.length === 2 ? <AdComponent /> : null}\n *       <TChildrenRenderer {...tchildrenProps} tchildren={secondChildrenChunk} />\n *       {secondChildrenChunk.length === 2 ? <AdComponent /> : null}\n *       <TChildrenRenderer {...tchildrenProps} tchildren={thirdChildrenChunk} />\n *     </TDefaultRenderer>\n *   );\n * };\n * ```\n */\nexport function useTNodeChildrenProps({\n  tnode,\n  propsForChildren,\n  disableMarginCollapsing = false,\n  renderChild\n}: TNodeChildrenRendererProps): TChildrenRendererProps {\n  const { enableExperimentalMarginCollapsing } = useSharedProps();\n  const shouldCollapseChildren =\n    enableExperimentalMarginCollapsing &&\n    !disableMarginCollapsing &&\n    isCollapsible(tnode);\n  return {\n    propsForChildren,\n    disableMarginCollapsing: !shouldCollapseChildren,\n    tchildren: tnode.children,\n    renderChild\n  };\n}\n\n/**\n * A component to render all children of a {@link TNode}.\n */\nfunction TNodeChildrenRenderer(\n  props: TNodeChildrenRendererProps\n): ReactElement {\n  if (props.tnode.type === 'text') {\n    // see https://github.com/DefinitelyTyped/DefinitelyTyped/issues/20544\n    return props.tnode.data as unknown as ReactElement;\n  }\n  // A tnode type will never change. We can safely\n  // ignore the non-conditional rule of hooks.\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  return renderChildren(useTNodeChildrenProps(props));\n}\n\n/**\n * @ignore\n */\nTNodeChildrenRenderer.defaultProps = tchildrenRendererDefaultProps;\n\nexport default TNodeChildrenRenderer;\n"]},"metadata":{},"sourceType":"script"}