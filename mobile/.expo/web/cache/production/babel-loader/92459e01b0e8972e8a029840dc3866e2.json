{"ast":null,"code":"import*as React from'react';export default function useKeyedChildListeners(){var _React$useRef=React.useRef(Object.assign(Object.create(null),{getState:{},beforeRemove:{}})),keyedListeners=_React$useRef.current;var addKeyedListener=React.useCallback(function(type,key,listener){keyedListeners[type][key]=listener;return function(){keyedListeners[type][key]=undefined;};},[keyedListeners]);return{keyedListeners:keyedListeners,addKeyedListener:addKeyedListener};}","map":{"version":3,"mappings":"AAAA,MAAO,GAAKA,MAAZ,KAAuB,OAAvB,CAOA,cAAe,SAASC,uBAAT,EAAkC,CAC/C,kBAAoCD,KAAK,CAACE,MAANF,CAMlCG,MAAM,CAACC,MAAPD,CAAcA,MAAM,CAACE,MAAPF,CAAc,IAAdA,CAAdA,CAAmC,CACjCG,QAAQ,CAAE,EADuB,CAEjCC,YAAY,CAAE,EAFmB,CAAnCJ,CANkCH,CAApC,CAAiBQ,cAAjB,eAAQC,OAAR,CAYA,GAAMC,iBAAgB,CAAGV,KAAK,CAACW,WAANX,CACvB,SACEY,IADF,CAEEC,GAFF,CAGEC,QAHF,CAIK,CAEHN,cAAc,CAACI,IAAD,CAAdJ,CAAqBK,GAArBL,EAA4BM,QAA5BN,CAEA,MAAO,WAAM,CAEXA,cAAc,CAACI,IAAD,CAAdJ,CAAqBK,GAArBL,EAA4BO,SAA5BP,CAFF,EATqB,EAcvB,CAACA,cAAD,CAduBR,CAAzB,CAiBA,MAAO,CACLQ,cADK,CACLA,cADK,CAELE,iCAFK,CAAP,CAID","names":["React","useKeyedChildListeners","useRef","Object","assign","create","getState","beforeRemove","keyedListeners","current","addKeyedListener","useCallback","type","key","listener","undefined"],"sources":["useKeyedChildListeners.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport type { KeyedListenerMap } from './NavigationBuilderContext';\n\n/**\n * Hook which lets child navigators add getters to be called for obtaining rehydrated state.\n */\nexport default function useKeyedChildListeners() {\n  const { current: keyedListeners } = React.useRef<{\n    [K in keyof KeyedListenerMap]: Record<\n      string,\n      KeyedListenerMap[K] | undefined\n    >;\n  }>(\n    Object.assign(Object.create(null), {\n      getState: {},\n      beforeRemove: {},\n    })\n  );\n\n  const addKeyedListener = React.useCallback(\n    <T extends keyof KeyedListenerMap>(\n      type: T,\n      key: string,\n      listener: KeyedListenerMap[T]\n    ) => {\n      // @ts-expect-error: according to ref stated above you can use `key` to index type\n      keyedListeners[type][key] = listener;\n\n      return () => {\n        // @ts-expect-error: according to ref stated above you can use `key` to index type\n        keyedListeners[type][key] = undefined;\n      };\n    },\n    [keyedListeners]\n  );\n\n  return {\n    keyedListeners,\n    addKeyedListener,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}