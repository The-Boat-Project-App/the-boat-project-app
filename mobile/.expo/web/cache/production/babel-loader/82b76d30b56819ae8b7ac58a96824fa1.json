{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}import{useButton}from\"./useButton\";import{chain}from'@react-aria/utils';import{mergeProps}from'@react-aria/utils';export function useToggleButton(props,state){var isSelected=state.isSelected;var _useButton=useButton(_objectSpread(_objectSpread({},props),{},{onPress:chain(state.toggle,props.onPress)})),isPressed=_useButton.isPressed,buttonProps=_useButton.buttonProps;return{isPressed:isPressed,buttonProps:mergeProps(buttonProps,{'aria-pressed':isSelected,'accessibilityPressed':isSelected})};}","map":{"version":3,"mappings":"w0BAcA,OAASA,SAAT,mBACA,OAASC,KAAT,KAAsB,mBAAtB,CACA,OAASC,UAAT,KAA2B,mBAA3B,CAOA,MAAO,SAASC,gBAAT,CACLC,KADK,CAELC,KAFK,CAGA,CAEL,GAAQC,WAAR,CAAuBD,KAAvB,CAAQC,UAAR,CACA,eAAmCN,SAAS,gCACvCI,KADuC,MAE1CG,OAAO,CAAEN,KAAK,CAACI,KAAK,CAACG,MAAP,CAAeJ,KAAK,CAACG,OAArB,CAF4B,GAA5C,CAAQE,SAAR,YAAQA,SAAR,CAAmBC,WAAnB,YAAmBA,WAAnB,CAKA,MAAO,CACLD,SADK,CACLA,SADK,CAELC,WAAW,CAAER,UAAU,CAACQ,WAAD,CAAc,CAEnC,eAAgBJ,UAFmB,CAKnC,uBAAwBA,UALW,CAAd,CAFlB,CAAP,CAUD","names":["useButton","chain","mergeProps","useToggleButton","props","state","isSelected","onPress","toggle","isPressed","buttonProps"],"sources":["useToggleButton.web.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport { ElementType } from 'react';\nimport { AriaToggleButtonProps } from '@react-types/button';\nimport { useButton } from './useButton';\nimport { chain } from '@react-aria/utils';\nimport { mergeProps } from '@react-aria/utils';\nimport { ToggleState } from '@react-stately/toggle';\n\n/**\n * Provides the behavior and accessibility implementation for a toggle button component.\n * ToggleButtons allow users to toggle a selection on or off, for example switching between two states or modes.\n */\nexport function useToggleButton(\n  props: AriaToggleButtonProps<ElementType>,\n  state: ToggleState\n): any {\n  /* eslint-enable no-redeclare */\n  const { isSelected } = state;\n  const { isPressed, buttonProps } = useButton({\n    ...props,\n    onPress: chain(state.toggle, props.onPress),\n  });\n\n  return {\n    isPressed,\n    buttonProps: mergeProps(buttonProps, {\n      // For v0.14+\n      'aria-pressed': isSelected,\n\n      // For v0.15+\n      'accessibilityPressed': isSelected,\n    }),\n  };\n}\n"]},"metadata":{},"sourceType":"module"}