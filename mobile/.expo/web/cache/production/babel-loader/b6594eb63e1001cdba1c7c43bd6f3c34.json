{"ast":null,"code":"import PropTypes from'prop-types';import{requireNativeComponent}from\"react-native-web/dist/index\";import NativeModules from\"react-native-web/dist/exports/NativeModules\";import Platform from\"react-native-web/dist/exports/Platform\";import{PROVIDER_DEFAULT,PROVIDER_GOOGLE}from\"./ProviderConstants\";export var SUPPORTED='SUPPORTED';export var USES_DEFAULT_IMPLEMENTATION='USES_DEFAULT_IMPLEMENTATION';export var NOT_SUPPORTED='NOT_SUPPORTED';export function getAirMapName(provider){if(Platform.OS==='android'){return'AIRMap';}if(provider===PROVIDER_GOOGLE){return'AIRGoogleMap';}return'AIRMap';}function getAirComponentName(provider,component){return\"\"+getAirMapName(provider)+component;}export var contextTypes={provider:PropTypes.string};export var createNotSupportedComponent=function createNotSupportedComponent(message){return function(){console.error(message);return null;};};function getViewManagerConfig(viewManagerName){var UIManager=NativeModules.UIManager;if(!UIManager.getViewManagerConfig){return UIManager[viewManagerName];}return UIManager.getViewManagerConfig(viewManagerName);}export var googleMapIsInstalled=!!getViewManagerConfig(getAirMapName(PROVIDER_GOOGLE));export default function decorateMapComponent(Component,_ref){var componentType=_ref.componentType,providers=_ref.providers;var components={};var getDefaultComponent=function getDefaultComponent(){return requireNativeComponent(getAirComponentName(null,componentType),Component);};Component.contextTypes=contextTypes;Component.prototype.getAirComponent=function getAirComponent(){var provider=this.context.provider||PROVIDER_DEFAULT;if(components[provider]){return components[provider];}if(provider===PROVIDER_DEFAULT){components[PROVIDER_DEFAULT]=getDefaultComponent();return components[PROVIDER_DEFAULT];}var providerInfo=providers[provider];var platformSupport=providerInfo[Platform.OS];var componentName=getAirComponentName(provider,componentType);if(platformSupport===NOT_SUPPORTED){components[provider]=createNotSupportedComponent(\"react-native-maps: \"+componentName+\" is not supported on \"+Platform.OS);}else if(platformSupport===SUPPORTED){if(provider!==PROVIDER_GOOGLE||Platform.OS==='ios'&&googleMapIsInstalled){components[provider]=requireNativeComponent(componentName,Component);}}else{if(!components[PROVIDER_DEFAULT]){components[PROVIDER_DEFAULT]=getDefaultComponent();}components[provider]=components[PROVIDER_DEFAULT];}return components[provider];};Component.prototype.getUIManagerCommand=function getUIManagerCommand(name){var componentName=getAirComponentName(this.context.provider,componentType);return getViewManagerConfig(componentName).Commands[name];};Component.prototype.getMapManagerCommand=function getMapManagerCommand(name){var airComponentName=getAirComponentName(this.context.provider,componentType)+\"Manager\";return NativeModules[airComponentName][name];};return Component;}","map":{"version":3,"names":["PropTypes","requireNativeComponent","PROVIDER_DEFAULT","PROVIDER_GOOGLE","SUPPORTED","USES_DEFAULT_IMPLEMENTATION","NOT_SUPPORTED","getAirMapName","provider","Platform","OS","getAirComponentName","component","contextTypes","string","createNotSupportedComponent","message","console","error","getViewManagerConfig","viewManagerName","UIManager","NativeModules","googleMapIsInstalled","decorateMapComponent","Component","componentType","providers","components","getDefaultComponent","prototype","getAirComponent","context","providerInfo","platformSupport","componentName","getUIManagerCommand","name","Commands","getMapManagerCommand","airComponentName"],"sources":["/Users/matthieu/Documents/boatproject/node_modules/react-native-maps/src/decorateMapComponent.js"],"sourcesContent":["import PropTypes from 'prop-types';\nimport { requireNativeComponent, NativeModules, Platform } from 'react-native';\nimport { PROVIDER_DEFAULT, PROVIDER_GOOGLE } from './ProviderConstants';\n\nexport const SUPPORTED = 'SUPPORTED';\nexport const USES_DEFAULT_IMPLEMENTATION = 'USES_DEFAULT_IMPLEMENTATION';\nexport const NOT_SUPPORTED = 'NOT_SUPPORTED';\n\nexport function getAirMapName(provider) {\n  if (Platform.OS === 'android') {\n    return 'AIRMap';\n  }\n  if (provider === PROVIDER_GOOGLE) {\n    return 'AIRGoogleMap';\n  }\n  return 'AIRMap';\n}\n\nfunction getAirComponentName(provider, component) {\n  return `${getAirMapName(provider)}${component}`;\n}\n\nexport const contextTypes = {\n  provider: PropTypes.string,\n};\n\nexport const createNotSupportedComponent = (message) => () => {\n  console.error(message);\n  return null;\n};\n\nfunction getViewManagerConfig(viewManagerName) {\n  const UIManager = NativeModules.UIManager;\n  if (!UIManager.getViewManagerConfig) {\n    // RN < 0.58\n    return UIManager[viewManagerName];\n  }\n  // RN >= 0.58\n  return UIManager.getViewManagerConfig(viewManagerName);\n}\n\nexport const googleMapIsInstalled = !!getViewManagerConfig(\n  getAirMapName(PROVIDER_GOOGLE)\n);\n\nexport default function decorateMapComponent(\n  Component,\n  { componentType, providers }\n) {\n  const components = {};\n\n  const getDefaultComponent = () =>\n    requireNativeComponent(getAirComponentName(null, componentType), Component);\n\n  Component.contextTypes = contextTypes;\n\n  Component.prototype.getAirComponent = function getAirComponent() {\n    const provider = this.context.provider || PROVIDER_DEFAULT;\n    if (components[provider]) {\n      return components[provider];\n    }\n\n    if (provider === PROVIDER_DEFAULT) {\n      components[PROVIDER_DEFAULT] = getDefaultComponent();\n      return components[PROVIDER_DEFAULT];\n    }\n\n    const providerInfo = providers[provider];\n    const platformSupport = providerInfo[Platform.OS];\n    const componentName = getAirComponentName(provider, componentType);\n    if (platformSupport === NOT_SUPPORTED) {\n      components[provider] = createNotSupportedComponent(\n        `react-native-maps: ${componentName} is not supported on ${Platform.OS}`\n      );\n    } else if (platformSupport === SUPPORTED) {\n      if (\n        provider !== PROVIDER_GOOGLE ||\n        (Platform.OS === 'ios' && googleMapIsInstalled)\n      ) {\n        components[provider] = requireNativeComponent(componentName, Component);\n      }\n    } else {\n      // (platformSupport === USES_DEFAULT_IMPLEMENTATION)\n      if (!components[PROVIDER_DEFAULT]) {\n        components[PROVIDER_DEFAULT] = getDefaultComponent();\n      }\n      components[provider] = components[PROVIDER_DEFAULT];\n    }\n\n    return components[provider];\n  };\n\n  Component.prototype.getUIManagerCommand = function getUIManagerCommand(name) {\n    const componentName = getAirComponentName(\n      this.context.provider,\n      componentType\n    );\n    return getViewManagerConfig(componentName).Commands[name];\n  };\n\n  Component.prototype.getMapManagerCommand = function getMapManagerCommand(\n    name\n  ) {\n    const airComponentName = `${getAirComponentName(\n      this.context.provider,\n      componentType\n    )}Manager`;\n    return NativeModules[airComponentName][name];\n  };\n\n  return Component;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}