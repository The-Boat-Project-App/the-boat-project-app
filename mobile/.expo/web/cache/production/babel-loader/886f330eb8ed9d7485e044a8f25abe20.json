{"ast":null,"code":"\"use strict\";var _defineProperty=require(\"@babel/runtime/helpers/defineProperty\");function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=getNativePropsForTNode;var _react=_interopRequireDefault(require(\"react\"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var empty={};function getNativePropsForTNode(props){var _tnode$getReactNative,_ref;var tnode=props.tnode,style=props.style,type=props.type,passedNativeProps=props.nativeProps,onPress=props.onPress,overridenChildren=props.children,propsForChildren=props.propsForChildren,viewProps=props.viewProps,textProps=props.textProps,TNodeChildrenRenderer=props.TNodeChildrenRenderer;var children=overridenChildren||(tnode.type==='text'?tnode.data:_react.default.createElement(TNodeChildrenRenderer,{tnode:tnode,propsForChildren:propsForChildren}));var switchProp=type==='block'?viewProps:textProps;var propsFromModel=((_tnode$getReactNative=tnode.getReactNativeProps())===null||_tnode$getReactNative===void 0?void 0:_tnode$getReactNative[type==='block'?'view':'text'])||empty;var syntheticOnPress=(_ref=onPress!==null&&onPress!==void 0?onPress:passedNativeProps===null||passedNativeProps===void 0?void 0:passedNativeProps.onPress)!==null&&_ref!==void 0?_ref:propsFromModel.onPress;var nativeProps=_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({},typeof syntheticOnPress==='function'?{accessibilityRole:type==='block'?'button':'link'}:null),propsFromModel),passedNativeProps),switchProp),{},{children:children,onPress:syntheticOnPress,style:[style,passedNativeProps===null||passedNativeProps===void 0?void 0:passedNativeProps.style,switchProp.style],testID:tnode.tagName||undefined});return nativeProps;}","map":{"version":3,"mappings":"u7BACA,uIAIA,GAAMA,MAAU,CAAG,EAAnB,CA2Be,QAASC,uBAAT,CAGbC,KAHa,CAIwD,gCACrE,GACEC,MADF,CAWID,KAXJ,CACEC,KADF,CAEEC,KAFF,CAWIF,KAXJ,CAEEE,KAFF,CAGEC,IAHF,CAWIH,KAXJ,CAGEG,IAHF,CAIeC,iBAJf,CAWIJ,KAXJ,CAIEK,WAJF,CAKEC,OALF,CAWIN,KAXJ,CAKEM,OALF,CAMYC,iBANZ,CAWIP,KAXJ,CAMEQ,QANF,CAOEC,gBAPF,CAWIT,KAXJ,CAOES,gBAPF,CAQEC,SARF,CAWIV,KAXJ,CAQEU,SARF,CASEC,SATF,CAWIX,KAXJ,CASEW,SATF,CAUEC,qBAVF,CAWIZ,KAXJ,CAUEY,qBAVF,CAYA,GAAMJ,SAAQ,CACZD,iBAAiB,GAChBN,KAAK,CAACE,IAANF,GAAe,MAAfA,CACIA,KAAD,CAAiBY,IADpBZ,CAEGa,eAAMC,aAAND,CAAoBF,qBAApBE,CAA2C,CACzCb,KADyC,CACzCA,KADyC,CAEzCQ,iCAFyC,CAA3CK,CAHa,CADnB,CAQA,GAAME,WAAU,CAAGb,IAAI,GAAK,OAATA,CAAmBO,SAAnBP,CAA+BQ,SAAlD,CACA,GAAMM,eAAc,CAClB,6BAAK,CAACC,mBAANjB,wEAA8BE,IAAI,GAAK,OAATA,CAAmB,MAAnBA,CAA4B,MAA1D,IAAqEL,KADvE,CAEA,GAAMqB,iBAAgB,OACpBb,OADoB,OACpBA,SADoB,SACpBA,SAAWF,iBADS,OACTA,mBADS,SACTA,CADS,MACTA,kBAAiB,CAAEE,OADV,6BACqBW,cAAc,CAACX,OAD1D,CAEA,GAAMD,YAAkC,0EAClC,MAAOc,iBAAP,GAA4B,UAA5B,CACC,CAAEC,iBAAiB,CAAEjB,IAAI,GAAK,OAATA,CAAmB,QAAnBA,CAA8B,MAAnD,CADD,CAEA,IAHkC,EAInCc,cAJmC,EAKnCb,iBALmC,EAMnCY,UANmC,MAOtCR,QAPyC,CAOzCA,QAPsC,CAQtCF,OAAO,CAAEa,gBAR6B,CAStCjB,KAAK,CAAE,CAACA,KAAD,CAAQE,iBAAR,OAAQA,mBAAR,SAAQA,CAAR,MAAQA,kBAAiB,CAAEF,KAA3B,CAAkCc,UAAU,CAACd,KAA7C,CAT+B,CAUtCmB,MAAM,CAAEpB,KAAK,CAACqB,OAANrB,EAAiBsB,SAVa,EAAxC,CAYA,MAAOlB,YAAP,CACD","names":["empty","getNativePropsForTNode","props","tnode","style","type","passedNativeProps","nativeProps","onPress","overridenChildren","children","propsForChildren","viewProps","textProps","TNodeChildrenRenderer","data","React","createElement","switchProp","propsFromModel","getReactNativeProps","syntheticOnPress","accessibilityRole","testID","tagName","undefined"],"sources":["getNativePropsForTNode.ts"],"sourcesContent":["import { TBlock, TPhrasing, TText } from '@native-html/transient-render-engine';\nimport React from 'react';\nimport { TextProps, ViewProps } from 'react-native';\nimport { TDefaultRendererProps } from '../shared-types';\n\nconst empty: any = {};\n\n/**\n * Extract React Native props for a given {@link TNode}, such as those which\n * would be passed to `Text`, `View` or `GenericPressable` by `TDefaultRenderer`.\n *\n * This helper function is peculiarly useful when one wants a custom renderer\n * which uses a different native component, for example `Animated.Text` instead\n * of default `Text`.\n *\n * @public\n *\n * @example\n *\n * ```tsx\n * import React from 'react';\n * import { Animated } from 'react-native';\n * import { CustomTextualRenderer, getNativePropsForTNode } from 'react-native-render-html';\n *\n * const AnimatedSpanRenderer: CustomTextualRenderer = (props) => {\n *   const nativeProps = getNativePropsForTNode(props);\n *   // This is equivalent to a TDefaultRenderer which `Text` is replaced\n *   // with Animated.Text\n *   return <Animated.Text {...nativeProps} />;\n * }\n * ```\n */\nexport default function getNativePropsForTNode<\n  T extends TPhrasing | TText | TBlock\n>(\n  props: TDefaultRendererProps<T>\n): T extends TBlock ? ViewProps & { onPress?: () => void } : TextProps {\n  const {\n    tnode,\n    style,\n    type,\n    nativeProps: passedNativeProps,\n    onPress,\n    children: overridenChildren,\n    propsForChildren,\n    viewProps,\n    textProps,\n    TNodeChildrenRenderer\n  } = props;\n  const children =\n    overridenChildren ||\n    (tnode.type === 'text'\n      ? (tnode as TText).data\n      : React.createElement(TNodeChildrenRenderer, {\n          tnode,\n          propsForChildren\n        }));\n  const switchProp = type === 'block' ? viewProps : textProps;\n  const propsFromModel =\n    tnode.getReactNativeProps()?.[type === 'block' ? 'view' : 'text'] || empty;\n  const syntheticOnPress =\n    onPress ?? passedNativeProps?.onPress ?? propsFromModel.onPress;\n  const nativeProps: TextProps | ViewProps = {\n    ...(typeof syntheticOnPress === 'function'\n      ? ({ accessibilityRole: type === 'block' ? 'button' : 'link' } as const)\n      : null),\n    ...propsFromModel,\n    ...passedNativeProps,\n    ...switchProp,\n    children,\n    onPress: syntheticOnPress,\n    style: [style, passedNativeProps?.style, switchProp.style],\n    testID: tnode.tagName || undefined\n  };\n  return nativeProps as any;\n}\n"]},"metadata":{},"sourceType":"script"}