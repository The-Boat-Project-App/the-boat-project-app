{"ast":null,"code":"import _toConsumableArray from\"@babel/runtime/helpers/toConsumableArray\";import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import{useRef,useState}from\"react\";import{useControlledState}from\"@react-stately/utils\";import{clamp,snapValueToStep}from\"@react-aria/utils\";var $dcc38d2f5fc04b76254f325fa36d$var$DEFAULT_MIN_VALUE=0;var $dcc38d2f5fc04b76254f325fa36d$var$DEFAULT_MAX_VALUE=100;var $dcc38d2f5fc04b76254f325fa36d$var$DEFAULT_STEP_VALUE=1;export function useSliderState(props){var _props$defaultValue;var isDisabled=props.isDisabled,_props$minValue=props.minValue,minValue=_props$minValue===void 0?$dcc38d2f5fc04b76254f325fa36d$var$DEFAULT_MIN_VALUE:_props$minValue,_props$maxValue=props.maxValue,maxValue=_props$maxValue===void 0?$dcc38d2f5fc04b76254f325fa36d$var$DEFAULT_MAX_VALUE:_props$maxValue,formatter=props.numberFormatter,_props$step=props.step,step=_props$step===void 0?$dcc38d2f5fc04b76254f325fa36d$var$DEFAULT_STEP_VALUE:_props$step;var _useControlledState=useControlledState(props.value,(_props$defaultValue=props.defaultValue)!=null?_props$defaultValue:[minValue],props.onChange),_useControlledState2=_slicedToArray(_useControlledState,2),values=_useControlledState2[0],setValues=_useControlledState2[1];var _useState=useState(new Array(values.length).fill(false)),_useState2=_slicedToArray(_useState,2),isDraggings=_useState2[0],setDraggings=_useState2[1];var isEditablesRef=useRef(new Array(values.length).fill(true));var _useState3=useState(undefined),_useState4=_slicedToArray(_useState3,2),focusedIndex=_useState4[0],setFocusedIndex=_useState4[1];var valuesRef=useRef(null);valuesRef.current=values;var isDraggingsRef=useRef(null);isDraggingsRef.current=isDraggings;function getValuePercent(value){return(value-minValue)/(maxValue-minValue);}function getThumbMinValue(index){return index===0?minValue:values[index-1];}function getThumbMaxValue(index){return index===values.length-1?maxValue:values[index+1];}function isThumbEditable(index){return isEditablesRef.current[index];}function setThumbEditable(index,editable){isEditablesRef.current[index]=editable;}function updateValue(index,value){if(isDisabled||!isThumbEditable(index)){return;}var thisMin=getThumbMinValue(index);var thisMax=getThumbMaxValue(index);value=snapValueToStep(value,thisMin,thisMax,step);valuesRef.current=$dcc38d2f5fc04b76254f325fa36d$var$replaceIndex(valuesRef.current,index,value);setValues(valuesRef.current);}function updateDragging(index,dragging){if(isDisabled||!isThumbEditable(index)){return;}var wasDragging=isDraggingsRef.current[index];isDraggingsRef.current=$dcc38d2f5fc04b76254f325fa36d$var$replaceIndex(isDraggingsRef.current,index,dragging);setDraggings(isDraggingsRef.current);if(props.onChangeEnd&&wasDragging&&!isDraggingsRef.current.some(Boolean)){props.onChangeEnd(valuesRef.current);}}function getFormattedValue(value){return formatter.format(value);}function setThumbPercent(index,percent){updateValue(index,getPercentValue(percent));}function getRoundedValue(value){return Math.round((value-minValue)/step)*step+minValue;}function getPercentValue(percent){var val=percent*(maxValue-minValue)+minValue;return clamp(getRoundedValue(val),minValue,maxValue);}return{values:values,getThumbValue:function getThumbValue(index){return values[index];},setThumbValue:updateValue,setThumbPercent:setThumbPercent,isThumbDragging:function isThumbDragging(index){return isDraggings[index];},setThumbDragging:updateDragging,focusedThumb:focusedIndex,setFocusedThumb:setFocusedIndex,getThumbPercent:function getThumbPercent(index){return getValuePercent(values[index]);},getValuePercent:getValuePercent,getThumbValueLabel:function getThumbValueLabel(index){return getFormattedValue(values[index]);},getFormattedValue:getFormattedValue,getThumbMinValue:getThumbMinValue,getThumbMaxValue:getThumbMaxValue,getPercentValue:getPercentValue,isThumbEditable:isThumbEditable,setThumbEditable:setThumbEditable,step:step};}function $dcc38d2f5fc04b76254f325fa36d$var$replaceIndex(array,index,value){if(array[index]===value){return array;}return[].concat(_toConsumableArray(array.slice(0,index)),[value],_toConsumableArray(array.slice(index+1)));}","map":{"version":3,"mappings":"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","names":["DEFAULT_MIN_VALUE","DEFAULT_MAX_VALUE","DEFAULT_STEP_VALUE","useSliderState","props","isDisabled","minValue","maxValue","formatter","numberFormatter","step","useControlledState","value","defaultValue","onChange","values","setValues","useState","Array","length","fill","isDraggings","setDraggings","isEditablesRef","useRef","undefined","focusedIndex","setFocusedIndex","valuesRef","current","isDraggingsRef","getValuePercent","getThumbMinValue","index","getThumbMaxValue","isThumbEditable","setThumbEditable","editable","updateValue","thisMin","thisMax","snapValueToStep","replaceIndex","updateDragging","dragging","wasDragging","onChangeEnd","some","Boolean","getFormattedValue","format","setThumbPercent","percent","getPercentValue","getRoundedValue","Math","round","val","clamp","getThumbValue","setThumbValue","isThumbDragging","setThumbDragging","focusedThumb","setFocusedThumb","getThumbPercent","getThumbValueLabel","array","slice"],"sources":["./packages/@react-stately/slider/src/useSliderState.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {clamp, snapValueToStep} from '@react-aria/utils';\nimport {SliderProps} from '@react-types/slider';\nimport {useControlledState} from '@react-stately/utils';\nimport {useRef, useState} from 'react';\n\nexport interface SliderState {\n  /**\n   * Values managed by the slider by thumb index.\n   */\n  readonly values: number[],\n  /**\n   * Get the value for the specified thumb.\n   * @param index\n   */\n  getThumbValue(index: number): number,\n\n  /**\n   * Sets the value for the specified thumb.\n   * The actual value set will be clamped and rounded according to min/max/step.\n   * @param index\n   * @param value\n   */\n  setThumbValue(index: number, value: number): void,\n\n  /**\n   * Sets value for the specified thumb by percent offset (between 0 and 1).\n   * @param index\n   * @param percent\n   */\n  setThumbPercent(index: number, percent: number): void,\n\n  /**\n   * Whether the specific thumb is being dragged.\n   * @param index\n   */\n  isThumbDragging(index: number): boolean,\n  /**\n   * Set is dragging on the specified thumb.\n   * @param index\n   * @param dragging\n   */\n  setThumbDragging(index: number, dragging: boolean): void,\n\n  /**\n   * Currently-focused thumb index.\n   */\n  readonly focusedThumb: number | undefined,\n  /**\n   * Set focused true on specified thumb. This will remove focus from\n   * any thumb that had it before.\n   * @param index\n   */\n  setFocusedThumb(index: number | undefined): void,\n\n  /**\n   * Returns the specified thumb's value as a percentage from 0 to 1.\n   * @param index\n   */\n  getThumbPercent(index: number): number,\n\n  /**\n   * Returns the value as a percent between the min and max of the slider.\n   * @param index\n   */\n  getValuePercent(value: number): number,\n\n  /**\n   * Returns the string label for the specified thumb's value, per props.formatOptions.\n   * @param index\n   */\n  getThumbValueLabel(index: number): string,\n\n  /**\n   * Returns the string label for the value, per props.formatOptions.\n   * @param index\n   */\n  getFormattedValue(value: number): string,\n\n  /**\n   * Returns the min allowed value for the specified thumb.\n   * @param index\n   */\n  getThumbMinValue(index: number): number,\n\n  /**\n   * Returns the max allowed value for the specified thumb.\n   * @param index\n   */\n  getThumbMaxValue(index: number): number,\n\n  /**\n   * Converts a percent along track (between 0 and 1) to the corresponding value.\n   * @param percent\n   */\n  getPercentValue(percent: number): number,\n\n  /**\n   * Returns if the specified thumb is editable.\n   * @param index\n   */\n  isThumbEditable(index: number): boolean,\n\n  /**\n   * Set the specified thumb's editable state.\n   * @param index\n   * @param editable\n   */\n  setThumbEditable(index: number, editable: boolean): void,\n\n  /**\n   * The step amount for the slider.\n   */\n  readonly step: number\n}\n\nconst DEFAULT_MIN_VALUE = 0;\nconst DEFAULT_MAX_VALUE = 100;\nconst DEFAULT_STEP_VALUE = 1;\n\ninterface SliderStateOptions extends SliderProps {\n  numberFormatter: Intl.NumberFormat\n}\n\n/**\n * Provides state management for a slider component. Stores values for all thumbs,\n * formats values for localization, and provides methods to update the position\n * of any thumbs.\n * @param props\n */\nexport function useSliderState(props: SliderStateOptions): SliderState {\n  const {isDisabled, minValue = DEFAULT_MIN_VALUE, maxValue = DEFAULT_MAX_VALUE, numberFormatter: formatter, step = DEFAULT_STEP_VALUE} = props;\n\n  const [values, setValues] = useControlledState<number[]>(\n    props.value as any,\n    props.defaultValue ?? [minValue] as any,\n    props.onChange as any\n  );\n  const [isDraggings, setDraggings] = useState<boolean[]>(new Array(values.length).fill(false));\n  const isEditablesRef = useRef<boolean[]>(new Array(values.length).fill(true));\n  const [focusedIndex, setFocusedIndex] = useState<number | undefined>(undefined);\n\n  const valuesRef = useRef<number[]>(null);\n  valuesRef.current = values;\n  const isDraggingsRef = useRef<boolean[]>(null);\n  isDraggingsRef.current = isDraggings;\n\n  function getValuePercent(value: number) {\n    return (value - minValue) / (maxValue - minValue);\n  }\n\n  function getThumbMinValue(index: number) {\n    return index === 0 ? minValue : values[index - 1];\n  }\n  function getThumbMaxValue(index: number) {\n    return index === values.length - 1 ? maxValue : values[index + 1];\n  }\n\n  function isThumbEditable(index: number) {\n    return isEditablesRef.current[index];\n  }\n\n  function setThumbEditable(index: number, editable: boolean) {\n    isEditablesRef.current[index] = editable;\n  }\n\n  function updateValue(index: number, value: number) {\n    if (isDisabled || !isThumbEditable(index)) {\n      return;\n    }\n    const thisMin = getThumbMinValue(index);\n    const thisMax = getThumbMaxValue(index);\n\n    // Round value to multiple of step, clamp value between min and max\n    value = snapValueToStep(value, thisMin, thisMax, step);\n    valuesRef.current = replaceIndex(valuesRef.current, index, value);\n    setValues(valuesRef.current);\n  }\n\n  function updateDragging(index: number, dragging: boolean) {\n    if (isDisabled || !isThumbEditable(index)) {\n      return;\n    }\n\n    const wasDragging = isDraggingsRef.current[index];\n    isDraggingsRef.current = replaceIndex(isDraggingsRef.current, index, dragging);\n    setDraggings(isDraggingsRef.current);\n\n    // Call onChangeEnd if no handles are dragging.\n    if (props.onChangeEnd && wasDragging && !isDraggingsRef.current.some(Boolean)) {\n      props.onChangeEnd(valuesRef.current);\n    }\n  }\n\n  function getFormattedValue(value: number) {\n    return formatter.format(value);\n  }\n\n  function setThumbPercent(index: number, percent: number) {\n    updateValue(index, getPercentValue(percent));\n  }\n\n  function getRoundedValue(value: number) {\n    return Math.round((value - minValue) / step) * step + minValue;\n  }\n\n  function getPercentValue(percent: number) {\n    const val = percent * (maxValue - minValue) + minValue;\n    return clamp(getRoundedValue(val), minValue, maxValue);\n  }\n\n  return {\n    values: values,\n    getThumbValue: (index: number) => values[index],\n    setThumbValue: updateValue,\n    setThumbPercent,\n    isThumbDragging: (index: number) => isDraggings[index],\n    setThumbDragging: updateDragging,\n    focusedThumb: focusedIndex,\n    setFocusedThumb: setFocusedIndex,\n    getThumbPercent: (index: number) => getValuePercent(values[index]),\n    getValuePercent,\n    getThumbValueLabel: (index: number) => getFormattedValue(values[index]),\n    getFormattedValue,\n    getThumbMinValue,\n    getThumbMaxValue,\n    getPercentValue,\n    isThumbEditable,\n    setThumbEditable,\n    step\n  };\n}\n\nfunction replaceIndex<T>(array: T[], index: number, value: T) {\n  if (array[index] === value) {\n    return array;\n  }\n\n  return [...array.slice(0, index), value, ...array.slice(index + 1)];\n}\n"]},"metadata":{},"sourceType":"module"}